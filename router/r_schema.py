from fastapi import APIRouter
from typing import List
from dao import d_db
from model.m_schema import *
from fastapi.exceptions import HTTPException
import re

router = APIRouter()

    
@router.post(f'/address/create', response_model=SAddress)
async def create_address(item: CreateAddress) -> SAddress:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_address(item)
        
    
@router.post(f'/address/update', response_model=str)
async def update_address(item: SAddress) -> str:
    d_db.update_address(item)
    return "success"

    
@router.get(f'/address/get', response_model=SAddress)
async def get_address(address_id: int) -> SAddress:
    return d_db.get_address(address_id)


@router.get(f'/address/filter', response_model=FilterResAddress)
async def filter_address(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        province: Optional[str] = None, 
        city: Optional[str] = None, 
        area: Optional[str] = None, 
        street: Optional[str] = None, 
        description: Optional[str] = None, 
        default_: Optional[str] = None, 
        consignee: Optional[str] = None, 
        phone: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_province: Optional[str] = None, 
        l_city: Optional[str] = None, 
        l_area: Optional[str] = None, 
        l_street: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_default_: Optional[str] = None, 
        l_consignee: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        s_province: Optional[str] = None, 
        s_city: Optional[str] = None, 
        s_area: Optional[str] = None, 
        s_street: Optional[str] = None, 
        s_description: Optional[str] = None, 
        s_consignee: Optional[str] = None, 
        s_phone: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResAddress:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if province is not None:
        values = province.split(',')
        if len(values) == 1:
            val = values[0]
            items['province'] = val
        else:
            val = values[0]
            if val != '':
                items['province_start'] = val
            
            val = values[1]
            if val != '':
                items['province_end'] = val
        
    if city is not None:
        values = city.split(',')
        if len(values) == 1:
            val = values[0]
            items['city'] = val
        else:
            val = values[0]
            if val != '':
                items['city_start'] = val
            
            val = values[1]
            if val != '':
                items['city_end'] = val
        
    if area is not None:
        values = area.split(',')
        if len(values) == 1:
            val = values[0]
            items['area'] = val
        else:
            val = values[0]
            if val != '':
                items['area_start'] = val
            
            val = values[1]
            if val != '':
                items['area_end'] = val
        
    if street is not None:
        values = street.split(',')
        if len(values) == 1:
            val = values[0]
            items['street'] = val
        else:
            val = values[0]
            if val != '':
                items['street_start'] = val
            
            val = values[1]
            if val != '':
                items['street_end'] = val
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if default_ is not None:
        values = default_.split(',')
        if len(values) == 1:
            val = values[0]
            items['default_'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['default__start'] = int(val)
            
            val = values[1]
            if val != '':
                items['default__end'] = int(val)
        
    if consignee is not None:
        values = consignee.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        

    if s_province is not None:
        search_items['province'] = '%' + s_province + '%'
        
    if s_city is not None:
        search_items['city'] = '%' + s_city + '%'
        
    if s_area is not None:
        search_items['area'] = '%' + s_area + '%'
        
    if s_street is not None:
        search_items['street'] = '%' + s_street + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        
    if s_consignee is not None:
        search_items['consignee'] = '%' + s_consignee + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_province is not None:
        values = l_province.split(',')
        values = [val for val in values]
        set_items['province'] = values
        
    if l_city is not None:
        values = l_city.split(',')
        values = [val for val in values]
        set_items['city'] = values
        
    if l_area is not None:
        values = l_area.split(',')
        values = [val for val in values]
        set_items['area'] = values
        
    if l_street is not None:
        values = l_street.split(',')
        values = [val for val in values]
        set_items['street'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_default_ is not None:
        values = l_default_.split(',')
        values = [int(val) for val in values]
        set_items['default_'] = values
        
    if l_consignee is not None:
        values = l_consignee.split(',')
        values = [val for val in values]
        set_items['consignee'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_address(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_address(items, search_items, set_items)
    
    return FilterResAddress(data=data, total=c)


@router.get(f'/address/fast_filter', response_model=FilterResAddress)
async def fast_filter_address(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        province: Optional[str] = None, 
        city: Optional[str] = None, 
        area: Optional[str] = None, 
        street: Optional[str] = None, 
        description: Optional[str] = None, 
        default_: Optional[str] = None, 
        consignee: Optional[str] = None, 
        phone: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_province: Optional[str] = None, 
        l_city: Optional[str] = None, 
        l_area: Optional[str] = None, 
        l_street: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_default_: Optional[str] = None, 
        l_consignee: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        s_province: Optional[str] = None, 
        s_city: Optional[str] = None, 
        s_area: Optional[str] = None, 
        s_street: Optional[str] = None, 
        s_description: Optional[str] = None, 
        s_consignee: Optional[str] = None, 
        s_phone: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResAddress:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if province is not None:
        values = province.split(',')
        if len(values) == 1:
            val = values[0]
            items['province'] = val
        else:
            val = values[0]
            if val != '':
                items['province_start'] = val
            
            val = values[1]
            if val != '':
                items['province_end'] = val
        
    if city is not None:
        values = city.split(',')
        if len(values) == 1:
            val = values[0]
            items['city'] = val
        else:
            val = values[0]
            if val != '':
                items['city_start'] = val
            
            val = values[1]
            if val != '':
                items['city_end'] = val
        
    if area is not None:
        values = area.split(',')
        if len(values) == 1:
            val = values[0]
            items['area'] = val
        else:
            val = values[0]
            if val != '':
                items['area_start'] = val
            
            val = values[1]
            if val != '':
                items['area_end'] = val
        
    if street is not None:
        values = street.split(',')
        if len(values) == 1:
            val = values[0]
            items['street'] = val
        else:
            val = values[0]
            if val != '':
                items['street_start'] = val
            
            val = values[1]
            if val != '':
                items['street_end'] = val
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if default_ is not None:
        values = default_.split(',')
        if len(values) == 1:
            val = values[0]
            items['default_'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['default__start'] = int(val)
            
            val = values[1]
            if val != '':
                items['default__end'] = int(val)
        
    if consignee is not None:
        values = consignee.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        

    if s_province is not None:
        search_items['province'] = '%' + s_province + '%'
        
    if s_city is not None:
        search_items['city'] = '%' + s_city + '%'
        
    if s_area is not None:
        search_items['area'] = '%' + s_area + '%'
        
    if s_street is not None:
        search_items['street'] = '%' + s_street + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        
    if s_consignee is not None:
        search_items['consignee'] = '%' + s_consignee + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_province is not None:
        values = l_province.split(',')
        values = [val for val in values]
        set_items['province'] = values
        
    if l_city is not None:
        values = l_city.split(',')
        values = [val for val in values]
        set_items['city'] = values
        
    if l_area is not None:
        values = l_area.split(',')
        values = [val for val in values]
        set_items['area'] = values
        
    if l_street is not None:
        values = l_street.split(',')
        values = [val for val in values]
        set_items['street'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_default_ is not None:
        values = l_default_.split(',')
        values = [int(val) for val in values]
        set_items['default_'] = values
        
    if l_consignee is not None:
        values = l_consignee.split(',')
        values = [val for val in values]
        set_items['consignee'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
            
    
    data = d_db.filter_address(items, search_items, set_items, page, page_size)
    return FilterResAddress(data=data, total=-1)

    
@router.post(f'/admin/create', response_model=SAdmin)
async def create_admin(item: CreateAdmin) -> SAdmin:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_admin(item)
        
    
@router.post(f'/admin/update', response_model=str)
async def update_admin(item: SAdmin) -> str:
    d_db.update_admin(item)
    return "success"

    
@router.get(f'/admin/get', response_model=SAdmin)
async def get_admin(admin_id: int) -> SAdmin:
    return d_db.get_admin(admin_id)


@router.get(f'/admin/filter', response_model=FilterResAdmin)
async def filter_admin(
        id: Optional[str] = None, 
        username: Optional[str] = None, 
        phone: Optional[str] = None, 
        email: Optional[str] = None, 
        level_id: Optional[str] = None, 
        password: Optional[str] = None, 
        id_card: Optional[str] = None, 
        gender: Optional[str] = None, 
        register_time: Optional[str] = None, 
        last_active_time: Optional[str] = None, 
        status: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_username: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_email: Optional[str] = None, 
        l_level_id: Optional[str] = None, 
        l_password: Optional[str] = None, 
        l_id_card: Optional[str] = None, 
        l_gender: Optional[str] = None, 
        l_register_time: Optional[str] = None, 
        l_last_active_time: Optional[str] = None, 
        l_status: Optional[str] = None, 
        s_username: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_email: Optional[str] = None, 
        s_password: Optional[str] = None, 
        s_id_card: Optional[str] = None, 
        s_gender: Optional[str] = None, 
        s_status: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResAdmin:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if username is not None:
        values = username.split(',')
        if len(values) == 1:
            val = values[0]
            items['username'] = val
        else:
            val = values[0]
            if val != '':
                items['username_start'] = val
            
            val = values[1]
            if val != '':
                items['username_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if email is not None:
        values = email.split(',')
        if len(values) == 1:
            val = values[0]
            items['email'] = val
        else:
            val = values[0]
            if val != '':
                items['email_start'] = val
            
            val = values[1]
            if val != '':
                items['email_end'] = val
        
    if level_id is not None:
        values = level_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['level_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['level_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['level_id_end'] = int(val)
        
    if password is not None:
        values = password.split(',')
        if len(values) == 1:
            val = values[0]
            items['password'] = val
        else:
            val = values[0]
            if val != '':
                items['password_start'] = val
            
            val = values[1]
            if val != '':
                items['password_end'] = val
        
    if id_card is not None:
        values = id_card.split(',')
        if len(values) == 1:
            val = values[0]
            items['id_card'] = val
        else:
            val = values[0]
            if val != '':
                items['id_card_start'] = val
            
            val = values[1]
            if val != '':
                items['id_card_end'] = val
        
    if gender is not None:
        values = gender.split(',')
        if len(values) == 1:
            val = values[0]
            items['gender'] = val
        else:
            val = values[0]
            if val != '':
                items['gender_start'] = val
            
            val = values[1]
            if val != '':
                items['gender_end'] = val
        
    if register_time is not None:
        values = register_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['register_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['register_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['register_time_end'] = datetime.fromtimestamp(int(val))
        
    if last_active_time is not None:
        values = last_active_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['last_active_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['last_active_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['last_active_time_end'] = datetime.fromtimestamp(int(val))
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = val
        else:
            val = values[0]
            if val != '':
                items['status_start'] = val
            
            val = values[1]
            if val != '':
                items['status_end'] = val
        

    if s_username is not None:
        search_items['username'] = '%' + s_username + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_email is not None:
        search_items['email'] = '%' + s_email + '%'
        
    if s_password is not None:
        search_items['password'] = '%' + s_password + '%'
        
    if s_id_card is not None:
        search_items['id_card'] = '%' + s_id_card + '%'
        
    if s_gender is not None:
        search_items['gender'] = '%' + s_gender + '%'
        
    if s_status is not None:
        search_items['status'] = '%' + s_status + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_username is not None:
        values = l_username.split(',')
        values = [val for val in values]
        set_items['username'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_email is not None:
        values = l_email.split(',')
        values = [val for val in values]
        set_items['email'] = values
        
    if l_level_id is not None:
        values = l_level_id.split(',')
        values = [int(val) for val in values]
        set_items['level_id'] = values
        
    if l_password is not None:
        values = l_password.split(',')
        values = [val for val in values]
        set_items['password'] = values
        
    if l_id_card is not None:
        values = l_id_card.split(',')
        values = [val for val in values]
        set_items['id_card'] = values
        
    if l_gender is not None:
        values = l_gender.split(',')
        values = [val for val in values]
        set_items['gender'] = values
        
    if l_register_time is not None:
        values = l_register_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['register_time'] = values
        
    if l_last_active_time is not None:
        values = l_last_active_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['last_active_time'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [val for val in values]
        set_items['status'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_admin(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_admin(items, search_items, set_items)
    
    return FilterResAdmin(data=data, total=c)


@router.get(f'/admin/fast_filter', response_model=FilterResAdmin)
async def fast_filter_admin(
        id: Optional[str] = None, 
        username: Optional[str] = None, 
        phone: Optional[str] = None, 
        email: Optional[str] = None, 
        level_id: Optional[str] = None, 
        password: Optional[str] = None, 
        id_card: Optional[str] = None, 
        gender: Optional[str] = None, 
        register_time: Optional[str] = None, 
        last_active_time: Optional[str] = None, 
        status: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_username: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_email: Optional[str] = None, 
        l_level_id: Optional[str] = None, 
        l_password: Optional[str] = None, 
        l_id_card: Optional[str] = None, 
        l_gender: Optional[str] = None, 
        l_register_time: Optional[str] = None, 
        l_last_active_time: Optional[str] = None, 
        l_status: Optional[str] = None, 
        s_username: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_email: Optional[str] = None, 
        s_password: Optional[str] = None, 
        s_id_card: Optional[str] = None, 
        s_gender: Optional[str] = None, 
        s_status: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResAdmin:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if username is not None:
        values = username.split(',')
        if len(values) == 1:
            val = values[0]
            items['username'] = val
        else:
            val = values[0]
            if val != '':
                items['username_start'] = val
            
            val = values[1]
            if val != '':
                items['username_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if email is not None:
        values = email.split(',')
        if len(values) == 1:
            val = values[0]
            items['email'] = val
        else:
            val = values[0]
            if val != '':
                items['email_start'] = val
            
            val = values[1]
            if val != '':
                items['email_end'] = val
        
    if level_id is not None:
        values = level_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['level_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['level_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['level_id_end'] = int(val)
        
    if password is not None:
        values = password.split(',')
        if len(values) == 1:
            val = values[0]
            items['password'] = val
        else:
            val = values[0]
            if val != '':
                items['password_start'] = val
            
            val = values[1]
            if val != '':
                items['password_end'] = val
        
    if id_card is not None:
        values = id_card.split(',')
        if len(values) == 1:
            val = values[0]
            items['id_card'] = val
        else:
            val = values[0]
            if val != '':
                items['id_card_start'] = val
            
            val = values[1]
            if val != '':
                items['id_card_end'] = val
        
    if gender is not None:
        values = gender.split(',')
        if len(values) == 1:
            val = values[0]
            items['gender'] = val
        else:
            val = values[0]
            if val != '':
                items['gender_start'] = val
            
            val = values[1]
            if val != '':
                items['gender_end'] = val
        
    if register_time is not None:
        values = register_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['register_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['register_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['register_time_end'] = datetime.fromtimestamp(int(val))
        
    if last_active_time is not None:
        values = last_active_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['last_active_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['last_active_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['last_active_time_end'] = datetime.fromtimestamp(int(val))
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = val
        else:
            val = values[0]
            if val != '':
                items['status_start'] = val
            
            val = values[1]
            if val != '':
                items['status_end'] = val
        

    if s_username is not None:
        search_items['username'] = '%' + s_username + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_email is not None:
        search_items['email'] = '%' + s_email + '%'
        
    if s_password is not None:
        search_items['password'] = '%' + s_password + '%'
        
    if s_id_card is not None:
        search_items['id_card'] = '%' + s_id_card + '%'
        
    if s_gender is not None:
        search_items['gender'] = '%' + s_gender + '%'
        
    if s_status is not None:
        search_items['status'] = '%' + s_status + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_username is not None:
        values = l_username.split(',')
        values = [val for val in values]
        set_items['username'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_email is not None:
        values = l_email.split(',')
        values = [val for val in values]
        set_items['email'] = values
        
    if l_level_id is not None:
        values = l_level_id.split(',')
        values = [int(val) for val in values]
        set_items['level_id'] = values
        
    if l_password is not None:
        values = l_password.split(',')
        values = [val for val in values]
        set_items['password'] = values
        
    if l_id_card is not None:
        values = l_id_card.split(',')
        values = [val for val in values]
        set_items['id_card'] = values
        
    if l_gender is not None:
        values = l_gender.split(',')
        values = [val for val in values]
        set_items['gender'] = values
        
    if l_register_time is not None:
        values = l_register_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['register_time'] = values
        
    if l_last_active_time is not None:
        values = l_last_active_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['last_active_time'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [val for val in values]
        set_items['status'] = values
            
    
    data = d_db.filter_admin(items, search_items, set_items, page, page_size)
    return FilterResAdmin(data=data, total=-1)

    
@router.post(f'/balance/create', response_model=SBalance)
async def create_balance(item: CreateBalance) -> SBalance:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_balance(item)
        
    
@router.post(f'/balance/update', response_model=str)
async def update_balance(item: SBalance) -> str:
    d_db.update_balance(item)
    return "success"

    
@router.get(f'/balance/get', response_model=SBalance)
async def get_balance(balance_id: int) -> SBalance:
    return d_db.get_balance(balance_id)


@router.get(f'/balance/filter', response_model=FilterResBalance)
async def filter_balance(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        change: Optional[str] = None, 
        balance: Optional[str] = None, 
        type: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        user_withdraw_id: Optional[str] = None, 
        operator_id: Optional[str] = None, 
        out_trade_no: Optional[str] = None, 
        good_id: Optional[str] = None, 
        good_title: Optional[str] = None, 
        good_num: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_change: Optional[str] = None, 
        l_balance: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_user_withdraw_id: Optional[str] = None, 
        l_operator_id: Optional[str] = None, 
        l_out_trade_no: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_good_title: Optional[str] = None, 
        l_good_num: Optional[str] = None, 
        s_type: Optional[str] = None, 
        s_description: Optional[str] = None, 
        s_out_trade_no: Optional[str] = None, 
        s_good_id: Optional[str] = None, 
        s_good_title: Optional[str] = None, 
        s_good_num: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResBalance:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if change is not None:
        values = change.split(',')
        if len(values) == 1:
            val = values[0]
            items['change'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['change_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['change_end'] = int(val)
        
    if balance is not None:
        values = balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['balance_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if user_withdraw_id is not None:
        values = user_withdraw_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_withdraw_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_withdraw_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_withdraw_id_end'] = int(val)
        
    if operator_id is not None:
        values = operator_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['operator_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['operator_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['operator_id_end'] = int(val)
        
    if out_trade_no is not None:
        values = out_trade_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_trade_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_trade_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_trade_no_end'] = val
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = val
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = val
            
            val = values[1]
            if val != '':
                items['good_id_end'] = val
        
    if good_title is not None:
        values = good_title.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_title'] = val
        else:
            val = values[0]
            if val != '':
                items['good_title_start'] = val
            
            val = values[1]
            if val != '':
                items['good_title_end'] = val
        
    if good_num is not None:
        values = good_num.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_num'] = val
        else:
            val = values[0]
            if val != '':
                items['good_num_start'] = val
            
            val = values[1]
            if val != '':
                items['good_num_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        
    if s_out_trade_no is not None:
        search_items['out_trade_no'] = '%' + s_out_trade_no + '%'
        
    if s_good_id is not None:
        search_items['good_id'] = '%' + s_good_id + '%'
        
    if s_good_title is not None:
        search_items['good_title'] = '%' + s_good_title + '%'
        
    if s_good_num is not None:
        search_items['good_num'] = '%' + s_good_num + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_change is not None:
        values = l_change.split(',')
        values = [int(val) for val in values]
        set_items['change'] = values
        
    if l_balance is not None:
        values = l_balance.split(',')
        values = [int(val) for val in values]
        set_items['balance'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_user_withdraw_id is not None:
        values = l_user_withdraw_id.split(',')
        values = [int(val) for val in values]
        set_items['user_withdraw_id'] = values
        
    if l_operator_id is not None:
        values = l_operator_id.split(',')
        values = [int(val) for val in values]
        set_items['operator_id'] = values
        
    if l_out_trade_no is not None:
        values = l_out_trade_no.split(',')
        values = [val for val in values]
        set_items['out_trade_no'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [val for val in values]
        set_items['good_id'] = values
        
    if l_good_title is not None:
        values = l_good_title.split(',')
        values = [val for val in values]
        set_items['good_title'] = values
        
    if l_good_num is not None:
        values = l_good_num.split(',')
        values = [val for val in values]
        set_items['good_num'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_balance(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_balance(items, search_items, set_items)
    
    return FilterResBalance(data=data, total=c)


@router.get(f'/balance/fast_filter', response_model=FilterResBalance)
async def fast_filter_balance(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        change: Optional[str] = None, 
        balance: Optional[str] = None, 
        type: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        user_withdraw_id: Optional[str] = None, 
        operator_id: Optional[str] = None, 
        out_trade_no: Optional[str] = None, 
        good_id: Optional[str] = None, 
        good_title: Optional[str] = None, 
        good_num: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_change: Optional[str] = None, 
        l_balance: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_user_withdraw_id: Optional[str] = None, 
        l_operator_id: Optional[str] = None, 
        l_out_trade_no: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_good_title: Optional[str] = None, 
        l_good_num: Optional[str] = None, 
        s_type: Optional[str] = None, 
        s_description: Optional[str] = None, 
        s_out_trade_no: Optional[str] = None, 
        s_good_id: Optional[str] = None, 
        s_good_title: Optional[str] = None, 
        s_good_num: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResBalance:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if change is not None:
        values = change.split(',')
        if len(values) == 1:
            val = values[0]
            items['change'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['change_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['change_end'] = int(val)
        
    if balance is not None:
        values = balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['balance_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if user_withdraw_id is not None:
        values = user_withdraw_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_withdraw_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_withdraw_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_withdraw_id_end'] = int(val)
        
    if operator_id is not None:
        values = operator_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['operator_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['operator_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['operator_id_end'] = int(val)
        
    if out_trade_no is not None:
        values = out_trade_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_trade_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_trade_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_trade_no_end'] = val
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = val
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = val
            
            val = values[1]
            if val != '':
                items['good_id_end'] = val
        
    if good_title is not None:
        values = good_title.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_title'] = val
        else:
            val = values[0]
            if val != '':
                items['good_title_start'] = val
            
            val = values[1]
            if val != '':
                items['good_title_end'] = val
        
    if good_num is not None:
        values = good_num.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_num'] = val
        else:
            val = values[0]
            if val != '':
                items['good_num_start'] = val
            
            val = values[1]
            if val != '':
                items['good_num_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        
    if s_out_trade_no is not None:
        search_items['out_trade_no'] = '%' + s_out_trade_no + '%'
        
    if s_good_id is not None:
        search_items['good_id'] = '%' + s_good_id + '%'
        
    if s_good_title is not None:
        search_items['good_title'] = '%' + s_good_title + '%'
        
    if s_good_num is not None:
        search_items['good_num'] = '%' + s_good_num + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_change is not None:
        values = l_change.split(',')
        values = [int(val) for val in values]
        set_items['change'] = values
        
    if l_balance is not None:
        values = l_balance.split(',')
        values = [int(val) for val in values]
        set_items['balance'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_user_withdraw_id is not None:
        values = l_user_withdraw_id.split(',')
        values = [int(val) for val in values]
        set_items['user_withdraw_id'] = values
        
    if l_operator_id is not None:
        values = l_operator_id.split(',')
        values = [int(val) for val in values]
        set_items['operator_id'] = values
        
    if l_out_trade_no is not None:
        values = l_out_trade_no.split(',')
        values = [val for val in values]
        set_items['out_trade_no'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [val for val in values]
        set_items['good_id'] = values
        
    if l_good_title is not None:
        values = l_good_title.split(',')
        values = [val for val in values]
        set_items['good_title'] = values
        
    if l_good_num is not None:
        values = l_good_num.split(',')
        values = [val for val in values]
        set_items['good_num'] = values
            
    
    data = d_db.filter_balance(items, search_items, set_items, page, page_size)
    return FilterResBalance(data=data, total=-1)

    
@router.post(f'/banner/create', response_model=SBanner)
async def create_banner(item: CreateBanner) -> SBanner:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_banner(item)
        
    
@router.post(f'/banner/update', response_model=str)
async def update_banner(item: SBanner) -> str:
    d_db.update_banner(item)
    return "success"

    
@router.get(f'/banner/get', response_model=SBanner)
async def get_banner(banner_id: int) -> SBanner:
    return d_db.get_banner(banner_id)


@router.get(f'/banner/filter', response_model=FilterResBanner)
async def filter_banner(
        id: Optional[str] = None, 
        image: Optional[str] = None, 
        title: Optional[str] = None, 
        subtitle: Optional[str] = None, 
        width: Optional[str] = None, 
        height: Optional[str] = None, 
        create_time: Optional[str] = None, 
        description: Optional[str] = None, 
        good_id: Optional[str] = None, 
        ban_label: Optional[str] = None, 
        type_id: Optional[str] = None, 
        good_spec_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_image: Optional[str] = None, 
        l_title: Optional[str] = None, 
        l_subtitle: Optional[str] = None, 
        l_width: Optional[str] = None, 
        l_height: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_ban_label: Optional[str] = None, 
        l_type_id: Optional[str] = None, 
        l_good_spec_id: Optional[str] = None, 
        s_image: Optional[str] = None, 
        s_title: Optional[str] = None, 
        s_subtitle: Optional[str] = None, 
        s_description: Optional[str] = None, 
        s_ban_label: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResBanner:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if image is not None:
        values = image.split(',')
        if len(values) == 1:
            val = values[0]
            items['image'] = val
        else:
            val = values[0]
            if val != '':
                items['image_start'] = val
            
            val = values[1]
            if val != '':
                items['image_end'] = val
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        
    if subtitle is not None:
        values = subtitle.split(',')
        if len(values) == 1:
            val = values[0]
            items['subtitle'] = val
        else:
            val = values[0]
            if val != '':
                items['subtitle_start'] = val
            
            val = values[1]
            if val != '':
                items['subtitle_end'] = val
        
    if width is not None:
        values = width.split(',')
        if len(values) == 1:
            val = values[0]
            items['width'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['width_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['width_end'] = int(val)
        
    if height is not None:
        values = height.split(',')
        if len(values) == 1:
            val = values[0]
            items['height'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['height_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['height_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if ban_label is not None:
        values = ban_label.split(',')
        if len(values) == 1:
            val = values[0]
            items['ban_label'] = val
        else:
            val = values[0]
            if val != '':
                items['ban_label_start'] = val
            
            val = values[1]
            if val != '':
                items['ban_label_end'] = val
        
    if type_id is not None:
        values = type_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['type_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['type_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['type_id_end'] = int(val)
        
    if good_spec_id is not None:
        values = good_spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_spec_id_end'] = int(val)
        

    if s_image is not None:
        search_items['image'] = '%' + s_image + '%'
        
    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        
    if s_subtitle is not None:
        search_items['subtitle'] = '%' + s_subtitle + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        
    if s_ban_label is not None:
        search_items['ban_label'] = '%' + s_ban_label + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_image is not None:
        values = l_image.split(',')
        values = [val for val in values]
        set_items['image'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
        
    if l_subtitle is not None:
        values = l_subtitle.split(',')
        values = [val for val in values]
        set_items['subtitle'] = values
        
    if l_width is not None:
        values = l_width.split(',')
        values = [int(val) for val in values]
        set_items['width'] = values
        
    if l_height is not None:
        values = l_height.split(',')
        values = [int(val) for val in values]
        set_items['height'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_ban_label is not None:
        values = l_ban_label.split(',')
        values = [val for val in values]
        set_items['ban_label'] = values
        
    if l_type_id is not None:
        values = l_type_id.split(',')
        values = [int(val) for val in values]
        set_items['type_id'] = values
        
    if l_good_spec_id is not None:
        values = l_good_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['good_spec_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_banner(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_banner(items, search_items, set_items)
    
    return FilterResBanner(data=data, total=c)


@router.get(f'/banner/fast_filter', response_model=FilterResBanner)
async def fast_filter_banner(
        id: Optional[str] = None, 
        image: Optional[str] = None, 
        title: Optional[str] = None, 
        subtitle: Optional[str] = None, 
        width: Optional[str] = None, 
        height: Optional[str] = None, 
        create_time: Optional[str] = None, 
        description: Optional[str] = None, 
        good_id: Optional[str] = None, 
        ban_label: Optional[str] = None, 
        type_id: Optional[str] = None, 
        good_spec_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_image: Optional[str] = None, 
        l_title: Optional[str] = None, 
        l_subtitle: Optional[str] = None, 
        l_width: Optional[str] = None, 
        l_height: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_ban_label: Optional[str] = None, 
        l_type_id: Optional[str] = None, 
        l_good_spec_id: Optional[str] = None, 
        s_image: Optional[str] = None, 
        s_title: Optional[str] = None, 
        s_subtitle: Optional[str] = None, 
        s_description: Optional[str] = None, 
        s_ban_label: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResBanner:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if image is not None:
        values = image.split(',')
        if len(values) == 1:
            val = values[0]
            items['image'] = val
        else:
            val = values[0]
            if val != '':
                items['image_start'] = val
            
            val = values[1]
            if val != '':
                items['image_end'] = val
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        
    if subtitle is not None:
        values = subtitle.split(',')
        if len(values) == 1:
            val = values[0]
            items['subtitle'] = val
        else:
            val = values[0]
            if val != '':
                items['subtitle_start'] = val
            
            val = values[1]
            if val != '':
                items['subtitle_end'] = val
        
    if width is not None:
        values = width.split(',')
        if len(values) == 1:
            val = values[0]
            items['width'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['width_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['width_end'] = int(val)
        
    if height is not None:
        values = height.split(',')
        if len(values) == 1:
            val = values[0]
            items['height'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['height_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['height_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if ban_label is not None:
        values = ban_label.split(',')
        if len(values) == 1:
            val = values[0]
            items['ban_label'] = val
        else:
            val = values[0]
            if val != '':
                items['ban_label_start'] = val
            
            val = values[1]
            if val != '':
                items['ban_label_end'] = val
        
    if type_id is not None:
        values = type_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['type_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['type_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['type_id_end'] = int(val)
        
    if good_spec_id is not None:
        values = good_spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_spec_id_end'] = int(val)
        

    if s_image is not None:
        search_items['image'] = '%' + s_image + '%'
        
    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        
    if s_subtitle is not None:
        search_items['subtitle'] = '%' + s_subtitle + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        
    if s_ban_label is not None:
        search_items['ban_label'] = '%' + s_ban_label + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_image is not None:
        values = l_image.split(',')
        values = [val for val in values]
        set_items['image'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
        
    if l_subtitle is not None:
        values = l_subtitle.split(',')
        values = [val for val in values]
        set_items['subtitle'] = values
        
    if l_width is not None:
        values = l_width.split(',')
        values = [int(val) for val in values]
        set_items['width'] = values
        
    if l_height is not None:
        values = l_height.split(',')
        values = [int(val) for val in values]
        set_items['height'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_ban_label is not None:
        values = l_ban_label.split(',')
        values = [val for val in values]
        set_items['ban_label'] = values
        
    if l_type_id is not None:
        values = l_type_id.split(',')
        values = [int(val) for val in values]
        set_items['type_id'] = values
        
    if l_good_spec_id is not None:
        values = l_good_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['good_spec_id'] = values
            
    
    data = d_db.filter_banner(items, search_items, set_items, page, page_size)
    return FilterResBanner(data=data, total=-1)

    
@router.post(f'/cart/create', response_model=SCart)
async def create_cart(item: CreateCart) -> SCart:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_cart(item)
        
    
@router.post(f'/cart/update', response_model=str)
async def update_cart(item: SCart) -> str:
    d_db.update_cart(item)
    return "success"

    
@router.get(f'/cart/get', response_model=SCart)
async def get_cart(cart_id: int) -> SCart:
    return d_db.get_cart(cart_id)


@router.get(f'/cart/filter', response_model=FilterResCart)
async def filter_cart(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        amount: Optional[str] = None, 
        creat_time: Optional[str] = None, 
        good_spec_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_creat_time: Optional[str] = None, 
        l_good_spec_id: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResCart:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if creat_time is not None:
        values = creat_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['creat_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['creat_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['creat_time_end'] = datetime.fromtimestamp(int(val))
        
    if good_spec_id is not None:
        values = good_spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_spec_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_creat_time is not None:
        values = l_creat_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['creat_time'] = values
        
    if l_good_spec_id is not None:
        values = l_good_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['good_spec_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_cart(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_cart(items, search_items, set_items)
    
    return FilterResCart(data=data, total=c)


@router.get(f'/cart/fast_filter', response_model=FilterResCart)
async def fast_filter_cart(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        amount: Optional[str] = None, 
        creat_time: Optional[str] = None, 
        good_spec_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_creat_time: Optional[str] = None, 
        l_good_spec_id: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResCart:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if creat_time is not None:
        values = creat_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['creat_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['creat_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['creat_time_end'] = datetime.fromtimestamp(int(val))
        
    if good_spec_id is not None:
        values = good_spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_spec_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_creat_time is not None:
        values = l_creat_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['creat_time'] = values
        
    if l_good_spec_id is not None:
        values = l_good_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['good_spec_id'] = values
            
    
    data = d_db.filter_cart(items, search_items, set_items, page, page_size)
    return FilterResCart(data=data, total=-1)

    
@router.post(f'/category/create', response_model=SCategory)
async def create_category(item: CreateCategory) -> SCategory:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_category(item)
        
    
@router.post(f'/category/update', response_model=str)
async def update_category(item: SCategory) -> str:
    d_db.update_category(item)
    return "success"

    
@router.get(f'/category/get', response_model=SCategory)
async def get_category(category_id: int) -> SCategory:
    return d_db.get_category(category_id)


@router.get(f'/category/filter', response_model=FilterResCategory)
async def filter_category(
        id: Optional[str] = None, 
        cname: Optional[str] = None, 
        parent_category_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_cname: Optional[str] = None, 
        l_parent_category_id: Optional[str] = None, 
        s_cname: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResCategory:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if cname is not None:
        values = cname.split(',')
        if len(values) == 1:
            val = values[0]
            items['cname'] = val
        else:
            val = values[0]
            if val != '':
                items['cname_start'] = val
            
            val = values[1]
            if val != '':
                items['cname_end'] = val
        
    if parent_category_id is not None:
        values = parent_category_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_category_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parent_category_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parent_category_id_end'] = int(val)
        

    if s_cname is not None:
        search_items['cname'] = '%' + s_cname + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_cname is not None:
        values = l_cname.split(',')
        values = [val for val in values]
        set_items['cname'] = values
        
    if l_parent_category_id is not None:
        values = l_parent_category_id.split(',')
        values = [int(val) for val in values]
        set_items['parent_category_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_category(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_category(items, search_items, set_items)
    
    return FilterResCategory(data=data, total=c)


@router.get(f'/category/fast_filter', response_model=FilterResCategory)
async def fast_filter_category(
        id: Optional[str] = None, 
        cname: Optional[str] = None, 
        parent_category_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_cname: Optional[str] = None, 
        l_parent_category_id: Optional[str] = None, 
        s_cname: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResCategory:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if cname is not None:
        values = cname.split(',')
        if len(values) == 1:
            val = values[0]
            items['cname'] = val
        else:
            val = values[0]
            if val != '':
                items['cname_start'] = val
            
            val = values[1]
            if val != '':
                items['cname_end'] = val
        
    if parent_category_id is not None:
        values = parent_category_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_category_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parent_category_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parent_category_id_end'] = int(val)
        

    if s_cname is not None:
        search_items['cname'] = '%' + s_cname + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_cname is not None:
        values = l_cname.split(',')
        values = [val for val in values]
        set_items['cname'] = values
        
    if l_parent_category_id is not None:
        values = l_parent_category_id.split(',')
        values = [int(val) for val in values]
        set_items['parent_category_id'] = values
            
    
    data = d_db.filter_category(items, search_items, set_items, page, page_size)
    return FilterResCategory(data=data, total=-1)

    
@router.post(f'/city/create', response_model=SCity)
async def create_city(item: CreateCity) -> SCity:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_city(item)
        
    
@router.post(f'/city/update', response_model=str)
async def update_city(item: SCity) -> str:
    d_db.update_city(item)
    return "success"

    
@router.get(f'/city/get', response_model=SCity)
async def get_city(city_id: int) -> SCity:
    return d_db.get_city(city_id)


@router.get(f'/city/filter', response_model=FilterResCity)
async def filter_city(
        id: Optional[str] = None, 
        cname: Optional[str] = None, 
        parid: Optional[str] = None, 
        status: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_cname: Optional[str] = None, 
        l_parid: Optional[str] = None, 
        l_status: Optional[str] = None, 
        s_cname: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResCity:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if cname is not None:
        values = cname.split(',')
        if len(values) == 1:
            val = values[0]
            items['cname'] = val
        else:
            val = values[0]
            if val != '':
                items['cname_start'] = val
            
            val = values[1]
            if val != '':
                items['cname_end'] = val
        
    if parid is not None:
        values = parid.split(',')
        if len(values) == 1:
            val = values[0]
            items['parid'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parid_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parid_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        

    if s_cname is not None:
        search_items['cname'] = '%' + s_cname + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_cname is not None:
        values = l_cname.split(',')
        values = [val for val in values]
        set_items['cname'] = values
        
    if l_parid is not None:
        values = l_parid.split(',')
        values = [int(val) for val in values]
        set_items['parid'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_city(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_city(items, search_items, set_items)
    
    return FilterResCity(data=data, total=c)


@router.get(f'/city/fast_filter', response_model=FilterResCity)
async def fast_filter_city(
        id: Optional[str] = None, 
        cname: Optional[str] = None, 
        parid: Optional[str] = None, 
        status: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_cname: Optional[str] = None, 
        l_parid: Optional[str] = None, 
        l_status: Optional[str] = None, 
        s_cname: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResCity:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if cname is not None:
        values = cname.split(',')
        if len(values) == 1:
            val = values[0]
            items['cname'] = val
        else:
            val = values[0]
            if val != '':
                items['cname_start'] = val
            
            val = values[1]
            if val != '':
                items['cname_end'] = val
        
    if parid is not None:
        values = parid.split(',')
        if len(values) == 1:
            val = values[0]
            items['parid'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parid_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parid_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        

    if s_cname is not None:
        search_items['cname'] = '%' + s_cname + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_cname is not None:
        values = l_cname.split(',')
        values = [val for val in values]
        set_items['cname'] = values
        
    if l_parid is not None:
        values = l_parid.split(',')
        values = [int(val) for val in values]
        set_items['parid'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
            
    
    data = d_db.filter_city(items, search_items, set_items, page, page_size)
    return FilterResCity(data=data, total=-1)

    
@router.post(f'/coin/create', response_model=SCoin)
async def create_coin(item: CreateCoin) -> SCoin:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_coin(item)
        
    
@router.post(f'/coin/update', response_model=str)
async def update_coin(item: SCoin) -> str:
    d_db.update_coin(item)
    return "success"

    
@router.get(f'/coin/get', response_model=SCoin)
async def get_coin(coin_id: int) -> SCoin:
    return d_db.get_coin(coin_id)


@router.get(f'/coin/filter', response_model=FilterResCoin)
async def filter_coin(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        change: Optional[str] = None, 
        coin: Optional[str] = None, 
        type: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        out_trade_no: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_change: Optional[str] = None, 
        l_coin: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_out_trade_no: Optional[str] = None, 
        s_type: Optional[str] = None, 
        s_description: Optional[str] = None, 
        s_out_trade_no: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResCoin:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if change is not None:
        values = change.split(',')
        if len(values) == 1:
            val = values[0]
            items['change'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['change_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['change_end'] = int(val)
        
    if coin is not None:
        values = coin.split(',')
        if len(values) == 1:
            val = values[0]
            items['coin'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['coin_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['coin_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if out_trade_no is not None:
        values = out_trade_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_trade_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_trade_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_trade_no_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        
    if s_out_trade_no is not None:
        search_items['out_trade_no'] = '%' + s_out_trade_no + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_change is not None:
        values = l_change.split(',')
        values = [int(val) for val in values]
        set_items['change'] = values
        
    if l_coin is not None:
        values = l_coin.split(',')
        values = [int(val) for val in values]
        set_items['coin'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_out_trade_no is not None:
        values = l_out_trade_no.split(',')
        values = [val for val in values]
        set_items['out_trade_no'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_coin(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_coin(items, search_items, set_items)
    
    return FilterResCoin(data=data, total=c)


@router.get(f'/coin/fast_filter', response_model=FilterResCoin)
async def fast_filter_coin(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        change: Optional[str] = None, 
        coin: Optional[str] = None, 
        type: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        out_trade_no: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_change: Optional[str] = None, 
        l_coin: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_out_trade_no: Optional[str] = None, 
        s_type: Optional[str] = None, 
        s_description: Optional[str] = None, 
        s_out_trade_no: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResCoin:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if change is not None:
        values = change.split(',')
        if len(values) == 1:
            val = values[0]
            items['change'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['change_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['change_end'] = int(val)
        
    if coin is not None:
        values = coin.split(',')
        if len(values) == 1:
            val = values[0]
            items['coin'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['coin_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['coin_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if out_trade_no is not None:
        values = out_trade_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_trade_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_trade_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_trade_no_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        
    if s_out_trade_no is not None:
        search_items['out_trade_no'] = '%' + s_out_trade_no + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_change is not None:
        values = l_change.split(',')
        values = [int(val) for val in values]
        set_items['change'] = values
        
    if l_coin is not None:
        values = l_coin.split(',')
        values = [int(val) for val in values]
        set_items['coin'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_out_trade_no is not None:
        values = l_out_trade_no.split(',')
        values = [val for val in values]
        set_items['out_trade_no'] = values
            
    
    data = d_db.filter_coin(items, search_items, set_items, page, page_size)
    return FilterResCoin(data=data, total=-1)

    
@router.post(f'/combo/create', response_model=SCombo)
async def create_combo(item: CreateCombo) -> SCombo:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_combo(item)
        
    
@router.post(f'/combo/update', response_model=str)
async def update_combo(item: SCombo) -> str:
    d_db.update_combo(item)
    return "success"

    
@router.get(f'/combo/get', response_model=SCombo)
async def get_combo(combo_id: int) -> SCombo:
    return d_db.get_combo(combo_id)


@router.get(f'/combo/filter', response_model=FilterResCombo)
async def filter_combo(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        title: Optional[str] = None, 
        amount: Optional[str] = None, 
        price: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_price: Optional[str] = None, 
        s_title: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResCombo:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if price is not None:
        values = price.split(',')
        if len(values) == 1:
            val = values[0]
            items['price'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['price_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['price_end'] = int(val)
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_price is not None:
        values = l_price.split(',')
        values = [int(val) for val in values]
        set_items['price'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_combo(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_combo(items, search_items, set_items)
    
    return FilterResCombo(data=data, total=c)


@router.get(f'/combo/fast_filter', response_model=FilterResCombo)
async def fast_filter_combo(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        title: Optional[str] = None, 
        amount: Optional[str] = None, 
        price: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_price: Optional[str] = None, 
        s_title: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResCombo:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if price is not None:
        values = price.split(',')
        if len(values) == 1:
            val = values[0]
            items['price'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['price_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['price_end'] = int(val)
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_price is not None:
        values = l_price.split(',')
        values = [int(val) for val in values]
        set_items['price'] = values
            
    
    data = d_db.filter_combo(items, search_items, set_items, page, page_size)
    return FilterResCombo(data=data, total=-1)

    
@router.post(f'/delivery_rule/create', response_model=SDeliveryRule)
async def create_delivery_rule(item: CreateDeliveryRule) -> SDeliveryRule:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_delivery_rule(item)
        
    
@router.post(f'/delivery_rule/update', response_model=str)
async def update_delivery_rule(item: SDeliveryRule) -> str:
    d_db.update_delivery_rule(item)
    return "success"

    
@router.get(f'/delivery_rule/get', response_model=SDeliveryRule)
async def get_delivery_rule(delivery_rule_id: int) -> SDeliveryRule:
    return d_db.get_delivery_rule(delivery_rule_id)


@router.get(f'/delivery_rule/filter', response_model=FilterResDeliveryRule)
async def filter_delivery_rule(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        spec_id: Optional[str] = None, 
        province: Optional[str] = None, 
        city: Optional[str] = None, 
        area: Optional[str] = None, 
        is_reachable: Optional[str] = None, 
        delivery_fee: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_spec_id: Optional[str] = None, 
        l_province: Optional[str] = None, 
        l_city: Optional[str] = None, 
        l_area: Optional[str] = None, 
        l_is_reachable: Optional[str] = None, 
        l_delivery_fee: Optional[str] = None, 
        s_province: Optional[str] = None, 
        s_city: Optional[str] = None, 
        s_area: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResDeliveryRule:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if spec_id is not None:
        values = spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['spec_id_end'] = int(val)
        
    if province is not None:
        values = province.split(',')
        if len(values) == 1:
            val = values[0]
            items['province'] = val
        else:
            val = values[0]
            if val != '':
                items['province_start'] = val
            
            val = values[1]
            if val != '':
                items['province_end'] = val
        
    if city is not None:
        values = city.split(',')
        if len(values) == 1:
            val = values[0]
            items['city'] = val
        else:
            val = values[0]
            if val != '':
                items['city_start'] = val
            
            val = values[1]
            if val != '':
                items['city_end'] = val
        
    if area is not None:
        values = area.split(',')
        if len(values) == 1:
            val = values[0]
            items['area'] = val
        else:
            val = values[0]
            if val != '':
                items['area_start'] = val
            
            val = values[1]
            if val != '':
                items['area_end'] = val
        
    if is_reachable is not None:
        values = is_reachable.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_reachable'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_reachable_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_reachable_end'] = int(val)
        
    if delivery_fee is not None:
        values = delivery_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['delivery_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['delivery_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['delivery_fee_end'] = int(val)
        

    if s_province is not None:
        search_items['province'] = '%' + s_province + '%'
        
    if s_city is not None:
        search_items['city'] = '%' + s_city + '%'
        
    if s_area is not None:
        search_items['area'] = '%' + s_area + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_spec_id is not None:
        values = l_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['spec_id'] = values
        
    if l_province is not None:
        values = l_province.split(',')
        values = [val for val in values]
        set_items['province'] = values
        
    if l_city is not None:
        values = l_city.split(',')
        values = [val for val in values]
        set_items['city'] = values
        
    if l_area is not None:
        values = l_area.split(',')
        values = [val for val in values]
        set_items['area'] = values
        
    if l_is_reachable is not None:
        values = l_is_reachable.split(',')
        values = [int(val) for val in values]
        set_items['is_reachable'] = values
        
    if l_delivery_fee is not None:
        values = l_delivery_fee.split(',')
        values = [int(val) for val in values]
        set_items['delivery_fee'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_delivery_rule(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_delivery_rule(items, search_items, set_items)
    
    return FilterResDeliveryRule(data=data, total=c)


@router.get(f'/delivery_rule/fast_filter', response_model=FilterResDeliveryRule)
async def fast_filter_delivery_rule(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        spec_id: Optional[str] = None, 
        province: Optional[str] = None, 
        city: Optional[str] = None, 
        area: Optional[str] = None, 
        is_reachable: Optional[str] = None, 
        delivery_fee: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_spec_id: Optional[str] = None, 
        l_province: Optional[str] = None, 
        l_city: Optional[str] = None, 
        l_area: Optional[str] = None, 
        l_is_reachable: Optional[str] = None, 
        l_delivery_fee: Optional[str] = None, 
        s_province: Optional[str] = None, 
        s_city: Optional[str] = None, 
        s_area: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResDeliveryRule:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if spec_id is not None:
        values = spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['spec_id_end'] = int(val)
        
    if province is not None:
        values = province.split(',')
        if len(values) == 1:
            val = values[0]
            items['province'] = val
        else:
            val = values[0]
            if val != '':
                items['province_start'] = val
            
            val = values[1]
            if val != '':
                items['province_end'] = val
        
    if city is not None:
        values = city.split(',')
        if len(values) == 1:
            val = values[0]
            items['city'] = val
        else:
            val = values[0]
            if val != '':
                items['city_start'] = val
            
            val = values[1]
            if val != '':
                items['city_end'] = val
        
    if area is not None:
        values = area.split(',')
        if len(values) == 1:
            val = values[0]
            items['area'] = val
        else:
            val = values[0]
            if val != '':
                items['area_start'] = val
            
            val = values[1]
            if val != '':
                items['area_end'] = val
        
    if is_reachable is not None:
        values = is_reachable.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_reachable'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_reachable_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_reachable_end'] = int(val)
        
    if delivery_fee is not None:
        values = delivery_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['delivery_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['delivery_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['delivery_fee_end'] = int(val)
        

    if s_province is not None:
        search_items['province'] = '%' + s_province + '%'
        
    if s_city is not None:
        search_items['city'] = '%' + s_city + '%'
        
    if s_area is not None:
        search_items['area'] = '%' + s_area + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_spec_id is not None:
        values = l_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['spec_id'] = values
        
    if l_province is not None:
        values = l_province.split(',')
        values = [val for val in values]
        set_items['province'] = values
        
    if l_city is not None:
        values = l_city.split(',')
        values = [val for val in values]
        set_items['city'] = values
        
    if l_area is not None:
        values = l_area.split(',')
        values = [val for val in values]
        set_items['area'] = values
        
    if l_is_reachable is not None:
        values = l_is_reachable.split(',')
        values = [int(val) for val in values]
        set_items['is_reachable'] = values
        
    if l_delivery_fee is not None:
        values = l_delivery_fee.split(',')
        values = [int(val) for val in values]
        set_items['delivery_fee'] = values
            
    
    data = d_db.filter_delivery_rule(items, search_items, set_items, page, page_size)
    return FilterResDeliveryRule(data=data, total=-1)

    
@router.post(f'/export_file/create', response_model=SExportFile)
async def create_export_file(item: CreateExportFile) -> SExportFile:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_export_file(item)
        
    
@router.post(f'/export_file/update', response_model=str)
async def update_export_file(item: SExportFile) -> str:
    d_db.update_export_file(item)
    return "success"

    
@router.get(f'/export_file/get', response_model=SExportFile)
async def get_export_file(export_file_id: int) -> SExportFile:
    return d_db.get_export_file(export_file_id)


@router.get(f'/export_file/filter', response_model=FilterResExportFile)
async def filter_export_file(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        export_url: Optional[str] = None, 
        type: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_export_url: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        s_export_url: Optional[str] = None, 
        s_type: Optional[str] = None, 
        s_description: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResExportFile:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if export_url is not None:
        values = export_url.split(',')
        if len(values) == 1:
            val = values[0]
            items['export_url'] = val
        else:
            val = values[0]
            if val != '':
                items['export_url_start'] = val
            
            val = values[1]
            if val != '':
                items['export_url_end'] = val
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_export_url is not None:
        search_items['export_url'] = '%' + s_export_url + '%'
        
    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_export_url is not None:
        values = l_export_url.split(',')
        values = [val for val in values]
        set_items['export_url'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_export_file(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_export_file(items, search_items, set_items)
    
    return FilterResExportFile(data=data, total=c)


@router.get(f'/export_file/fast_filter', response_model=FilterResExportFile)
async def fast_filter_export_file(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        export_url: Optional[str] = None, 
        type: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_export_url: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        s_export_url: Optional[str] = None, 
        s_type: Optional[str] = None, 
        s_description: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResExportFile:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if export_url is not None:
        values = export_url.split(',')
        if len(values) == 1:
            val = values[0]
            items['export_url'] = val
        else:
            val = values[0]
            if val != '':
                items['export_url_start'] = val
            
            val = values[1]
            if val != '':
                items['export_url_end'] = val
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_export_url is not None:
        search_items['export_url'] = '%' + s_export_url + '%'
        
    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_export_url is not None:
        values = l_export_url.split(',')
        values = [val for val in values]
        set_items['export_url'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
            
    
    data = d_db.filter_export_file(items, search_items, set_items, page, page_size)
    return FilterResExportFile(data=data, total=-1)

    
@router.post(f'/flash_order/create', response_model=SFlashOrder)
async def create_flash_order(item: CreateFlashOrder) -> SFlashOrder:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_flash_order(item)
        
    
@router.post(f'/flash_order/update', response_model=str)
async def update_flash_order(item: SFlashOrder) -> str:
    d_db.update_flash_order(item)
    return "success"

    
@router.get(f'/flash_order/get', response_model=SFlashOrder)
async def get_flash_order(flash_order_id: int) -> SFlashOrder:
    return d_db.get_flash_order(flash_order_id)


@router.get(f'/flash_order/filter', response_model=FilterResFlashOrder)
async def filter_flash_order(
        id: Optional[str] = None, 
        package_id: Optional[str] = None, 
        status: Optional[str] = None, 
        create_time: Optional[str] = None, 
        paid_time: Optional[str] = None, 
        user_id: Optional[str] = None, 
        number: Optional[str] = None, 
        flash_price: Optional[str] = None, 
        flash_cost: Optional[str] = None, 
        out_trade_no: Optional[str] = None, 
        paid_amount: Optional[str] = None, 
        paid_balance: Optional[str] = None, 
        single_status: Optional[str] = None, 
        sold: Optional[str] = None, 
        whole_status: Optional[str] = None, 
        spec_id: Optional[str] = None, 
        put_on_time: Optional[str] = None, 
        detail: Optional[str] = None, 
        is_assign_income: Optional[str] = None, 
        complete_time: Optional[str] = None, 
        return_sold: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_package_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_paid_time: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_number: Optional[str] = None, 
        l_flash_price: Optional[str] = None, 
        l_flash_cost: Optional[str] = None, 
        l_out_trade_no: Optional[str] = None, 
        l_paid_amount: Optional[str] = None, 
        l_paid_balance: Optional[str] = None, 
        l_single_status: Optional[str] = None, 
        l_sold: Optional[str] = None, 
        l_whole_status: Optional[str] = None, 
        l_spec_id: Optional[str] = None, 
        l_put_on_time: Optional[str] = None, 
        l_detail: Optional[str] = None, 
        l_is_assign_income: Optional[str] = None, 
        l_complete_time: Optional[str] = None, 
        l_return_sold: Optional[str] = None, 
        s_out_trade_no: Optional[str] = None, 
        s_detail: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResFlashOrder:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if package_id is not None:
        values = package_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['package_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['package_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['package_id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if paid_time is not None:
        values = paid_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['paid_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['paid_time_end'] = datetime.fromtimestamp(int(val))
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if number is not None:
        values = number.split(',')
        if len(values) == 1:
            val = values[0]
            items['number'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['number_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['number_end'] = int(val)
        
    if flash_price is not None:
        values = flash_price.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_price'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_price_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_price_end'] = int(val)
        
    if flash_cost is not None:
        values = flash_cost.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_cost'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_cost_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_cost_end'] = int(val)
        
    if out_trade_no is not None:
        values = out_trade_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_trade_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_trade_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_trade_no_end'] = val
        
    if paid_amount is not None:
        values = paid_amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paid_amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paid_amount_end'] = int(val)
        
    if paid_balance is not None:
        values = paid_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paid_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paid_balance_end'] = int(val)
        
    if single_status is not None:
        values = single_status.split(',')
        if len(values) == 1:
            val = values[0]
            items['single_status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['single_status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['single_status_end'] = int(val)
        
    if sold is not None:
        values = sold.split(',')
        if len(values) == 1:
            val = values[0]
            items['sold'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['sold_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['sold_end'] = int(val)
        
    if whole_status is not None:
        values = whole_status.split(',')
        if len(values) == 1:
            val = values[0]
            items['whole_status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['whole_status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['whole_status_end'] = int(val)
        
    if spec_id is not None:
        values = spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['spec_id_end'] = int(val)
        
    if put_on_time is not None:
        values = put_on_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['put_on_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['put_on_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['put_on_time_end'] = datetime.fromtimestamp(int(val))
        
    if detail is not None:
        values = detail.split(',')
        if len(values) == 1:
            val = values[0]
            items['detail'] = val
        else:
            val = values[0]
            if val != '':
                items['detail_start'] = val
            
            val = values[1]
            if val != '':
                items['detail_end'] = val
        
    if is_assign_income is not None:
        values = is_assign_income.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_assign_income'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_assign_income_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_assign_income_end'] = int(val)
        
    if complete_time is not None:
        values = complete_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['complete_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['complete_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['complete_time_end'] = datetime.fromtimestamp(int(val))
        
    if return_sold is not None:
        values = return_sold.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_sold'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['return_sold_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['return_sold_end'] = int(val)
        

    if s_out_trade_no is not None:
        search_items['out_trade_no'] = '%' + s_out_trade_no + '%'
        
    if s_detail is not None:
        search_items['detail'] = '%' + s_detail + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_package_id is not None:
        values = l_package_id.split(',')
        values = [int(val) for val in values]
        set_items['package_id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_paid_time is not None:
        values = l_paid_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['paid_time'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_number is not None:
        values = l_number.split(',')
        values = [int(val) for val in values]
        set_items['number'] = values
        
    if l_flash_price is not None:
        values = l_flash_price.split(',')
        values = [int(val) for val in values]
        set_items['flash_price'] = values
        
    if l_flash_cost is not None:
        values = l_flash_cost.split(',')
        values = [int(val) for val in values]
        set_items['flash_cost'] = values
        
    if l_out_trade_no is not None:
        values = l_out_trade_no.split(',')
        values = [val for val in values]
        set_items['out_trade_no'] = values
        
    if l_paid_amount is not None:
        values = l_paid_amount.split(',')
        values = [int(val) for val in values]
        set_items['paid_amount'] = values
        
    if l_paid_balance is not None:
        values = l_paid_balance.split(',')
        values = [int(val) for val in values]
        set_items['paid_balance'] = values
        
    if l_single_status is not None:
        values = l_single_status.split(',')
        values = [int(val) for val in values]
        set_items['single_status'] = values
        
    if l_sold is not None:
        values = l_sold.split(',')
        values = [int(val) for val in values]
        set_items['sold'] = values
        
    if l_whole_status is not None:
        values = l_whole_status.split(',')
        values = [int(val) for val in values]
        set_items['whole_status'] = values
        
    if l_spec_id is not None:
        values = l_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['spec_id'] = values
        
    if l_put_on_time is not None:
        values = l_put_on_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['put_on_time'] = values
        
    if l_detail is not None:
        values = l_detail.split(',')
        values = [val for val in values]
        set_items['detail'] = values
        
    if l_is_assign_income is not None:
        values = l_is_assign_income.split(',')
        values = [int(val) for val in values]
        set_items['is_assign_income'] = values
        
    if l_complete_time is not None:
        values = l_complete_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['complete_time'] = values
        
    if l_return_sold is not None:
        values = l_return_sold.split(',')
        values = [int(val) for val in values]
        set_items['return_sold'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_flash_order(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_flash_order(items, search_items, set_items)
    
    return FilterResFlashOrder(data=data, total=c)


@router.get(f'/flash_order/fast_filter', response_model=FilterResFlashOrder)
async def fast_filter_flash_order(
        id: Optional[str] = None, 
        package_id: Optional[str] = None, 
        status: Optional[str] = None, 
        create_time: Optional[str] = None, 
        paid_time: Optional[str] = None, 
        user_id: Optional[str] = None, 
        number: Optional[str] = None, 
        flash_price: Optional[str] = None, 
        flash_cost: Optional[str] = None, 
        out_trade_no: Optional[str] = None, 
        paid_amount: Optional[str] = None, 
        paid_balance: Optional[str] = None, 
        single_status: Optional[str] = None, 
        sold: Optional[str] = None, 
        whole_status: Optional[str] = None, 
        spec_id: Optional[str] = None, 
        put_on_time: Optional[str] = None, 
        detail: Optional[str] = None, 
        is_assign_income: Optional[str] = None, 
        complete_time: Optional[str] = None, 
        return_sold: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_package_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_paid_time: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_number: Optional[str] = None, 
        l_flash_price: Optional[str] = None, 
        l_flash_cost: Optional[str] = None, 
        l_out_trade_no: Optional[str] = None, 
        l_paid_amount: Optional[str] = None, 
        l_paid_balance: Optional[str] = None, 
        l_single_status: Optional[str] = None, 
        l_sold: Optional[str] = None, 
        l_whole_status: Optional[str] = None, 
        l_spec_id: Optional[str] = None, 
        l_put_on_time: Optional[str] = None, 
        l_detail: Optional[str] = None, 
        l_is_assign_income: Optional[str] = None, 
        l_complete_time: Optional[str] = None, 
        l_return_sold: Optional[str] = None, 
        s_out_trade_no: Optional[str] = None, 
        s_detail: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResFlashOrder:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if package_id is not None:
        values = package_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['package_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['package_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['package_id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if paid_time is not None:
        values = paid_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['paid_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['paid_time_end'] = datetime.fromtimestamp(int(val))
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if number is not None:
        values = number.split(',')
        if len(values) == 1:
            val = values[0]
            items['number'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['number_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['number_end'] = int(val)
        
    if flash_price is not None:
        values = flash_price.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_price'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_price_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_price_end'] = int(val)
        
    if flash_cost is not None:
        values = flash_cost.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_cost'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_cost_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_cost_end'] = int(val)
        
    if out_trade_no is not None:
        values = out_trade_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_trade_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_trade_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_trade_no_end'] = val
        
    if paid_amount is not None:
        values = paid_amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paid_amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paid_amount_end'] = int(val)
        
    if paid_balance is not None:
        values = paid_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paid_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paid_balance_end'] = int(val)
        
    if single_status is not None:
        values = single_status.split(',')
        if len(values) == 1:
            val = values[0]
            items['single_status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['single_status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['single_status_end'] = int(val)
        
    if sold is not None:
        values = sold.split(',')
        if len(values) == 1:
            val = values[0]
            items['sold'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['sold_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['sold_end'] = int(val)
        
    if whole_status is not None:
        values = whole_status.split(',')
        if len(values) == 1:
            val = values[0]
            items['whole_status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['whole_status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['whole_status_end'] = int(val)
        
    if spec_id is not None:
        values = spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['spec_id_end'] = int(val)
        
    if put_on_time is not None:
        values = put_on_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['put_on_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['put_on_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['put_on_time_end'] = datetime.fromtimestamp(int(val))
        
    if detail is not None:
        values = detail.split(',')
        if len(values) == 1:
            val = values[0]
            items['detail'] = val
        else:
            val = values[0]
            if val != '':
                items['detail_start'] = val
            
            val = values[1]
            if val != '':
                items['detail_end'] = val
        
    if is_assign_income is not None:
        values = is_assign_income.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_assign_income'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_assign_income_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_assign_income_end'] = int(val)
        
    if complete_time is not None:
        values = complete_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['complete_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['complete_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['complete_time_end'] = datetime.fromtimestamp(int(val))
        
    if return_sold is not None:
        values = return_sold.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_sold'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['return_sold_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['return_sold_end'] = int(val)
        

    if s_out_trade_no is not None:
        search_items['out_trade_no'] = '%' + s_out_trade_no + '%'
        
    if s_detail is not None:
        search_items['detail'] = '%' + s_detail + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_package_id is not None:
        values = l_package_id.split(',')
        values = [int(val) for val in values]
        set_items['package_id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_paid_time is not None:
        values = l_paid_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['paid_time'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_number is not None:
        values = l_number.split(',')
        values = [int(val) for val in values]
        set_items['number'] = values
        
    if l_flash_price is not None:
        values = l_flash_price.split(',')
        values = [int(val) for val in values]
        set_items['flash_price'] = values
        
    if l_flash_cost is not None:
        values = l_flash_cost.split(',')
        values = [int(val) for val in values]
        set_items['flash_cost'] = values
        
    if l_out_trade_no is not None:
        values = l_out_trade_no.split(',')
        values = [val for val in values]
        set_items['out_trade_no'] = values
        
    if l_paid_amount is not None:
        values = l_paid_amount.split(',')
        values = [int(val) for val in values]
        set_items['paid_amount'] = values
        
    if l_paid_balance is not None:
        values = l_paid_balance.split(',')
        values = [int(val) for val in values]
        set_items['paid_balance'] = values
        
    if l_single_status is not None:
        values = l_single_status.split(',')
        values = [int(val) for val in values]
        set_items['single_status'] = values
        
    if l_sold is not None:
        values = l_sold.split(',')
        values = [int(val) for val in values]
        set_items['sold'] = values
        
    if l_whole_status is not None:
        values = l_whole_status.split(',')
        values = [int(val) for val in values]
        set_items['whole_status'] = values
        
    if l_spec_id is not None:
        values = l_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['spec_id'] = values
        
    if l_put_on_time is not None:
        values = l_put_on_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['put_on_time'] = values
        
    if l_detail is not None:
        values = l_detail.split(',')
        values = [val for val in values]
        set_items['detail'] = values
        
    if l_is_assign_income is not None:
        values = l_is_assign_income.split(',')
        values = [int(val) for val in values]
        set_items['is_assign_income'] = values
        
    if l_complete_time is not None:
        values = l_complete_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['complete_time'] = values
        
    if l_return_sold is not None:
        values = l_return_sold.split(',')
        values = [int(val) for val in values]
        set_items['return_sold'] = values
            
    
    data = d_db.filter_flash_order(items, search_items, set_items, page, page_size)
    return FilterResFlashOrder(data=data, total=-1)

    
@router.post(f'/flash_order_return/create', response_model=SFlashOrderReturn)
async def create_flash_order_return(item: CreateFlashOrderReturn) -> SFlashOrderReturn:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_flash_order_return(item)
        
    
@router.post(f'/flash_order_return/update', response_model=str)
async def update_flash_order_return(item: SFlashOrderReturn) -> str:
    d_db.update_flash_order_return(item)
    return "success"

    
@router.get(f'/flash_order_return/get', response_model=SFlashOrderReturn)
async def get_flash_order_return(flash_order_return_id: int) -> SFlashOrderReturn:
    return d_db.get_flash_order_return(flash_order_return_id)


@router.get(f'/flash_order_return/filter', response_model=FilterResFlashOrderReturn)
async def filter_flash_order_return(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        income_days: Optional[str] = None, 
        latest_time: Optional[str] = None, 
        latest_income_user: Optional[str] = None, 
        latest_income_layer: Optional[str] = None, 
        latest_income_toper: Optional[str] = None, 
        latest_income_groupsir: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_income_days: Optional[str] = None, 
        l_latest_time: Optional[str] = None, 
        l_latest_income_user: Optional[str] = None, 
        l_latest_income_layer: Optional[str] = None, 
        l_latest_income_toper: Optional[str] = None, 
        l_latest_income_groupsir: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResFlashOrderReturn:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if income_days is not None:
        values = income_days.split(',')
        if len(values) == 1:
            val = values[0]
            items['income_days'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['income_days_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['income_days_end'] = int(val)
        
    if latest_time is not None:
        values = latest_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['latest_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['latest_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['latest_time_end'] = datetime.fromtimestamp(int(val))
        
    if latest_income_user is not None:
        values = latest_income_user.split(',')
        if len(values) == 1:
            val = values[0]
            items['latest_income_user'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['latest_income_user_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['latest_income_user_end'] = int(val)
        
    if latest_income_layer is not None:
        values = latest_income_layer.split(',')
        if len(values) == 1:
            val = values[0]
            items['latest_income_layer'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['latest_income_layer_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['latest_income_layer_end'] = int(val)
        
    if latest_income_toper is not None:
        values = latest_income_toper.split(',')
        if len(values) == 1:
            val = values[0]
            items['latest_income_toper'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['latest_income_toper_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['latest_income_toper_end'] = int(val)
        
    if latest_income_groupsir is not None:
        values = latest_income_groupsir.split(',')
        if len(values) == 1:
            val = values[0]
            items['latest_income_groupsir'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['latest_income_groupsir_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['latest_income_groupsir_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_income_days is not None:
        values = l_income_days.split(',')
        values = [int(val) for val in values]
        set_items['income_days'] = values
        
    if l_latest_time is not None:
        values = l_latest_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['latest_time'] = values
        
    if l_latest_income_user is not None:
        values = l_latest_income_user.split(',')
        values = [int(val) for val in values]
        set_items['latest_income_user'] = values
        
    if l_latest_income_layer is not None:
        values = l_latest_income_layer.split(',')
        values = [int(val) for val in values]
        set_items['latest_income_layer'] = values
        
    if l_latest_income_toper is not None:
        values = l_latest_income_toper.split(',')
        values = [int(val) for val in values]
        set_items['latest_income_toper'] = values
        
    if l_latest_income_groupsir is not None:
        values = l_latest_income_groupsir.split(',')
        values = [int(val) for val in values]
        set_items['latest_income_groupsir'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_flash_order_return(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_flash_order_return(items, search_items, set_items)
    
    return FilterResFlashOrderReturn(data=data, total=c)


@router.get(f'/flash_order_return/fast_filter', response_model=FilterResFlashOrderReturn)
async def fast_filter_flash_order_return(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        income_days: Optional[str] = None, 
        latest_time: Optional[str] = None, 
        latest_income_user: Optional[str] = None, 
        latest_income_layer: Optional[str] = None, 
        latest_income_toper: Optional[str] = None, 
        latest_income_groupsir: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_income_days: Optional[str] = None, 
        l_latest_time: Optional[str] = None, 
        l_latest_income_user: Optional[str] = None, 
        l_latest_income_layer: Optional[str] = None, 
        l_latest_income_toper: Optional[str] = None, 
        l_latest_income_groupsir: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResFlashOrderReturn:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if income_days is not None:
        values = income_days.split(',')
        if len(values) == 1:
            val = values[0]
            items['income_days'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['income_days_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['income_days_end'] = int(val)
        
    if latest_time is not None:
        values = latest_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['latest_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['latest_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['latest_time_end'] = datetime.fromtimestamp(int(val))
        
    if latest_income_user is not None:
        values = latest_income_user.split(',')
        if len(values) == 1:
            val = values[0]
            items['latest_income_user'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['latest_income_user_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['latest_income_user_end'] = int(val)
        
    if latest_income_layer is not None:
        values = latest_income_layer.split(',')
        if len(values) == 1:
            val = values[0]
            items['latest_income_layer'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['latest_income_layer_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['latest_income_layer_end'] = int(val)
        
    if latest_income_toper is not None:
        values = latest_income_toper.split(',')
        if len(values) == 1:
            val = values[0]
            items['latest_income_toper'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['latest_income_toper_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['latest_income_toper_end'] = int(val)
        
    if latest_income_groupsir is not None:
        values = latest_income_groupsir.split(',')
        if len(values) == 1:
            val = values[0]
            items['latest_income_groupsir'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['latest_income_groupsir_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['latest_income_groupsir_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_income_days is not None:
        values = l_income_days.split(',')
        values = [int(val) for val in values]
        set_items['income_days'] = values
        
    if l_latest_time is not None:
        values = l_latest_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['latest_time'] = values
        
    if l_latest_income_user is not None:
        values = l_latest_income_user.split(',')
        values = [int(val) for val in values]
        set_items['latest_income_user'] = values
        
    if l_latest_income_layer is not None:
        values = l_latest_income_layer.split(',')
        values = [int(val) for val in values]
        set_items['latest_income_layer'] = values
        
    if l_latest_income_toper is not None:
        values = l_latest_income_toper.split(',')
        values = [int(val) for val in values]
        set_items['latest_income_toper'] = values
        
    if l_latest_income_groupsir is not None:
        values = l_latest_income_groupsir.split(',')
        values = [int(val) for val in values]
        set_items['latest_income_groupsir'] = values
            
    
    data = d_db.filter_flash_order_return(items, search_items, set_items, page, page_size)
    return FilterResFlashOrderReturn(data=data, total=-1)

    
@router.post(f'/package_order_status/create', response_model=SPackageOrderStatus)
async def create_package_order_status(item: CreatePackageOrderStatus) -> SPackageOrderStatus:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_package_order_status(item)
        
    
@router.post(f'/package_order_status/update', response_model=str)
async def update_package_order_status(item: SPackageOrderStatus) -> str:
    d_db.update_package_order_status(item)
    return "success"

    
@router.get(f'/package_order_status/get', response_model=SPackageOrderStatus)
async def get_package_order_status(package_order_status_id: int) -> SPackageOrderStatus:
    return d_db.get_package_order_status(package_order_status_id)


@router.get(f'/package_order_status/filter', response_model=FilterResPackageOrderStatus)
async def filter_package_order_status(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPackageOrderStatus:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_package_order_status(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_package_order_status(items, search_items, set_items)
    
    return FilterResPackageOrderStatus(data=data, total=c)


@router.get(f'/package_order_status/fast_filter', response_model=FilterResPackageOrderStatus)
async def fast_filter_package_order_status(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPackageOrderStatus:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    data = d_db.filter_package_order_status(items, search_items, set_items, page, page_size)
    return FilterResPackageOrderStatus(data=data, total=-1)

    
@router.post(f'/good/create', response_model=SGood)
async def create_good(item: CreateGood) -> SGood:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good(item)
        
    
@router.post(f'/good/update', response_model=str)
async def update_good(item: SGood) -> str:
    d_db.update_good(item)
    return "success"

    
@router.get(f'/good/get', response_model=SGood)
async def get_good(good_id: int) -> SGood:
    return d_db.get_good(good_id)


@router.get(f'/good/filter', response_model=FilterResGood)
async def filter_good(
        id: Optional[str] = None, 
        name: Optional[str] = None, 
        is_flash_sale: Optional[str] = None, 
        category_id: Optional[str] = None, 
        type: Optional[str] = None, 
        num_sale: Optional[str] = None, 
        image_url: Optional[str] = None, 
        priority: Optional[str] = None, 
        add_coin: Optional[str] = None, 
        model_id: Optional[str] = None, 
        expired_time: Optional[str] = None, 
        parent_good_id: Optional[str] = None, 
        title: Optional[str] = None, 
        subtitle: Optional[str] = None, 
        stock_cordon: Optional[str] = None, 
        status: Optional[str] = None, 
        details: Optional[str] = None, 
        supplier_id: Optional[str] = None, 
        share_ratio: Optional[str] = None, 
        create_time: Optional[str] = None, 
        last_update_time: Optional[str] = None, 
        saleable: Optional[str] = None, 
        click_count: Optional[str] = None, 
        transmit_count: Optional[str] = None, 
        coinable: Optional[str] = None, 
        price_line: Optional[str] = None, 
        introducer_id: Optional[str] = None, 
        sell_high: Optional[str] = None, 
        sell_low: Optional[str] = None, 
        cost_high: Optional[str] = None, 
        cost_low: Optional[str] = None, 
        display: Optional[str] = None, 
        coinable_number: Optional[str] = None, 
        is_package: Optional[str] = None, 
        fake_owner_name: Optional[str] = None, 
        fake_owner_phone: Optional[str] = None, 
        unavailable_date: Optional[str] = None, 
        available_time: Optional[str] = None, 
        usage_rule: Optional[str] = None, 
        refund_rule: Optional[str] = None, 
        order_expired_time: Optional[str] = None, 
        cover_url: Optional[str] = None, 
        video_url: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_name: Optional[str] = None, 
        l_is_flash_sale: Optional[str] = None, 
        l_category_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_num_sale: Optional[str] = None, 
        l_image_url: Optional[str] = None, 
        l_priority: Optional[str] = None, 
        l_add_coin: Optional[str] = None, 
        l_model_id: Optional[str] = None, 
        l_expired_time: Optional[str] = None, 
        l_parent_good_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        l_subtitle: Optional[str] = None, 
        l_stock_cordon: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_details: Optional[str] = None, 
        l_supplier_id: Optional[str] = None, 
        l_share_ratio: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_last_update_time: Optional[str] = None, 
        l_saleable: Optional[str] = None, 
        l_click_count: Optional[str] = None, 
        l_transmit_count: Optional[str] = None, 
        l_coinable: Optional[str] = None, 
        l_price_line: Optional[str] = None, 
        l_introducer_id: Optional[str] = None, 
        l_sell_high: Optional[str] = None, 
        l_sell_low: Optional[str] = None, 
        l_cost_high: Optional[str] = None, 
        l_cost_low: Optional[str] = None, 
        l_display: Optional[str] = None, 
        l_coinable_number: Optional[str] = None, 
        l_is_package: Optional[str] = None, 
        l_fake_owner_name: Optional[str] = None, 
        l_fake_owner_phone: Optional[str] = None, 
        l_unavailable_date: Optional[str] = None, 
        l_available_time: Optional[str] = None, 
        l_usage_rule: Optional[str] = None, 
        l_refund_rule: Optional[str] = None, 
        l_order_expired_time: Optional[str] = None, 
        l_cover_url: Optional[str] = None, 
        l_video_url: Optional[str] = None, 
        s_name: Optional[str] = None, 
        s_image_url: Optional[str] = None, 
        s_title: Optional[str] = None, 
        s_subtitle: Optional[str] = None, 
        s_details: Optional[str] = None, 
        s_fake_owner_name: Optional[str] = None, 
        s_fake_owner_phone: Optional[str] = None, 
        s_unavailable_date: Optional[str] = None, 
        s_available_time: Optional[str] = None, 
        s_usage_rule: Optional[str] = None, 
        s_refund_rule: Optional[str] = None, 
        s_cover_url: Optional[str] = None, 
        s_video_url: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGood:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if name is not None:
        values = name.split(',')
        if len(values) == 1:
            val = values[0]
            items['name'] = val
        else:
            val = values[0]
            if val != '':
                items['name_start'] = val
            
            val = values[1]
            if val != '':
                items['name_end'] = val
        
    if is_flash_sale is not None:
        values = is_flash_sale.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_flash_sale'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_flash_sale_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_flash_sale_end'] = int(val)
        
    if category_id is not None:
        values = category_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['category_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['category_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['category_id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['type_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['type_end'] = int(val)
        
    if num_sale is not None:
        values = num_sale.split(',')
        if len(values) == 1:
            val = values[0]
            items['num_sale'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['num_sale_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['num_sale_end'] = int(val)
        
    if image_url is not None:
        values = image_url.split(',')
        if len(values) == 1:
            val = values[0]
            items['image_url'] = val
        else:
            val = values[0]
            if val != '':
                items['image_url_start'] = val
            
            val = values[1]
            if val != '':
                items['image_url_end'] = val
        
    if priority is not None:
        values = priority.split(',')
        if len(values) == 1:
            val = values[0]
            items['priority'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['priority_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['priority_end'] = int(val)
        
    if add_coin is not None:
        values = add_coin.split(',')
        if len(values) == 1:
            val = values[0]
            items['add_coin'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['add_coin_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['add_coin_end'] = int(val)
        
    if model_id is not None:
        values = model_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['model_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['model_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['model_id_end'] = int(val)
        
    if expired_time is not None:
        values = expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['expired_time_end'] = datetime.fromtimestamp(int(val))
        
    if parent_good_id is not None:
        values = parent_good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parent_good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parent_good_id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        
    if subtitle is not None:
        values = subtitle.split(',')
        if len(values) == 1:
            val = values[0]
            items['subtitle'] = val
        else:
            val = values[0]
            if val != '':
                items['subtitle_start'] = val
            
            val = values[1]
            if val != '':
                items['subtitle_end'] = val
        
    if stock_cordon is not None:
        values = stock_cordon.split(',')
        if len(values) == 1:
            val = values[0]
            items['stock_cordon'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['stock_cordon_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['stock_cordon_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if details is not None:
        values = details.split(',')
        if len(values) == 1:
            val = values[0]
            items['details'] = val
        else:
            val = values[0]
            if val != '':
                items['details_start'] = val
            
            val = values[1]
            if val != '':
                items['details_end'] = val
        
    if supplier_id is not None:
        values = supplier_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_id_end'] = int(val)
        
    if share_ratio is not None:
        values = share_ratio.split(',')
        if len(values) == 1:
            val = values[0]
            items['share_ratio'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['share_ratio_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['share_ratio_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if last_update_time is not None:
        values = last_update_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['last_update_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['last_update_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['last_update_time_end'] = datetime.fromtimestamp(int(val))
        
    if saleable is not None:
        values = saleable.split(',')
        if len(values) == 1:
            val = values[0]
            items['saleable'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['saleable_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['saleable_end'] = int(val)
        
    if click_count is not None:
        values = click_count.split(',')
        if len(values) == 1:
            val = values[0]
            items['click_count'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['click_count_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['click_count_end'] = int(val)
        
    if transmit_count is not None:
        values = transmit_count.split(',')
        if len(values) == 1:
            val = values[0]
            items['transmit_count'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['transmit_count_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['transmit_count_end'] = int(val)
        
    if coinable is not None:
        values = coinable.split(',')
        if len(values) == 1:
            val = values[0]
            items['coinable'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['coinable_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['coinable_end'] = int(val)
        
    if price_line is not None:
        values = price_line.split(',')
        if len(values) == 1:
            val = values[0]
            items['price_line'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['price_line_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['price_line_end'] = int(val)
        
    if introducer_id is not None:
        values = introducer_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['introducer_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['introducer_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['introducer_id_end'] = int(val)
        
    if sell_high is not None:
        values = sell_high.split(',')
        if len(values) == 1:
            val = values[0]
            items['sell_high'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['sell_high_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['sell_high_end'] = int(val)
        
    if sell_low is not None:
        values = sell_low.split(',')
        if len(values) == 1:
            val = values[0]
            items['sell_low'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['sell_low_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['sell_low_end'] = int(val)
        
    if cost_high is not None:
        values = cost_high.split(',')
        if len(values) == 1:
            val = values[0]
            items['cost_high'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['cost_high_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['cost_high_end'] = int(val)
        
    if cost_low is not None:
        values = cost_low.split(',')
        if len(values) == 1:
            val = values[0]
            items['cost_low'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['cost_low_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['cost_low_end'] = int(val)
        
    if display is not None:
        values = display.split(',')
        if len(values) == 1:
            val = values[0]
            items['display'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['display_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['display_end'] = int(val)
        
    if coinable_number is not None:
        values = coinable_number.split(',')
        if len(values) == 1:
            val = values[0]
            items['coinable_number'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['coinable_number_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['coinable_number_end'] = int(val)
        
    if is_package is not None:
        values = is_package.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_package'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_package_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_package_end'] = int(val)
        
    if fake_owner_name is not None:
        values = fake_owner_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['fake_owner_name'] = val
        else:
            val = values[0]
            if val != '':
                items['fake_owner_name_start'] = val
            
            val = values[1]
            if val != '':
                items['fake_owner_name_end'] = val
        
    if fake_owner_phone is not None:
        values = fake_owner_phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['fake_owner_phone'] = val
        else:
            val = values[0]
            if val != '':
                items['fake_owner_phone_start'] = val
            
            val = values[1]
            if val != '':
                items['fake_owner_phone_end'] = val
        
    if unavailable_date is not None:
        values = unavailable_date.split(',')
        if len(values) == 1:
            val = values[0]
            items['unavailable_date'] = val
        else:
            val = values[0]
            if val != '':
                items['unavailable_date_start'] = val
            
            val = values[1]
            if val != '':
                items['unavailable_date_end'] = val
        
    if available_time is not None:
        values = available_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['available_time'] = val
        else:
            val = values[0]
            if val != '':
                items['available_time_start'] = val
            
            val = values[1]
            if val != '':
                items['available_time_end'] = val
        
    if usage_rule is not None:
        values = usage_rule.split(',')
        if len(values) == 1:
            val = values[0]
            items['usage_rule'] = val
        else:
            val = values[0]
            if val != '':
                items['usage_rule_start'] = val
            
            val = values[1]
            if val != '':
                items['usage_rule_end'] = val
        
    if refund_rule is not None:
        values = refund_rule.split(',')
        if len(values) == 1:
            val = values[0]
            items['refund_rule'] = val
        else:
            val = values[0]
            if val != '':
                items['refund_rule_start'] = val
            
            val = values[1]
            if val != '':
                items['refund_rule_end'] = val
        
    if order_expired_time is not None:
        values = order_expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['order_expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['order_expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['order_expired_time_end'] = datetime.fromtimestamp(int(val))
        
    if cover_url is not None:
        values = cover_url.split(',')
        if len(values) == 1:
            val = values[0]
            items['cover_url'] = val
        else:
            val = values[0]
            if val != '':
                items['cover_url_start'] = val
            
            val = values[1]
            if val != '':
                items['cover_url_end'] = val
        
    if video_url is not None:
        values = video_url.split(',')
        if len(values) == 1:
            val = values[0]
            items['video_url'] = val
        else:
            val = values[0]
            if val != '':
                items['video_url_start'] = val
            
            val = values[1]
            if val != '':
                items['video_url_end'] = val
        

    if s_name is not None:
        search_items['name'] = '%' + s_name + '%'
        
    if s_image_url is not None:
        search_items['image_url'] = '%' + s_image_url + '%'
        
    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        
    if s_subtitle is not None:
        search_items['subtitle'] = '%' + s_subtitle + '%'
        
    if s_details is not None:
        search_items['details'] = '%' + s_details + '%'
        
    if s_fake_owner_name is not None:
        search_items['fake_owner_name'] = '%' + s_fake_owner_name + '%'
        
    if s_fake_owner_phone is not None:
        search_items['fake_owner_phone'] = '%' + s_fake_owner_phone + '%'
        
    if s_unavailable_date is not None:
        search_items['unavailable_date'] = '%' + s_unavailable_date + '%'
        
    if s_available_time is not None:
        search_items['available_time'] = '%' + s_available_time + '%'
        
    if s_usage_rule is not None:
        search_items['usage_rule'] = '%' + s_usage_rule + '%'
        
    if s_refund_rule is not None:
        search_items['refund_rule'] = '%' + s_refund_rule + '%'
        
    if s_cover_url is not None:
        search_items['cover_url'] = '%' + s_cover_url + '%'
        
    if s_video_url is not None:
        search_items['video_url'] = '%' + s_video_url + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_name is not None:
        values = l_name.split(',')
        values = [val for val in values]
        set_items['name'] = values
        
    if l_is_flash_sale is not None:
        values = l_is_flash_sale.split(',')
        values = [int(val) for val in values]
        set_items['is_flash_sale'] = values
        
    if l_category_id is not None:
        values = l_category_id.split(',')
        values = [int(val) for val in values]
        set_items['category_id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [int(val) for val in values]
        set_items['type'] = values
        
    if l_num_sale is not None:
        values = l_num_sale.split(',')
        values = [int(val) for val in values]
        set_items['num_sale'] = values
        
    if l_image_url is not None:
        values = l_image_url.split(',')
        values = [val for val in values]
        set_items['image_url'] = values
        
    if l_priority is not None:
        values = l_priority.split(',')
        values = [int(val) for val in values]
        set_items['priority'] = values
        
    if l_add_coin is not None:
        values = l_add_coin.split(',')
        values = [int(val) for val in values]
        set_items['add_coin'] = values
        
    if l_model_id is not None:
        values = l_model_id.split(',')
        values = [int(val) for val in values]
        set_items['model_id'] = values
        
    if l_expired_time is not None:
        values = l_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['expired_time'] = values
        
    if l_parent_good_id is not None:
        values = l_parent_good_id.split(',')
        values = [int(val) for val in values]
        set_items['parent_good_id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
        
    if l_subtitle is not None:
        values = l_subtitle.split(',')
        values = [val for val in values]
        set_items['subtitle'] = values
        
    if l_stock_cordon is not None:
        values = l_stock_cordon.split(',')
        values = [int(val) for val in values]
        set_items['stock_cordon'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_details is not None:
        values = l_details.split(',')
        values = [val for val in values]
        set_items['details'] = values
        
    if l_supplier_id is not None:
        values = l_supplier_id.split(',')
        values = [int(val) for val in values]
        set_items['supplier_id'] = values
        
    if l_share_ratio is not None:
        values = l_share_ratio.split(',')
        values = [int(val) for val in values]
        set_items['share_ratio'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_last_update_time is not None:
        values = l_last_update_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['last_update_time'] = values
        
    if l_saleable is not None:
        values = l_saleable.split(',')
        values = [int(val) for val in values]
        set_items['saleable'] = values
        
    if l_click_count is not None:
        values = l_click_count.split(',')
        values = [int(val) for val in values]
        set_items['click_count'] = values
        
    if l_transmit_count is not None:
        values = l_transmit_count.split(',')
        values = [int(val) for val in values]
        set_items['transmit_count'] = values
        
    if l_coinable is not None:
        values = l_coinable.split(',')
        values = [int(val) for val in values]
        set_items['coinable'] = values
        
    if l_price_line is not None:
        values = l_price_line.split(',')
        values = [int(val) for val in values]
        set_items['price_line'] = values
        
    if l_introducer_id is not None:
        values = l_introducer_id.split(',')
        values = [int(val) for val in values]
        set_items['introducer_id'] = values
        
    if l_sell_high is not None:
        values = l_sell_high.split(',')
        values = [int(val) for val in values]
        set_items['sell_high'] = values
        
    if l_sell_low is not None:
        values = l_sell_low.split(',')
        values = [int(val) for val in values]
        set_items['sell_low'] = values
        
    if l_cost_high is not None:
        values = l_cost_high.split(',')
        values = [int(val) for val in values]
        set_items['cost_high'] = values
        
    if l_cost_low is not None:
        values = l_cost_low.split(',')
        values = [int(val) for val in values]
        set_items['cost_low'] = values
        
    if l_display is not None:
        values = l_display.split(',')
        values = [int(val) for val in values]
        set_items['display'] = values
        
    if l_coinable_number is not None:
        values = l_coinable_number.split(',')
        values = [int(val) for val in values]
        set_items['coinable_number'] = values
        
    if l_is_package is not None:
        values = l_is_package.split(',')
        values = [int(val) for val in values]
        set_items['is_package'] = values
        
    if l_fake_owner_name is not None:
        values = l_fake_owner_name.split(',')
        values = [val for val in values]
        set_items['fake_owner_name'] = values
        
    if l_fake_owner_phone is not None:
        values = l_fake_owner_phone.split(',')
        values = [val for val in values]
        set_items['fake_owner_phone'] = values
        
    if l_unavailable_date is not None:
        values = l_unavailable_date.split(',')
        values = [val for val in values]
        set_items['unavailable_date'] = values
        
    if l_available_time is not None:
        values = l_available_time.split(',')
        values = [val for val in values]
        set_items['available_time'] = values
        
    if l_usage_rule is not None:
        values = l_usage_rule.split(',')
        values = [val for val in values]
        set_items['usage_rule'] = values
        
    if l_refund_rule is not None:
        values = l_refund_rule.split(',')
        values = [val for val in values]
        set_items['refund_rule'] = values
        
    if l_order_expired_time is not None:
        values = l_order_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['order_expired_time'] = values
        
    if l_cover_url is not None:
        values = l_cover_url.split(',')
        values = [val for val in values]
        set_items['cover_url'] = values
        
    if l_video_url is not None:
        values = l_video_url.split(',')
        values = [val for val in values]
        set_items['video_url'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good(items, search_items, set_items)
    
    return FilterResGood(data=data, total=c)


@router.get(f'/good/fast_filter', response_model=FilterResGood)
async def fast_filter_good(
        id: Optional[str] = None, 
        name: Optional[str] = None, 
        is_flash_sale: Optional[str] = None, 
        category_id: Optional[str] = None, 
        type: Optional[str] = None, 
        num_sale: Optional[str] = None, 
        image_url: Optional[str] = None, 
        priority: Optional[str] = None, 
        add_coin: Optional[str] = None, 
        model_id: Optional[str] = None, 
        expired_time: Optional[str] = None, 
        parent_good_id: Optional[str] = None, 
        title: Optional[str] = None, 
        subtitle: Optional[str] = None, 
        stock_cordon: Optional[str] = None, 
        status: Optional[str] = None, 
        details: Optional[str] = None, 
        supplier_id: Optional[str] = None, 
        share_ratio: Optional[str] = None, 
        create_time: Optional[str] = None, 
        last_update_time: Optional[str] = None, 
        saleable: Optional[str] = None, 
        click_count: Optional[str] = None, 
        transmit_count: Optional[str] = None, 
        coinable: Optional[str] = None, 
        price_line: Optional[str] = None, 
        introducer_id: Optional[str] = None, 
        sell_high: Optional[str] = None, 
        sell_low: Optional[str] = None, 
        cost_high: Optional[str] = None, 
        cost_low: Optional[str] = None, 
        display: Optional[str] = None, 
        coinable_number: Optional[str] = None, 
        is_package: Optional[str] = None, 
        fake_owner_name: Optional[str] = None, 
        fake_owner_phone: Optional[str] = None, 
        unavailable_date: Optional[str] = None, 
        available_time: Optional[str] = None, 
        usage_rule: Optional[str] = None, 
        refund_rule: Optional[str] = None, 
        order_expired_time: Optional[str] = None, 
        cover_url: Optional[str] = None, 
        video_url: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_name: Optional[str] = None, 
        l_is_flash_sale: Optional[str] = None, 
        l_category_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_num_sale: Optional[str] = None, 
        l_image_url: Optional[str] = None, 
        l_priority: Optional[str] = None, 
        l_add_coin: Optional[str] = None, 
        l_model_id: Optional[str] = None, 
        l_expired_time: Optional[str] = None, 
        l_parent_good_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        l_subtitle: Optional[str] = None, 
        l_stock_cordon: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_details: Optional[str] = None, 
        l_supplier_id: Optional[str] = None, 
        l_share_ratio: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_last_update_time: Optional[str] = None, 
        l_saleable: Optional[str] = None, 
        l_click_count: Optional[str] = None, 
        l_transmit_count: Optional[str] = None, 
        l_coinable: Optional[str] = None, 
        l_price_line: Optional[str] = None, 
        l_introducer_id: Optional[str] = None, 
        l_sell_high: Optional[str] = None, 
        l_sell_low: Optional[str] = None, 
        l_cost_high: Optional[str] = None, 
        l_cost_low: Optional[str] = None, 
        l_display: Optional[str] = None, 
        l_coinable_number: Optional[str] = None, 
        l_is_package: Optional[str] = None, 
        l_fake_owner_name: Optional[str] = None, 
        l_fake_owner_phone: Optional[str] = None, 
        l_unavailable_date: Optional[str] = None, 
        l_available_time: Optional[str] = None, 
        l_usage_rule: Optional[str] = None, 
        l_refund_rule: Optional[str] = None, 
        l_order_expired_time: Optional[str] = None, 
        l_cover_url: Optional[str] = None, 
        l_video_url: Optional[str] = None, 
        s_name: Optional[str] = None, 
        s_image_url: Optional[str] = None, 
        s_title: Optional[str] = None, 
        s_subtitle: Optional[str] = None, 
        s_details: Optional[str] = None, 
        s_fake_owner_name: Optional[str] = None, 
        s_fake_owner_phone: Optional[str] = None, 
        s_unavailable_date: Optional[str] = None, 
        s_available_time: Optional[str] = None, 
        s_usage_rule: Optional[str] = None, 
        s_refund_rule: Optional[str] = None, 
        s_cover_url: Optional[str] = None, 
        s_video_url: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGood:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if name is not None:
        values = name.split(',')
        if len(values) == 1:
            val = values[0]
            items['name'] = val
        else:
            val = values[0]
            if val != '':
                items['name_start'] = val
            
            val = values[1]
            if val != '':
                items['name_end'] = val
        
    if is_flash_sale is not None:
        values = is_flash_sale.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_flash_sale'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_flash_sale_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_flash_sale_end'] = int(val)
        
    if category_id is not None:
        values = category_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['category_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['category_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['category_id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['type_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['type_end'] = int(val)
        
    if num_sale is not None:
        values = num_sale.split(',')
        if len(values) == 1:
            val = values[0]
            items['num_sale'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['num_sale_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['num_sale_end'] = int(val)
        
    if image_url is not None:
        values = image_url.split(',')
        if len(values) == 1:
            val = values[0]
            items['image_url'] = val
        else:
            val = values[0]
            if val != '':
                items['image_url_start'] = val
            
            val = values[1]
            if val != '':
                items['image_url_end'] = val
        
    if priority is not None:
        values = priority.split(',')
        if len(values) == 1:
            val = values[0]
            items['priority'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['priority_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['priority_end'] = int(val)
        
    if add_coin is not None:
        values = add_coin.split(',')
        if len(values) == 1:
            val = values[0]
            items['add_coin'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['add_coin_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['add_coin_end'] = int(val)
        
    if model_id is not None:
        values = model_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['model_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['model_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['model_id_end'] = int(val)
        
    if expired_time is not None:
        values = expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['expired_time_end'] = datetime.fromtimestamp(int(val))
        
    if parent_good_id is not None:
        values = parent_good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parent_good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parent_good_id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        
    if subtitle is not None:
        values = subtitle.split(',')
        if len(values) == 1:
            val = values[0]
            items['subtitle'] = val
        else:
            val = values[0]
            if val != '':
                items['subtitle_start'] = val
            
            val = values[1]
            if val != '':
                items['subtitle_end'] = val
        
    if stock_cordon is not None:
        values = stock_cordon.split(',')
        if len(values) == 1:
            val = values[0]
            items['stock_cordon'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['stock_cordon_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['stock_cordon_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if details is not None:
        values = details.split(',')
        if len(values) == 1:
            val = values[0]
            items['details'] = val
        else:
            val = values[0]
            if val != '':
                items['details_start'] = val
            
            val = values[1]
            if val != '':
                items['details_end'] = val
        
    if supplier_id is not None:
        values = supplier_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_id_end'] = int(val)
        
    if share_ratio is not None:
        values = share_ratio.split(',')
        if len(values) == 1:
            val = values[0]
            items['share_ratio'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['share_ratio_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['share_ratio_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if last_update_time is not None:
        values = last_update_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['last_update_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['last_update_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['last_update_time_end'] = datetime.fromtimestamp(int(val))
        
    if saleable is not None:
        values = saleable.split(',')
        if len(values) == 1:
            val = values[0]
            items['saleable'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['saleable_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['saleable_end'] = int(val)
        
    if click_count is not None:
        values = click_count.split(',')
        if len(values) == 1:
            val = values[0]
            items['click_count'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['click_count_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['click_count_end'] = int(val)
        
    if transmit_count is not None:
        values = transmit_count.split(',')
        if len(values) == 1:
            val = values[0]
            items['transmit_count'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['transmit_count_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['transmit_count_end'] = int(val)
        
    if coinable is not None:
        values = coinable.split(',')
        if len(values) == 1:
            val = values[0]
            items['coinable'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['coinable_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['coinable_end'] = int(val)
        
    if price_line is not None:
        values = price_line.split(',')
        if len(values) == 1:
            val = values[0]
            items['price_line'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['price_line_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['price_line_end'] = int(val)
        
    if introducer_id is not None:
        values = introducer_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['introducer_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['introducer_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['introducer_id_end'] = int(val)
        
    if sell_high is not None:
        values = sell_high.split(',')
        if len(values) == 1:
            val = values[0]
            items['sell_high'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['sell_high_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['sell_high_end'] = int(val)
        
    if sell_low is not None:
        values = sell_low.split(',')
        if len(values) == 1:
            val = values[0]
            items['sell_low'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['sell_low_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['sell_low_end'] = int(val)
        
    if cost_high is not None:
        values = cost_high.split(',')
        if len(values) == 1:
            val = values[0]
            items['cost_high'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['cost_high_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['cost_high_end'] = int(val)
        
    if cost_low is not None:
        values = cost_low.split(',')
        if len(values) == 1:
            val = values[0]
            items['cost_low'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['cost_low_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['cost_low_end'] = int(val)
        
    if display is not None:
        values = display.split(',')
        if len(values) == 1:
            val = values[0]
            items['display'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['display_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['display_end'] = int(val)
        
    if coinable_number is not None:
        values = coinable_number.split(',')
        if len(values) == 1:
            val = values[0]
            items['coinable_number'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['coinable_number_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['coinable_number_end'] = int(val)
        
    if is_package is not None:
        values = is_package.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_package'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_package_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_package_end'] = int(val)
        
    if fake_owner_name is not None:
        values = fake_owner_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['fake_owner_name'] = val
        else:
            val = values[0]
            if val != '':
                items['fake_owner_name_start'] = val
            
            val = values[1]
            if val != '':
                items['fake_owner_name_end'] = val
        
    if fake_owner_phone is not None:
        values = fake_owner_phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['fake_owner_phone'] = val
        else:
            val = values[0]
            if val != '':
                items['fake_owner_phone_start'] = val
            
            val = values[1]
            if val != '':
                items['fake_owner_phone_end'] = val
        
    if unavailable_date is not None:
        values = unavailable_date.split(',')
        if len(values) == 1:
            val = values[0]
            items['unavailable_date'] = val
        else:
            val = values[0]
            if val != '':
                items['unavailable_date_start'] = val
            
            val = values[1]
            if val != '':
                items['unavailable_date_end'] = val
        
    if available_time is not None:
        values = available_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['available_time'] = val
        else:
            val = values[0]
            if val != '':
                items['available_time_start'] = val
            
            val = values[1]
            if val != '':
                items['available_time_end'] = val
        
    if usage_rule is not None:
        values = usage_rule.split(',')
        if len(values) == 1:
            val = values[0]
            items['usage_rule'] = val
        else:
            val = values[0]
            if val != '':
                items['usage_rule_start'] = val
            
            val = values[1]
            if val != '':
                items['usage_rule_end'] = val
        
    if refund_rule is not None:
        values = refund_rule.split(',')
        if len(values) == 1:
            val = values[0]
            items['refund_rule'] = val
        else:
            val = values[0]
            if val != '':
                items['refund_rule_start'] = val
            
            val = values[1]
            if val != '':
                items['refund_rule_end'] = val
        
    if order_expired_time is not None:
        values = order_expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['order_expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['order_expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['order_expired_time_end'] = datetime.fromtimestamp(int(val))
        
    if cover_url is not None:
        values = cover_url.split(',')
        if len(values) == 1:
            val = values[0]
            items['cover_url'] = val
        else:
            val = values[0]
            if val != '':
                items['cover_url_start'] = val
            
            val = values[1]
            if val != '':
                items['cover_url_end'] = val
        
    if video_url is not None:
        values = video_url.split(',')
        if len(values) == 1:
            val = values[0]
            items['video_url'] = val
        else:
            val = values[0]
            if val != '':
                items['video_url_start'] = val
            
            val = values[1]
            if val != '':
                items['video_url_end'] = val
        

    if s_name is not None:
        search_items['name'] = '%' + s_name + '%'
        
    if s_image_url is not None:
        search_items['image_url'] = '%' + s_image_url + '%'
        
    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        
    if s_subtitle is not None:
        search_items['subtitle'] = '%' + s_subtitle + '%'
        
    if s_details is not None:
        search_items['details'] = '%' + s_details + '%'
        
    if s_fake_owner_name is not None:
        search_items['fake_owner_name'] = '%' + s_fake_owner_name + '%'
        
    if s_fake_owner_phone is not None:
        search_items['fake_owner_phone'] = '%' + s_fake_owner_phone + '%'
        
    if s_unavailable_date is not None:
        search_items['unavailable_date'] = '%' + s_unavailable_date + '%'
        
    if s_available_time is not None:
        search_items['available_time'] = '%' + s_available_time + '%'
        
    if s_usage_rule is not None:
        search_items['usage_rule'] = '%' + s_usage_rule + '%'
        
    if s_refund_rule is not None:
        search_items['refund_rule'] = '%' + s_refund_rule + '%'
        
    if s_cover_url is not None:
        search_items['cover_url'] = '%' + s_cover_url + '%'
        
    if s_video_url is not None:
        search_items['video_url'] = '%' + s_video_url + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_name is not None:
        values = l_name.split(',')
        values = [val for val in values]
        set_items['name'] = values
        
    if l_is_flash_sale is not None:
        values = l_is_flash_sale.split(',')
        values = [int(val) for val in values]
        set_items['is_flash_sale'] = values
        
    if l_category_id is not None:
        values = l_category_id.split(',')
        values = [int(val) for val in values]
        set_items['category_id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [int(val) for val in values]
        set_items['type'] = values
        
    if l_num_sale is not None:
        values = l_num_sale.split(',')
        values = [int(val) for val in values]
        set_items['num_sale'] = values
        
    if l_image_url is not None:
        values = l_image_url.split(',')
        values = [val for val in values]
        set_items['image_url'] = values
        
    if l_priority is not None:
        values = l_priority.split(',')
        values = [int(val) for val in values]
        set_items['priority'] = values
        
    if l_add_coin is not None:
        values = l_add_coin.split(',')
        values = [int(val) for val in values]
        set_items['add_coin'] = values
        
    if l_model_id is not None:
        values = l_model_id.split(',')
        values = [int(val) for val in values]
        set_items['model_id'] = values
        
    if l_expired_time is not None:
        values = l_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['expired_time'] = values
        
    if l_parent_good_id is not None:
        values = l_parent_good_id.split(',')
        values = [int(val) for val in values]
        set_items['parent_good_id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
        
    if l_subtitle is not None:
        values = l_subtitle.split(',')
        values = [val for val in values]
        set_items['subtitle'] = values
        
    if l_stock_cordon is not None:
        values = l_stock_cordon.split(',')
        values = [int(val) for val in values]
        set_items['stock_cordon'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_details is not None:
        values = l_details.split(',')
        values = [val for val in values]
        set_items['details'] = values
        
    if l_supplier_id is not None:
        values = l_supplier_id.split(',')
        values = [int(val) for val in values]
        set_items['supplier_id'] = values
        
    if l_share_ratio is not None:
        values = l_share_ratio.split(',')
        values = [int(val) for val in values]
        set_items['share_ratio'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_last_update_time is not None:
        values = l_last_update_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['last_update_time'] = values
        
    if l_saleable is not None:
        values = l_saleable.split(',')
        values = [int(val) for val in values]
        set_items['saleable'] = values
        
    if l_click_count is not None:
        values = l_click_count.split(',')
        values = [int(val) for val in values]
        set_items['click_count'] = values
        
    if l_transmit_count is not None:
        values = l_transmit_count.split(',')
        values = [int(val) for val in values]
        set_items['transmit_count'] = values
        
    if l_coinable is not None:
        values = l_coinable.split(',')
        values = [int(val) for val in values]
        set_items['coinable'] = values
        
    if l_price_line is not None:
        values = l_price_line.split(',')
        values = [int(val) for val in values]
        set_items['price_line'] = values
        
    if l_introducer_id is not None:
        values = l_introducer_id.split(',')
        values = [int(val) for val in values]
        set_items['introducer_id'] = values
        
    if l_sell_high is not None:
        values = l_sell_high.split(',')
        values = [int(val) for val in values]
        set_items['sell_high'] = values
        
    if l_sell_low is not None:
        values = l_sell_low.split(',')
        values = [int(val) for val in values]
        set_items['sell_low'] = values
        
    if l_cost_high is not None:
        values = l_cost_high.split(',')
        values = [int(val) for val in values]
        set_items['cost_high'] = values
        
    if l_cost_low is not None:
        values = l_cost_low.split(',')
        values = [int(val) for val in values]
        set_items['cost_low'] = values
        
    if l_display is not None:
        values = l_display.split(',')
        values = [int(val) for val in values]
        set_items['display'] = values
        
    if l_coinable_number is not None:
        values = l_coinable_number.split(',')
        values = [int(val) for val in values]
        set_items['coinable_number'] = values
        
    if l_is_package is not None:
        values = l_is_package.split(',')
        values = [int(val) for val in values]
        set_items['is_package'] = values
        
    if l_fake_owner_name is not None:
        values = l_fake_owner_name.split(',')
        values = [val for val in values]
        set_items['fake_owner_name'] = values
        
    if l_fake_owner_phone is not None:
        values = l_fake_owner_phone.split(',')
        values = [val for val in values]
        set_items['fake_owner_phone'] = values
        
    if l_unavailable_date is not None:
        values = l_unavailable_date.split(',')
        values = [val for val in values]
        set_items['unavailable_date'] = values
        
    if l_available_time is not None:
        values = l_available_time.split(',')
        values = [val for val in values]
        set_items['available_time'] = values
        
    if l_usage_rule is not None:
        values = l_usage_rule.split(',')
        values = [val for val in values]
        set_items['usage_rule'] = values
        
    if l_refund_rule is not None:
        values = l_refund_rule.split(',')
        values = [val for val in values]
        set_items['refund_rule'] = values
        
    if l_order_expired_time is not None:
        values = l_order_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['order_expired_time'] = values
        
    if l_cover_url is not None:
        values = l_cover_url.split(',')
        values = [val for val in values]
        set_items['cover_url'] = values
        
    if l_video_url is not None:
        values = l_video_url.split(',')
        values = [val for val in values]
        set_items['video_url'] = values
            
    
    data = d_db.filter_good(items, search_items, set_items, page, page_size)
    return FilterResGood(data=data, total=-1)

    
@router.post(f'/good_category/create', response_model=SGoodCategory)
async def create_good_category(item: CreateGoodCategory) -> SGoodCategory:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_category(item)
        
    
@router.post(f'/good_category/update', response_model=str)
async def update_good_category(item: SGoodCategory) -> str:
    d_db.update_good_category(item)
    return "success"

    
@router.get(f'/good_category/get', response_model=SGoodCategory)
async def get_good_category(good_category_id: int) -> SGoodCategory:
    return d_db.get_good_category(good_category_id)


@router.get(f'/good_category/filter', response_model=FilterResGoodCategory)
async def filter_good_category(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        general_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        l_general_id: Optional[str] = None, 
        s_title: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodCategory:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        
    if general_id is not None:
        values = general_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['general_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['general_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['general_id_end'] = int(val)
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
        
    if l_general_id is not None:
        values = l_general_id.split(',')
        values = [int(val) for val in values]
        set_items['general_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_category(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_category(items, search_items, set_items)
    
    return FilterResGoodCategory(data=data, total=c)


@router.get(f'/good_category/fast_filter', response_model=FilterResGoodCategory)
async def fast_filter_good_category(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        general_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        l_general_id: Optional[str] = None, 
        s_title: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodCategory:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        
    if general_id is not None:
        values = general_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['general_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['general_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['general_id_end'] = int(val)
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
        
    if l_general_id is not None:
        values = l_general_id.split(',')
        values = [int(val) for val in values]
        set_items['general_id'] = values
            
    
    data = d_db.filter_good_category(items, search_items, set_items, page, page_size)
    return FilterResGoodCategory(data=data, total=-1)

    
@router.post(f'/good_image/create', response_model=SGoodImage)
async def create_good_image(item: CreateGoodImage) -> SGoodImage:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_image(item)
        
    
@router.post(f'/good_image/update', response_model=str)
async def update_good_image(item: SGoodImage) -> str:
    d_db.update_good_image(item)
    return "success"

    
@router.get(f'/good_image/get', response_model=SGoodImage)
async def get_good_image(good_image_id: int) -> SGoodImage:
    return d_db.get_good_image(good_image_id)


@router.get(f'/good_image/filter', response_model=FilterResGoodImage)
async def filter_good_image(
        id: Optional[str] = None, 
        image: Optional[str] = None, 
        good_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_image: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        s_image: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodImage:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if image is not None:
        values = image.split(',')
        if len(values) == 1:
            val = values[0]
            items['image'] = val
        else:
            val = values[0]
            if val != '':
                items['image_start'] = val
            
            val = values[1]
            if val != '':
                items['image_end'] = val
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        

    if s_image is not None:
        search_items['image'] = '%' + s_image + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_image is not None:
        values = l_image.split(',')
        values = [val for val in values]
        set_items['image'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_image(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_image(items, search_items, set_items)
    
    return FilterResGoodImage(data=data, total=c)


@router.get(f'/good_image/fast_filter', response_model=FilterResGoodImage)
async def fast_filter_good_image(
        id: Optional[str] = None, 
        image: Optional[str] = None, 
        good_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_image: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        s_image: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodImage:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if image is not None:
        values = image.split(',')
        if len(values) == 1:
            val = values[0]
            items['image'] = val
        else:
            val = values[0]
            if val != '':
                items['image_start'] = val
            
            val = values[1]
            if val != '':
                items['image_end'] = val
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        

    if s_image is not None:
        search_items['image'] = '%' + s_image + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_image is not None:
        values = l_image.split(',')
        values = [val for val in values]
        set_items['image'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
            
    
    data = d_db.filter_good_image(items, search_items, set_items, page, page_size)
    return FilterResGoodImage(data=data, total=-1)

    
@router.post(f'/good_introducer/create', response_model=SGoodIntroducer)
async def create_good_introducer(item: CreateGoodIntroducer) -> SGoodIntroducer:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_introducer(item)
        
    
@router.post(f'/good_introducer/update', response_model=str)
async def update_good_introducer(item: SGoodIntroducer) -> str:
    d_db.update_good_introducer(item)
    return "success"

    
@router.get(f'/good_introducer/get', response_model=SGoodIntroducer)
async def get_good_introducer(good_introducer_id: int) -> SGoodIntroducer:
    return d_db.get_good_introducer(good_introducer_id)


@router.get(f'/good_introducer/filter', response_model=FilterResGoodIntroducer)
async def filter_good_introducer(
        id: Optional[str] = None, 
        name: Optional[str] = None, 
        phone: Optional[str] = None, 
        address: Optional[str] = None, 
        id_card: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_name: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_address: Optional[str] = None, 
        l_id_card: Optional[str] = None, 
        s_name: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_address: Optional[str] = None, 
        s_id_card: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodIntroducer:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if name is not None:
        values = name.split(',')
        if len(values) == 1:
            val = values[0]
            items['name'] = val
        else:
            val = values[0]
            if val != '':
                items['name_start'] = val
            
            val = values[1]
            if val != '':
                items['name_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if address is not None:
        values = address.split(',')
        if len(values) == 1:
            val = values[0]
            items['address'] = val
        else:
            val = values[0]
            if val != '':
                items['address_start'] = val
            
            val = values[1]
            if val != '':
                items['address_end'] = val
        
    if id_card is not None:
        values = id_card.split(',')
        if len(values) == 1:
            val = values[0]
            items['id_card'] = val
        else:
            val = values[0]
            if val != '':
                items['id_card_start'] = val
            
            val = values[1]
            if val != '':
                items['id_card_end'] = val
        

    if s_name is not None:
        search_items['name'] = '%' + s_name + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_address is not None:
        search_items['address'] = '%' + s_address + '%'
        
    if s_id_card is not None:
        search_items['id_card'] = '%' + s_id_card + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_name is not None:
        values = l_name.split(',')
        values = [val for val in values]
        set_items['name'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_address is not None:
        values = l_address.split(',')
        values = [val for val in values]
        set_items['address'] = values
        
    if l_id_card is not None:
        values = l_id_card.split(',')
        values = [val for val in values]
        set_items['id_card'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_introducer(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_introducer(items, search_items, set_items)
    
    return FilterResGoodIntroducer(data=data, total=c)


@router.get(f'/good_introducer/fast_filter', response_model=FilterResGoodIntroducer)
async def fast_filter_good_introducer(
        id: Optional[str] = None, 
        name: Optional[str] = None, 
        phone: Optional[str] = None, 
        address: Optional[str] = None, 
        id_card: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_name: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_address: Optional[str] = None, 
        l_id_card: Optional[str] = None, 
        s_name: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_address: Optional[str] = None, 
        s_id_card: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodIntroducer:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if name is not None:
        values = name.split(',')
        if len(values) == 1:
            val = values[0]
            items['name'] = val
        else:
            val = values[0]
            if val != '':
                items['name_start'] = val
            
            val = values[1]
            if val != '':
                items['name_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if address is not None:
        values = address.split(',')
        if len(values) == 1:
            val = values[0]
            items['address'] = val
        else:
            val = values[0]
            if val != '':
                items['address_start'] = val
            
            val = values[1]
            if val != '':
                items['address_end'] = val
        
    if id_card is not None:
        values = id_card.split(',')
        if len(values) == 1:
            val = values[0]
            items['id_card'] = val
        else:
            val = values[0]
            if val != '':
                items['id_card_start'] = val
            
            val = values[1]
            if val != '':
                items['id_card_end'] = val
        

    if s_name is not None:
        search_items['name'] = '%' + s_name + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_address is not None:
        search_items['address'] = '%' + s_address + '%'
        
    if s_id_card is not None:
        search_items['id_card'] = '%' + s_id_card + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_name is not None:
        values = l_name.split(',')
        values = [val for val in values]
        set_items['name'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_address is not None:
        values = l_address.split(',')
        values = [val for val in values]
        set_items['address'] = values
        
    if l_id_card is not None:
        values = l_id_card.split(',')
        values = [val for val in values]
        set_items['id_card'] = values
            
    
    data = d_db.filter_good_introducer(items, search_items, set_items, page, page_size)
    return FilterResGoodIntroducer(data=data, total=-1)

    
@router.post(f'/good_model/create', response_model=SGoodModel)
async def create_good_model(item: CreateGoodModel) -> SGoodModel:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_model(item)
        
    
@router.post(f'/good_model/update', response_model=str)
async def update_good_model(item: SGoodModel) -> str:
    d_db.update_good_model(item)
    return "success"

    
@router.get(f'/good_model/get', response_model=SGoodModel)
async def get_good_model(good_model_id: int) -> SGoodModel:
    return d_db.get_good_model(good_model_id)


@router.get(f'/good_model/filter', response_model=FilterResGoodModel)
async def filter_good_model(
        id: Optional[str] = None, 
        model: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_model: Optional[str] = None, 
        s_model: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodModel:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if model is not None:
        values = model.split(',')
        if len(values) == 1:
            val = values[0]
            items['model'] = val
        else:
            val = values[0]
            if val != '':
                items['model_start'] = val
            
            val = values[1]
            if val != '':
                items['model_end'] = val
        

    if s_model is not None:
        search_items['model'] = '%' + s_model + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_model is not None:
        values = l_model.split(',')
        values = [val for val in values]
        set_items['model'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_model(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_model(items, search_items, set_items)
    
    return FilterResGoodModel(data=data, total=c)


@router.get(f'/good_model/fast_filter', response_model=FilterResGoodModel)
async def fast_filter_good_model(
        id: Optional[str] = None, 
        model: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_model: Optional[str] = None, 
        s_model: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodModel:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if model is not None:
        values = model.split(',')
        if len(values) == 1:
            val = values[0]
            items['model'] = val
        else:
            val = values[0]
            if val != '':
                items['model_start'] = val
            
            val = values[1]
            if val != '':
                items['model_end'] = val
        

    if s_model is not None:
        search_items['model'] = '%' + s_model + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_model is not None:
        values = l_model.split(',')
        values = [val for val in values]
        set_items['model'] = values
            
    
    data = d_db.filter_good_model(items, search_items, set_items, page, page_size)
    return FilterResGoodModel(data=data, total=-1)

    
@router.post(f'/good_package/create', response_model=SGoodPackage)
async def create_good_package(item: CreateGoodPackage) -> SGoodPackage:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_package(item)
        
    
@router.post(f'/good_package/update', response_model=str)
async def update_good_package(item: SGoodPackage) -> str:
    d_db.update_good_package(item)
    return "success"

    
@router.get(f'/good_package/get', response_model=SGoodPackage)
async def get_good_package(good_package_id: int) -> SGoodPackage:
    return d_db.get_good_package(good_package_id)


@router.get(f'/good_package/filter', response_model=FilterResGoodPackage)
async def filter_good_package(
        id: Optional[str] = None, 
        number: Optional[str] = None, 
        price: Optional[str] = None, 
        title: Optional[str] = None, 
        create_time: Optional[str] = None, 
        good_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_number: Optional[str] = None, 
        l_price: Optional[str] = None, 
        l_title: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        s_number: Optional[str] = None, 
        s_price: Optional[str] = None, 
        s_title: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodPackage:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if number is not None:
        values = number.split(',')
        if len(values) == 1:
            val = values[0]
            items['number'] = val
        else:
            val = values[0]
            if val != '':
                items['number_start'] = val
            
            val = values[1]
            if val != '':
                items['number_end'] = val
        
    if price is not None:
        values = price.split(',')
        if len(values) == 1:
            val = values[0]
            items['price'] = val
        else:
            val = values[0]
            if val != '':
                items['price_start'] = val
            
            val = values[1]
            if val != '':
                items['price_end'] = val
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        

    if s_number is not None:
        search_items['number'] = '%' + s_number + '%'
        
    if s_price is not None:
        search_items['price'] = '%' + s_price + '%'
        
    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_number is not None:
        values = l_number.split(',')
        values = [val for val in values]
        set_items['number'] = values
        
    if l_price is not None:
        values = l_price.split(',')
        values = [val for val in values]
        set_items['price'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_package(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_package(items, search_items, set_items)
    
    return FilterResGoodPackage(data=data, total=c)


@router.get(f'/good_package/fast_filter', response_model=FilterResGoodPackage)
async def fast_filter_good_package(
        id: Optional[str] = None, 
        number: Optional[str] = None, 
        price: Optional[str] = None, 
        title: Optional[str] = None, 
        create_time: Optional[str] = None, 
        good_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_number: Optional[str] = None, 
        l_price: Optional[str] = None, 
        l_title: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        s_number: Optional[str] = None, 
        s_price: Optional[str] = None, 
        s_title: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodPackage:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if number is not None:
        values = number.split(',')
        if len(values) == 1:
            val = values[0]
            items['number'] = val
        else:
            val = values[0]
            if val != '':
                items['number_start'] = val
            
            val = values[1]
            if val != '':
                items['number_end'] = val
        
    if price is not None:
        values = price.split(',')
        if len(values) == 1:
            val = values[0]
            items['price'] = val
        else:
            val = values[0]
            if val != '':
                items['price_start'] = val
            
            val = values[1]
            if val != '':
                items['price_end'] = val
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        

    if s_number is not None:
        search_items['number'] = '%' + s_number + '%'
        
    if s_price is not None:
        search_items['price'] = '%' + s_price + '%'
        
    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_number is not None:
        values = l_number.split(',')
        values = [val for val in values]
        set_items['number'] = values
        
    if l_price is not None:
        values = l_price.split(',')
        values = [val for val in values]
        set_items['price'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
            
    
    data = d_db.filter_good_package(items, search_items, set_items, page, page_size)
    return FilterResGoodPackage(data=data, total=-1)

    
@router.post(f'/good_person/create', response_model=SGoodPerson)
async def create_good_person(item: CreateGoodPerson) -> SGoodPerson:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_person(item)
        
    
@router.post(f'/good_person/update', response_model=str)
async def update_good_person(item: SGoodPerson) -> str:
    d_db.update_good_person(item)
    return "success"

    
@router.get(f'/good_person/get', response_model=SGoodPerson)
async def get_good_person(good_person_id: int) -> SGoodPerson:
    return d_db.get_good_person(good_person_id)


@router.get(f'/good_person/filter', response_model=FilterResGoodPerson)
async def filter_good_person(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        person_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_person_id: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodPerson:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if person_id is not None:
        values = person_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['person_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['person_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['person_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_person_id is not None:
        values = l_person_id.split(',')
        values = [int(val) for val in values]
        set_items['person_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_person(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_person(items, search_items, set_items)
    
    return FilterResGoodPerson(data=data, total=c)


@router.get(f'/good_person/fast_filter', response_model=FilterResGoodPerson)
async def fast_filter_good_person(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        person_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_person_id: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodPerson:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if person_id is not None:
        values = person_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['person_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['person_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['person_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_person_id is not None:
        values = l_person_id.split(',')
        values = [int(val) for val in values]
        set_items['person_id'] = values
            
    
    data = d_db.filter_good_person(items, search_items, set_items, page, page_size)
    return FilterResGoodPerson(data=data, total=-1)

    
@router.post(f'/good_person_state/create', response_model=SGoodPersonState)
async def create_good_person_state(item: CreateGoodPersonState) -> SGoodPersonState:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_person_state(item)
        
    
@router.post(f'/good_person_state/update', response_model=str)
async def update_good_person_state(item: SGoodPersonState) -> str:
    d_db.update_good_person_state(item)
    return "success"

    
@router.get(f'/good_person_state/get', response_model=SGoodPersonState)
async def get_good_person_state(good_person_state_id: int) -> SGoodPersonState:
    return d_db.get_good_person_state(good_person_state_id)


@router.get(f'/good_person_state/filter', response_model=FilterResGoodPersonState)
async def filter_good_person_state(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodPersonState:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_person_state(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_person_state(items, search_items, set_items)
    
    return FilterResGoodPersonState(data=data, total=c)


@router.get(f'/good_person_state/fast_filter', response_model=FilterResGoodPersonState)
async def fast_filter_good_person_state(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodPersonState:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    data = d_db.filter_good_person_state(items, search_items, set_items, page, page_size)
    return FilterResGoodPersonState(data=data, total=-1)

    
@router.post(f'/good_priority/create', response_model=SGoodPriority)
async def create_good_priority(item: CreateGoodPriority) -> SGoodPriority:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_priority(item)
        
    
@router.post(f'/good_priority/update', response_model=str)
async def update_good_priority(item: SGoodPriority) -> str:
    d_db.update_good_priority(item)
    return "success"

    
@router.get(f'/good_priority/get', response_model=SGoodPriority)
async def get_good_priority(good_priority_id: int) -> SGoodPriority:
    return d_db.get_good_priority(good_priority_id)


@router.get(f'/good_priority/filter', response_model=FilterResGoodPriority)
async def filter_good_priority(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodPriority:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_priority(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_priority(items, search_items, set_items)
    
    return FilterResGoodPriority(data=data, total=c)


@router.get(f'/good_priority/fast_filter', response_model=FilterResGoodPriority)
async def fast_filter_good_priority(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodPriority:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    data = d_db.filter_good_priority(items, search_items, set_items, page, page_size)
    return FilterResGoodPriority(data=data, total=-1)

    
@router.post(f'/good_rule/create', response_model=SGoodRule)
async def create_good_rule(item: CreateGoodRule) -> SGoodRule:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_rule(item)
        
    
@router.post(f'/good_rule/update', response_model=str)
async def update_good_rule(item: SGoodRule) -> str:
    d_db.update_good_rule(item)
    return "success"

    
@router.get(f'/good_rule/get', response_model=SGoodRule)
async def get_good_rule(good_rule_id: int) -> SGoodRule:
    return d_db.get_good_rule(good_rule_id)


@router.get(f'/good_rule/filter', response_model=FilterResGoodRule)
async def filter_good_rule(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        validate_day: Optional[str] = None, 
        unuseful_day: Optional[str] = None, 
        useful_time: Optional[str] = None, 
        use_rule: Optional[str] = None, 
        return_rule: Optional[str] = None, 
        room: Optional[str] = None, 
        title: Optional[str] = None, 
        value: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_validate_day: Optional[str] = None, 
        l_unuseful_day: Optional[str] = None, 
        l_useful_time: Optional[str] = None, 
        l_use_rule: Optional[str] = None, 
        l_return_rule: Optional[str] = None, 
        l_room: Optional[str] = None, 
        l_title: Optional[str] = None, 
        l_value: Optional[str] = None, 
        s_validate_day: Optional[str] = None, 
        s_unuseful_day: Optional[str] = None, 
        s_useful_time: Optional[str] = None, 
        s_use_rule: Optional[str] = None, 
        s_return_rule: Optional[str] = None, 
        s_title: Optional[str] = None, 
        s_value: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodRule:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if validate_day is not None:
        values = validate_day.split(',')
        if len(values) == 1:
            val = values[0]
            items['validate_day'] = val
        else:
            val = values[0]
            if val != '':
                items['validate_day_start'] = val
            
            val = values[1]
            if val != '':
                items['validate_day_end'] = val
        
    if unuseful_day is not None:
        values = unuseful_day.split(',')
        if len(values) == 1:
            val = values[0]
            items['unuseful_day'] = val
        else:
            val = values[0]
            if val != '':
                items['unuseful_day_start'] = val
            
            val = values[1]
            if val != '':
                items['unuseful_day_end'] = val
        
    if useful_time is not None:
        values = useful_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['useful_time'] = val
        else:
            val = values[0]
            if val != '':
                items['useful_time_start'] = val
            
            val = values[1]
            if val != '':
                items['useful_time_end'] = val
        
    if use_rule is not None:
        values = use_rule.split(',')
        if len(values) == 1:
            val = values[0]
            items['use_rule'] = val
        else:
            val = values[0]
            if val != '':
                items['use_rule_start'] = val
            
            val = values[1]
            if val != '':
                items['use_rule_end'] = val
        
    if return_rule is not None:
        values = return_rule.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_rule'] = val
        else:
            val = values[0]
            if val != '':
                items['return_rule_start'] = val
            
            val = values[1]
            if val != '':
                items['return_rule_end'] = val
        
    if room is not None:
        values = room.split(',')
        if len(values) == 1:
            val = values[0]
            items['room'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['room_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['room_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        
    if value is not None:
        values = value.split(',')
        if len(values) == 1:
            val = values[0]
            items['value'] = val
        else:
            val = values[0]
            if val != '':
                items['value_start'] = val
            
            val = values[1]
            if val != '':
                items['value_end'] = val
        

    if s_validate_day is not None:
        search_items['validate_day'] = '%' + s_validate_day + '%'
        
    if s_unuseful_day is not None:
        search_items['unuseful_day'] = '%' + s_unuseful_day + '%'
        
    if s_useful_time is not None:
        search_items['useful_time'] = '%' + s_useful_time + '%'
        
    if s_use_rule is not None:
        search_items['use_rule'] = '%' + s_use_rule + '%'
        
    if s_return_rule is not None:
        search_items['return_rule'] = '%' + s_return_rule + '%'
        
    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        
    if s_value is not None:
        search_items['value'] = '%' + s_value + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_validate_day is not None:
        values = l_validate_day.split(',')
        values = [val for val in values]
        set_items['validate_day'] = values
        
    if l_unuseful_day is not None:
        values = l_unuseful_day.split(',')
        values = [val for val in values]
        set_items['unuseful_day'] = values
        
    if l_useful_time is not None:
        values = l_useful_time.split(',')
        values = [val for val in values]
        set_items['useful_time'] = values
        
    if l_use_rule is not None:
        values = l_use_rule.split(',')
        values = [val for val in values]
        set_items['use_rule'] = values
        
    if l_return_rule is not None:
        values = l_return_rule.split(',')
        values = [val for val in values]
        set_items['return_rule'] = values
        
    if l_room is not None:
        values = l_room.split(',')
        values = [int(val) for val in values]
        set_items['room'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
        
    if l_value is not None:
        values = l_value.split(',')
        values = [val for val in values]
        set_items['value'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_rule(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_rule(items, search_items, set_items)
    
    return FilterResGoodRule(data=data, total=c)


@router.get(f'/good_rule/fast_filter', response_model=FilterResGoodRule)
async def fast_filter_good_rule(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        validate_day: Optional[str] = None, 
        unuseful_day: Optional[str] = None, 
        useful_time: Optional[str] = None, 
        use_rule: Optional[str] = None, 
        return_rule: Optional[str] = None, 
        room: Optional[str] = None, 
        title: Optional[str] = None, 
        value: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_validate_day: Optional[str] = None, 
        l_unuseful_day: Optional[str] = None, 
        l_useful_time: Optional[str] = None, 
        l_use_rule: Optional[str] = None, 
        l_return_rule: Optional[str] = None, 
        l_room: Optional[str] = None, 
        l_title: Optional[str] = None, 
        l_value: Optional[str] = None, 
        s_validate_day: Optional[str] = None, 
        s_unuseful_day: Optional[str] = None, 
        s_useful_time: Optional[str] = None, 
        s_use_rule: Optional[str] = None, 
        s_return_rule: Optional[str] = None, 
        s_title: Optional[str] = None, 
        s_value: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodRule:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if validate_day is not None:
        values = validate_day.split(',')
        if len(values) == 1:
            val = values[0]
            items['validate_day'] = val
        else:
            val = values[0]
            if val != '':
                items['validate_day_start'] = val
            
            val = values[1]
            if val != '':
                items['validate_day_end'] = val
        
    if unuseful_day is not None:
        values = unuseful_day.split(',')
        if len(values) == 1:
            val = values[0]
            items['unuseful_day'] = val
        else:
            val = values[0]
            if val != '':
                items['unuseful_day_start'] = val
            
            val = values[1]
            if val != '':
                items['unuseful_day_end'] = val
        
    if useful_time is not None:
        values = useful_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['useful_time'] = val
        else:
            val = values[0]
            if val != '':
                items['useful_time_start'] = val
            
            val = values[1]
            if val != '':
                items['useful_time_end'] = val
        
    if use_rule is not None:
        values = use_rule.split(',')
        if len(values) == 1:
            val = values[0]
            items['use_rule'] = val
        else:
            val = values[0]
            if val != '':
                items['use_rule_start'] = val
            
            val = values[1]
            if val != '':
                items['use_rule_end'] = val
        
    if return_rule is not None:
        values = return_rule.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_rule'] = val
        else:
            val = values[0]
            if val != '':
                items['return_rule_start'] = val
            
            val = values[1]
            if val != '':
                items['return_rule_end'] = val
        
    if room is not None:
        values = room.split(',')
        if len(values) == 1:
            val = values[0]
            items['room'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['room_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['room_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        
    if value is not None:
        values = value.split(',')
        if len(values) == 1:
            val = values[0]
            items['value'] = val
        else:
            val = values[0]
            if val != '':
                items['value_start'] = val
            
            val = values[1]
            if val != '':
                items['value_end'] = val
        

    if s_validate_day is not None:
        search_items['validate_day'] = '%' + s_validate_day + '%'
        
    if s_unuseful_day is not None:
        search_items['unuseful_day'] = '%' + s_unuseful_day + '%'
        
    if s_useful_time is not None:
        search_items['useful_time'] = '%' + s_useful_time + '%'
        
    if s_use_rule is not None:
        search_items['use_rule'] = '%' + s_use_rule + '%'
        
    if s_return_rule is not None:
        search_items['return_rule'] = '%' + s_return_rule + '%'
        
    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        
    if s_value is not None:
        search_items['value'] = '%' + s_value + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_validate_day is not None:
        values = l_validate_day.split(',')
        values = [val for val in values]
        set_items['validate_day'] = values
        
    if l_unuseful_day is not None:
        values = l_unuseful_day.split(',')
        values = [val for val in values]
        set_items['unuseful_day'] = values
        
    if l_useful_time is not None:
        values = l_useful_time.split(',')
        values = [val for val in values]
        set_items['useful_time'] = values
        
    if l_use_rule is not None:
        values = l_use_rule.split(',')
        values = [val for val in values]
        set_items['use_rule'] = values
        
    if l_return_rule is not None:
        values = l_return_rule.split(',')
        values = [val for val in values]
        set_items['return_rule'] = values
        
    if l_room is not None:
        values = l_room.split(',')
        values = [int(val) for val in values]
        set_items['room'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
        
    if l_value is not None:
        values = l_value.split(',')
        values = [val for val in values]
        set_items['value'] = values
            
    
    data = d_db.filter_good_rule(items, search_items, set_items, page, page_size)
    return FilterResGoodRule(data=data, total=-1)

    
@router.post(f'/good_spec/create', response_model=SGoodSpec)
async def create_good_spec(item: CreateGoodSpec) -> SGoodSpec:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_spec(item)
        
    
@router.post(f'/good_spec/update', response_model=str)
async def update_good_spec(item: SGoodSpec) -> str:
    d_db.update_good_spec(item)
    return "success"

    
@router.get(f'/good_spec/get', response_model=SGoodSpec)
async def get_good_spec(good_spec_id: int) -> SGoodSpec:
    return d_db.get_good_spec(good_spec_id)


@router.get(f'/good_spec/filter', response_model=FilterResGoodSpec)
async def filter_good_spec(
        good_id: Optional[str] = None, 
        price: Optional[str] = None, 
        cost: Optional[str] = None, 
        value: Optional[str] = None, 
        id: Optional[str] = None, 
        stock: Optional[str] = None, 
        price_line: Optional[str] = None, 
        image: Optional[str] = None, 
        is_sub_good: Optional[str] = None, 
        num_sale: Optional[str] = None, 
        parent_fee: Optional[str] = None, 
        top_fee: Optional[str] = None, 
        recommender_fee: Optional[str] = None, 
        supplier_fee: Optional[str] = None, 
        lower_num_people: Optional[str] = None, 
        upper_num_people: Optional[str] = None, 
        room: Optional[str] = None, 
        post: Optional[str] = None, 
        status: Optional[str] = None, 
        share_fee: Optional[str] = None, 
        is_default: Optional[str] = None, 
        spec_num: Optional[str] = None, 
        profit: Optional[str] = None, 
        eqlevel_fee: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_price: Optional[str] = None, 
        l_cost: Optional[str] = None, 
        l_value: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_stock: Optional[str] = None, 
        l_price_line: Optional[str] = None, 
        l_image: Optional[str] = None, 
        l_is_sub_good: Optional[str] = None, 
        l_num_sale: Optional[str] = None, 
        l_parent_fee: Optional[str] = None, 
        l_top_fee: Optional[str] = None, 
        l_recommender_fee: Optional[str] = None, 
        l_supplier_fee: Optional[str] = None, 
        l_lower_num_people: Optional[str] = None, 
        l_upper_num_people: Optional[str] = None, 
        l_room: Optional[str] = None, 
        l_post: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_share_fee: Optional[str] = None, 
        l_is_default: Optional[str] = None, 
        l_spec_num: Optional[str] = None, 
        l_profit: Optional[str] = None, 
        l_eqlevel_fee: Optional[str] = None, 
        s_value: Optional[str] = None, 
        s_image: Optional[str] = None, 
        s_room: Optional[str] = None, 
        s_post: Optional[str] = None, 
        s_spec_num: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodSpec:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if price is not None:
        values = price.split(',')
        if len(values) == 1:
            val = values[0]
            items['price'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['price_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['price_end'] = int(val)
        
    if cost is not None:
        values = cost.split(',')
        if len(values) == 1:
            val = values[0]
            items['cost'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['cost_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['cost_end'] = int(val)
        
    if value is not None:
        values = value.split(',')
        if len(values) == 1:
            val = values[0]
            items['value'] = val
        else:
            val = values[0]
            if val != '':
                items['value_start'] = val
            
            val = values[1]
            if val != '':
                items['value_end'] = val
        
    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if stock is not None:
        values = stock.split(',')
        if len(values) == 1:
            val = values[0]
            items['stock'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['stock_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['stock_end'] = int(val)
        
    if price_line is not None:
        values = price_line.split(',')
        if len(values) == 1:
            val = values[0]
            items['price_line'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['price_line_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['price_line_end'] = int(val)
        
    if image is not None:
        values = image.split(',')
        if len(values) == 1:
            val = values[0]
            items['image'] = val
        else:
            val = values[0]
            if val != '':
                items['image_start'] = val
            
            val = values[1]
            if val != '':
                items['image_end'] = val
        
    if is_sub_good is not None:
        values = is_sub_good.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_sub_good'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_sub_good_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_sub_good_end'] = int(val)
        
    if num_sale is not None:
        values = num_sale.split(',')
        if len(values) == 1:
            val = values[0]
            items['num_sale'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['num_sale_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['num_sale_end'] = int(val)
        
    if parent_fee is not None:
        values = parent_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parent_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parent_fee_end'] = int(val)
        
    if top_fee is not None:
        values = top_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['top_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['top_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['top_fee_end'] = int(val)
        
    if recommender_fee is not None:
        values = recommender_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['recommender_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['recommender_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['recommender_fee_end'] = int(val)
        
    if supplier_fee is not None:
        values = supplier_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_fee_end'] = int(val)
        
    if lower_num_people is not None:
        values = lower_num_people.split(',')
        if len(values) == 1:
            val = values[0]
            items['lower_num_people'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['lower_num_people_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['lower_num_people_end'] = int(val)
        
    if upper_num_people is not None:
        values = upper_num_people.split(',')
        if len(values) == 1:
            val = values[0]
            items['upper_num_people'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['upper_num_people_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['upper_num_people_end'] = int(val)
        
    if room is not None:
        values = room.split(',')
        if len(values) == 1:
            val = values[0]
            items['room'] = val
        else:
            val = values[0]
            if val != '':
                items['room_start'] = val
            
            val = values[1]
            if val != '':
                items['room_end'] = val
        
    if post is not None:
        values = post.split(',')
        if len(values) == 1:
            val = values[0]
            items['post'] = val
        else:
            val = values[0]
            if val != '':
                items['post_start'] = val
            
            val = values[1]
            if val != '':
                items['post_end'] = val
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if share_fee is not None:
        values = share_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['share_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['share_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['share_fee_end'] = int(val)
        
    if is_default is not None:
        values = is_default.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_default'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_default_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_default_end'] = int(val)
        
    if spec_num is not None:
        values = spec_num.split(',')
        if len(values) == 1:
            val = values[0]
            items['spec_num'] = val
        else:
            val = values[0]
            if val != '':
                items['spec_num_start'] = val
            
            val = values[1]
            if val != '':
                items['spec_num_end'] = val
        
    if profit is not None:
        values = profit.split(',')
        if len(values) == 1:
            val = values[0]
            items['profit'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['profit_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['profit_end'] = int(val)
        
    if eqlevel_fee is not None:
        values = eqlevel_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['eqlevel_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['eqlevel_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['eqlevel_fee_end'] = int(val)
        

    if s_value is not None:
        search_items['value'] = '%' + s_value + '%'
        
    if s_image is not None:
        search_items['image'] = '%' + s_image + '%'
        
    if s_room is not None:
        search_items['room'] = '%' + s_room + '%'
        
    if s_post is not None:
        search_items['post'] = '%' + s_post + '%'
        
    if s_spec_num is not None:
        search_items['spec_num'] = '%' + s_spec_num + '%'
        

    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_price is not None:
        values = l_price.split(',')
        values = [int(val) for val in values]
        set_items['price'] = values
        
    if l_cost is not None:
        values = l_cost.split(',')
        values = [int(val) for val in values]
        set_items['cost'] = values
        
    if l_value is not None:
        values = l_value.split(',')
        values = [val for val in values]
        set_items['value'] = values
        
    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_stock is not None:
        values = l_stock.split(',')
        values = [int(val) for val in values]
        set_items['stock'] = values
        
    if l_price_line is not None:
        values = l_price_line.split(',')
        values = [int(val) for val in values]
        set_items['price_line'] = values
        
    if l_image is not None:
        values = l_image.split(',')
        values = [val for val in values]
        set_items['image'] = values
        
    if l_is_sub_good is not None:
        values = l_is_sub_good.split(',')
        values = [int(val) for val in values]
        set_items['is_sub_good'] = values
        
    if l_num_sale is not None:
        values = l_num_sale.split(',')
        values = [int(val) for val in values]
        set_items['num_sale'] = values
        
    if l_parent_fee is not None:
        values = l_parent_fee.split(',')
        values = [int(val) for val in values]
        set_items['parent_fee'] = values
        
    if l_top_fee is not None:
        values = l_top_fee.split(',')
        values = [int(val) for val in values]
        set_items['top_fee'] = values
        
    if l_recommender_fee is not None:
        values = l_recommender_fee.split(',')
        values = [int(val) for val in values]
        set_items['recommender_fee'] = values
        
    if l_supplier_fee is not None:
        values = l_supplier_fee.split(',')
        values = [int(val) for val in values]
        set_items['supplier_fee'] = values
        
    if l_lower_num_people is not None:
        values = l_lower_num_people.split(',')
        values = [int(val) for val in values]
        set_items['lower_num_people'] = values
        
    if l_upper_num_people is not None:
        values = l_upper_num_people.split(',')
        values = [int(val) for val in values]
        set_items['upper_num_people'] = values
        
    if l_room is not None:
        values = l_room.split(',')
        values = [val for val in values]
        set_items['room'] = values
        
    if l_post is not None:
        values = l_post.split(',')
        values = [val for val in values]
        set_items['post'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_share_fee is not None:
        values = l_share_fee.split(',')
        values = [int(val) for val in values]
        set_items['share_fee'] = values
        
    if l_is_default is not None:
        values = l_is_default.split(',')
        values = [int(val) for val in values]
        set_items['is_default'] = values
        
    if l_spec_num is not None:
        values = l_spec_num.split(',')
        values = [val for val in values]
        set_items['spec_num'] = values
        
    if l_profit is not None:
        values = l_profit.split(',')
        values = [int(val) for val in values]
        set_items['profit'] = values
        
    if l_eqlevel_fee is not None:
        values = l_eqlevel_fee.split(',')
        values = [int(val) for val in values]
        set_items['eqlevel_fee'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_spec(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_spec(items, search_items, set_items)
    
    return FilterResGoodSpec(data=data, total=c)


@router.get(f'/good_spec/fast_filter', response_model=FilterResGoodSpec)
async def fast_filter_good_spec(
        good_id: Optional[str] = None, 
        price: Optional[str] = None, 
        cost: Optional[str] = None, 
        value: Optional[str] = None, 
        id: Optional[str] = None, 
        stock: Optional[str] = None, 
        price_line: Optional[str] = None, 
        image: Optional[str] = None, 
        is_sub_good: Optional[str] = None, 
        num_sale: Optional[str] = None, 
        parent_fee: Optional[str] = None, 
        top_fee: Optional[str] = None, 
        recommender_fee: Optional[str] = None, 
        supplier_fee: Optional[str] = None, 
        lower_num_people: Optional[str] = None, 
        upper_num_people: Optional[str] = None, 
        room: Optional[str] = None, 
        post: Optional[str] = None, 
        status: Optional[str] = None, 
        share_fee: Optional[str] = None, 
        is_default: Optional[str] = None, 
        spec_num: Optional[str] = None, 
        profit: Optional[str] = None, 
        eqlevel_fee: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_price: Optional[str] = None, 
        l_cost: Optional[str] = None, 
        l_value: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_stock: Optional[str] = None, 
        l_price_line: Optional[str] = None, 
        l_image: Optional[str] = None, 
        l_is_sub_good: Optional[str] = None, 
        l_num_sale: Optional[str] = None, 
        l_parent_fee: Optional[str] = None, 
        l_top_fee: Optional[str] = None, 
        l_recommender_fee: Optional[str] = None, 
        l_supplier_fee: Optional[str] = None, 
        l_lower_num_people: Optional[str] = None, 
        l_upper_num_people: Optional[str] = None, 
        l_room: Optional[str] = None, 
        l_post: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_share_fee: Optional[str] = None, 
        l_is_default: Optional[str] = None, 
        l_spec_num: Optional[str] = None, 
        l_profit: Optional[str] = None, 
        l_eqlevel_fee: Optional[str] = None, 
        s_value: Optional[str] = None, 
        s_image: Optional[str] = None, 
        s_room: Optional[str] = None, 
        s_post: Optional[str] = None, 
        s_spec_num: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodSpec:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if price is not None:
        values = price.split(',')
        if len(values) == 1:
            val = values[0]
            items['price'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['price_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['price_end'] = int(val)
        
    if cost is not None:
        values = cost.split(',')
        if len(values) == 1:
            val = values[0]
            items['cost'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['cost_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['cost_end'] = int(val)
        
    if value is not None:
        values = value.split(',')
        if len(values) == 1:
            val = values[0]
            items['value'] = val
        else:
            val = values[0]
            if val != '':
                items['value_start'] = val
            
            val = values[1]
            if val != '':
                items['value_end'] = val
        
    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if stock is not None:
        values = stock.split(',')
        if len(values) == 1:
            val = values[0]
            items['stock'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['stock_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['stock_end'] = int(val)
        
    if price_line is not None:
        values = price_line.split(',')
        if len(values) == 1:
            val = values[0]
            items['price_line'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['price_line_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['price_line_end'] = int(val)
        
    if image is not None:
        values = image.split(',')
        if len(values) == 1:
            val = values[0]
            items['image'] = val
        else:
            val = values[0]
            if val != '':
                items['image_start'] = val
            
            val = values[1]
            if val != '':
                items['image_end'] = val
        
    if is_sub_good is not None:
        values = is_sub_good.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_sub_good'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_sub_good_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_sub_good_end'] = int(val)
        
    if num_sale is not None:
        values = num_sale.split(',')
        if len(values) == 1:
            val = values[0]
            items['num_sale'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['num_sale_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['num_sale_end'] = int(val)
        
    if parent_fee is not None:
        values = parent_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parent_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parent_fee_end'] = int(val)
        
    if top_fee is not None:
        values = top_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['top_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['top_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['top_fee_end'] = int(val)
        
    if recommender_fee is not None:
        values = recommender_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['recommender_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['recommender_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['recommender_fee_end'] = int(val)
        
    if supplier_fee is not None:
        values = supplier_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_fee_end'] = int(val)
        
    if lower_num_people is not None:
        values = lower_num_people.split(',')
        if len(values) == 1:
            val = values[0]
            items['lower_num_people'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['lower_num_people_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['lower_num_people_end'] = int(val)
        
    if upper_num_people is not None:
        values = upper_num_people.split(',')
        if len(values) == 1:
            val = values[0]
            items['upper_num_people'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['upper_num_people_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['upper_num_people_end'] = int(val)
        
    if room is not None:
        values = room.split(',')
        if len(values) == 1:
            val = values[0]
            items['room'] = val
        else:
            val = values[0]
            if val != '':
                items['room_start'] = val
            
            val = values[1]
            if val != '':
                items['room_end'] = val
        
    if post is not None:
        values = post.split(',')
        if len(values) == 1:
            val = values[0]
            items['post'] = val
        else:
            val = values[0]
            if val != '':
                items['post_start'] = val
            
            val = values[1]
            if val != '':
                items['post_end'] = val
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if share_fee is not None:
        values = share_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['share_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['share_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['share_fee_end'] = int(val)
        
    if is_default is not None:
        values = is_default.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_default'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_default_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_default_end'] = int(val)
        
    if spec_num is not None:
        values = spec_num.split(',')
        if len(values) == 1:
            val = values[0]
            items['spec_num'] = val
        else:
            val = values[0]
            if val != '':
                items['spec_num_start'] = val
            
            val = values[1]
            if val != '':
                items['spec_num_end'] = val
        
    if profit is not None:
        values = profit.split(',')
        if len(values) == 1:
            val = values[0]
            items['profit'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['profit_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['profit_end'] = int(val)
        
    if eqlevel_fee is not None:
        values = eqlevel_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['eqlevel_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['eqlevel_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['eqlevel_fee_end'] = int(val)
        

    if s_value is not None:
        search_items['value'] = '%' + s_value + '%'
        
    if s_image is not None:
        search_items['image'] = '%' + s_image + '%'
        
    if s_room is not None:
        search_items['room'] = '%' + s_room + '%'
        
    if s_post is not None:
        search_items['post'] = '%' + s_post + '%'
        
    if s_spec_num is not None:
        search_items['spec_num'] = '%' + s_spec_num + '%'
        

    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_price is not None:
        values = l_price.split(',')
        values = [int(val) for val in values]
        set_items['price'] = values
        
    if l_cost is not None:
        values = l_cost.split(',')
        values = [int(val) for val in values]
        set_items['cost'] = values
        
    if l_value is not None:
        values = l_value.split(',')
        values = [val for val in values]
        set_items['value'] = values
        
    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_stock is not None:
        values = l_stock.split(',')
        values = [int(val) for val in values]
        set_items['stock'] = values
        
    if l_price_line is not None:
        values = l_price_line.split(',')
        values = [int(val) for val in values]
        set_items['price_line'] = values
        
    if l_image is not None:
        values = l_image.split(',')
        values = [val for val in values]
        set_items['image'] = values
        
    if l_is_sub_good is not None:
        values = l_is_sub_good.split(',')
        values = [int(val) for val in values]
        set_items['is_sub_good'] = values
        
    if l_num_sale is not None:
        values = l_num_sale.split(',')
        values = [int(val) for val in values]
        set_items['num_sale'] = values
        
    if l_parent_fee is not None:
        values = l_parent_fee.split(',')
        values = [int(val) for val in values]
        set_items['parent_fee'] = values
        
    if l_top_fee is not None:
        values = l_top_fee.split(',')
        values = [int(val) for val in values]
        set_items['top_fee'] = values
        
    if l_recommender_fee is not None:
        values = l_recommender_fee.split(',')
        values = [int(val) for val in values]
        set_items['recommender_fee'] = values
        
    if l_supplier_fee is not None:
        values = l_supplier_fee.split(',')
        values = [int(val) for val in values]
        set_items['supplier_fee'] = values
        
    if l_lower_num_people is not None:
        values = l_lower_num_people.split(',')
        values = [int(val) for val in values]
        set_items['lower_num_people'] = values
        
    if l_upper_num_people is not None:
        values = l_upper_num_people.split(',')
        values = [int(val) for val in values]
        set_items['upper_num_people'] = values
        
    if l_room is not None:
        values = l_room.split(',')
        values = [val for val in values]
        set_items['room'] = values
        
    if l_post is not None:
        values = l_post.split(',')
        values = [val for val in values]
        set_items['post'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_share_fee is not None:
        values = l_share_fee.split(',')
        values = [int(val) for val in values]
        set_items['share_fee'] = values
        
    if l_is_default is not None:
        values = l_is_default.split(',')
        values = [int(val) for val in values]
        set_items['is_default'] = values
        
    if l_spec_num is not None:
        values = l_spec_num.split(',')
        values = [val for val in values]
        set_items['spec_num'] = values
        
    if l_profit is not None:
        values = l_profit.split(',')
        values = [int(val) for val in values]
        set_items['profit'] = values
        
    if l_eqlevel_fee is not None:
        values = l_eqlevel_fee.split(',')
        values = [int(val) for val in values]
        set_items['eqlevel_fee'] = values
            
    
    data = d_db.filter_good_spec(items, search_items, set_items, page, page_size)
    return FilterResGoodSpec(data=data, total=-1)

    
@router.post(f'/good_spec_combo/create', response_model=SGoodSpecCombo)
async def create_good_spec_combo(item: CreateGoodSpecCombo) -> SGoodSpecCombo:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_spec_combo(item)
        
    
@router.post(f'/good_spec_combo/update', response_model=str)
async def update_good_spec_combo(item: SGoodSpecCombo) -> str:
    d_db.update_good_spec_combo(item)
    return "success"

    
@router.get(f'/good_spec_combo/get', response_model=SGoodSpecCombo)
async def get_good_spec_combo(good_spec_combo_id: int) -> SGoodSpecCombo:
    return d_db.get_good_spec_combo(good_spec_combo_id)


@router.get(f'/good_spec_combo/filter', response_model=FilterResGoodSpecCombo)
async def filter_good_spec_combo(
        id: Optional[str] = None, 
        good_spec_id: Optional[str] = None, 
        value: Optional[str] = None, 
        price: Optional[str] = None, 
        amount: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_spec_id: Optional[str] = None, 
        l_value: Optional[str] = None, 
        l_price: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        s_value: Optional[str] = None, 
        s_amount: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodSpecCombo:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_spec_id is not None:
        values = good_spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_spec_id_end'] = int(val)
        
    if value is not None:
        values = value.split(',')
        if len(values) == 1:
            val = values[0]
            items['value'] = val
        else:
            val = values[0]
            if val != '':
                items['value_start'] = val
            
            val = values[1]
            if val != '':
                items['value_end'] = val
        
    if price is not None:
        values = price.split(',')
        if len(values) == 1:
            val = values[0]
            items['price'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['price_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['price_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = val
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = val
            
            val = values[1]
            if val != '':
                items['amount_end'] = val
        

    if s_value is not None:
        search_items['value'] = '%' + s_value + '%'
        
    if s_amount is not None:
        search_items['amount'] = '%' + s_amount + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_spec_id is not None:
        values = l_good_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['good_spec_id'] = values
        
    if l_value is not None:
        values = l_value.split(',')
        values = [val for val in values]
        set_items['value'] = values
        
    if l_price is not None:
        values = l_price.split(',')
        values = [int(val) for val in values]
        set_items['price'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [val for val in values]
        set_items['amount'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_spec_combo(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_spec_combo(items, search_items, set_items)
    
    return FilterResGoodSpecCombo(data=data, total=c)


@router.get(f'/good_spec_combo/fast_filter', response_model=FilterResGoodSpecCombo)
async def fast_filter_good_spec_combo(
        id: Optional[str] = None, 
        good_spec_id: Optional[str] = None, 
        value: Optional[str] = None, 
        price: Optional[str] = None, 
        amount: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_spec_id: Optional[str] = None, 
        l_value: Optional[str] = None, 
        l_price: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        s_value: Optional[str] = None, 
        s_amount: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodSpecCombo:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_spec_id is not None:
        values = good_spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_spec_id_end'] = int(val)
        
    if value is not None:
        values = value.split(',')
        if len(values) == 1:
            val = values[0]
            items['value'] = val
        else:
            val = values[0]
            if val != '':
                items['value_start'] = val
            
            val = values[1]
            if val != '':
                items['value_end'] = val
        
    if price is not None:
        values = price.split(',')
        if len(values) == 1:
            val = values[0]
            items['price'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['price_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['price_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = val
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = val
            
            val = values[1]
            if val != '':
                items['amount_end'] = val
        

    if s_value is not None:
        search_items['value'] = '%' + s_value + '%'
        
    if s_amount is not None:
        search_items['amount'] = '%' + s_amount + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_spec_id is not None:
        values = l_good_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['good_spec_id'] = values
        
    if l_value is not None:
        values = l_value.split(',')
        values = [val for val in values]
        set_items['value'] = values
        
    if l_price is not None:
        values = l_price.split(',')
        values = [int(val) for val in values]
        set_items['price'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [val for val in values]
        set_items['amount'] = values
            
    
    data = d_db.filter_good_spec_combo(items, search_items, set_items, page, page_size)
    return FilterResGoodSpecCombo(data=data, total=-1)

    
@router.post(f'/good_spec_detail/create', response_model=SGoodSpecDetail)
async def create_good_spec_detail(item: CreateGoodSpecDetail) -> SGoodSpecDetail:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_spec_detail(item)
        
    
@router.post(f'/good_spec_detail/update', response_model=str)
async def update_good_spec_detail(item: SGoodSpecDetail) -> str:
    d_db.update_good_spec_detail(item)
    return "success"

    
@router.get(f'/good_spec_detail/get', response_model=SGoodSpecDetail)
async def get_good_spec_detail(good_spec_detail_id: int) -> SGoodSpecDetail:
    return d_db.get_good_spec_detail(good_spec_detail_id)


@router.get(f'/good_spec_detail/filter', response_model=FilterResGoodSpecDetail)
async def filter_good_spec_detail(
        id: Optional[str] = None, 
        good_spec_id: Optional[str] = None, 
        detail: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_spec_id: Optional[str] = None, 
        l_detail: Optional[str] = None, 
        s_detail: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodSpecDetail:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_spec_id is not None:
        values = good_spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_spec_id_end'] = int(val)
        
    if detail is not None:
        values = detail.split(',')
        if len(values) == 1:
            val = values[0]
            items['detail'] = val
        else:
            val = values[0]
            if val != '':
                items['detail_start'] = val
            
            val = values[1]
            if val != '':
                items['detail_end'] = val
        

    if s_detail is not None:
        search_items['detail'] = '%' + s_detail + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_spec_id is not None:
        values = l_good_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['good_spec_id'] = values
        
    if l_detail is not None:
        values = l_detail.split(',')
        values = [val for val in values]
        set_items['detail'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_spec_detail(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_spec_detail(items, search_items, set_items)
    
    return FilterResGoodSpecDetail(data=data, total=c)


@router.get(f'/good_spec_detail/fast_filter', response_model=FilterResGoodSpecDetail)
async def fast_filter_good_spec_detail(
        id: Optional[str] = None, 
        good_spec_id: Optional[str] = None, 
        detail: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_spec_id: Optional[str] = None, 
        l_detail: Optional[str] = None, 
        s_detail: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodSpecDetail:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_spec_id is not None:
        values = good_spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_spec_id_end'] = int(val)
        
    if detail is not None:
        values = detail.split(',')
        if len(values) == 1:
            val = values[0]
            items['detail'] = val
        else:
            val = values[0]
            if val != '':
                items['detail_start'] = val
            
            val = values[1]
            if val != '':
                items['detail_end'] = val
        

    if s_detail is not None:
        search_items['detail'] = '%' + s_detail + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_spec_id is not None:
        values = l_good_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['good_spec_id'] = values
        
    if l_detail is not None:
        values = l_detail.split(',')
        values = [val for val in values]
        set_items['detail'] = values
            
    
    data = d_db.filter_good_spec_detail(items, search_items, set_items, page, page_size)
    return FilterResGoodSpecDetail(data=data, total=-1)

    
@router.post(f'/good_spec_image/create', response_model=SGoodSpecImage)
async def create_good_spec_image(item: CreateGoodSpecImage) -> SGoodSpecImage:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_spec_image(item)
        
    
@router.post(f'/good_spec_image/update', response_model=str)
async def update_good_spec_image(item: SGoodSpecImage) -> str:
    d_db.update_good_spec_image(item)
    return "success"

    
@router.get(f'/good_spec_image/get', response_model=SGoodSpecImage)
async def get_good_spec_image(good_spec_image_id: int) -> SGoodSpecImage:
    return d_db.get_good_spec_image(good_spec_image_id)


@router.get(f'/good_spec_image/filter', response_model=FilterResGoodSpecImage)
async def filter_good_spec_image(
        id: Optional[str] = None, 
        spec_id: Optional[str] = None, 
        image: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_spec_id: Optional[str] = None, 
        l_image: Optional[str] = None, 
        s_image: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodSpecImage:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if spec_id is not None:
        values = spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['spec_id_end'] = int(val)
        
    if image is not None:
        values = image.split(',')
        if len(values) == 1:
            val = values[0]
            items['image'] = val
        else:
            val = values[0]
            if val != '':
                items['image_start'] = val
            
            val = values[1]
            if val != '':
                items['image_end'] = val
        

    if s_image is not None:
        search_items['image'] = '%' + s_image + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_spec_id is not None:
        values = l_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['spec_id'] = values
        
    if l_image is not None:
        values = l_image.split(',')
        values = [val for val in values]
        set_items['image'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_spec_image(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_spec_image(items, search_items, set_items)
    
    return FilterResGoodSpecImage(data=data, total=c)


@router.get(f'/good_spec_image/fast_filter', response_model=FilterResGoodSpecImage)
async def fast_filter_good_spec_image(
        id: Optional[str] = None, 
        spec_id: Optional[str] = None, 
        image: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_spec_id: Optional[str] = None, 
        l_image: Optional[str] = None, 
        s_image: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodSpecImage:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if spec_id is not None:
        values = spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['spec_id_end'] = int(val)
        
    if image is not None:
        values = image.split(',')
        if len(values) == 1:
            val = values[0]
            items['image'] = val
        else:
            val = values[0]
            if val != '':
                items['image_start'] = val
            
            val = values[1]
            if val != '':
                items['image_end'] = val
        

    if s_image is not None:
        search_items['image'] = '%' + s_image + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_spec_id is not None:
        values = l_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['spec_id'] = values
        
    if l_image is not None:
        values = l_image.split(',')
        values = [val for val in values]
        set_items['image'] = values
            
    
    data = d_db.filter_good_spec_image(items, search_items, set_items, page, page_size)
    return FilterResGoodSpecImage(data=data, total=-1)

    
@router.post(f'/good_store/create', response_model=SGoodStore)
async def create_good_store(item: CreateGoodStore) -> SGoodStore:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_store(item)
        
    
@router.post(f'/good_store/update', response_model=str)
async def update_good_store(item: SGoodStore) -> str:
    d_db.update_good_store(item)
    return "success"

    
@router.get(f'/good_store/get', response_model=SGoodStore)
async def get_good_store(good_store_id: int) -> SGoodStore:
    return d_db.get_good_store(good_store_id)


@router.get(f'/good_store/filter', response_model=FilterResGoodStore)
async def filter_good_store(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        store_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodStore:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_store(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_store(items, search_items, set_items)
    
    return FilterResGoodStore(data=data, total=c)


@router.get(f'/good_store/fast_filter', response_model=FilterResGoodStore)
async def fast_filter_good_store(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        store_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodStore:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
            
    
    data = d_db.filter_good_store(items, search_items, set_items, page, page_size)
    return FilterResGoodStore(data=data, total=-1)

    
@router.post(f'/good_text/create', response_model=SGoodText)
async def create_good_text(item: CreateGoodText) -> SGoodText:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_text(item)
        
    
@router.post(f'/good_text/update', response_model=str)
async def update_good_text(item: SGoodText) -> str:
    d_db.update_good_text(item)
    return "success"

    
@router.get(f'/good_text/get', response_model=SGoodText)
async def get_good_text(good_text_id: int) -> SGoodText:
    return d_db.get_good_text(good_text_id)


@router.get(f'/good_text/filter', response_model=FilterResGoodText)
async def filter_good_text(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        s_description: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodText:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_text(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_text(items, search_items, set_items)
    
    return FilterResGoodText(data=data, total=c)


@router.get(f'/good_text/fast_filter', response_model=FilterResGoodText)
async def fast_filter_good_text(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        s_description: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodText:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
            
    
    data = d_db.filter_good_text(items, search_items, set_items, page, page_size)
    return FilterResGoodText(data=data, total=-1)

    
@router.post(f'/good_type/create', response_model=SGoodType)
async def create_good_type(item: CreateGoodType) -> SGoodType:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_good_type(item)
        
    
@router.post(f'/good_type/update', response_model=str)
async def update_good_type(item: SGoodType) -> str:
    d_db.update_good_type(item)
    return "success"

    
@router.get(f'/good_type/get', response_model=SGoodType)
async def get_good_type(good_type_id: int) -> SGoodType:
    return d_db.get_good_type(good_type_id)


@router.get(f'/good_type/filter', response_model=FilterResGoodType)
async def filter_good_type(
        id: Optional[str] = None, 
        type: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        s_type: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodType:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_good_type(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_good_type(items, search_items, set_items)
    
    return FilterResGoodType(data=data, total=c)


@router.get(f'/good_type/fast_filter', response_model=FilterResGoodType)
async def fast_filter_good_type(
        id: Optional[str] = None, 
        type: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        s_type: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGoodType:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
            
    
    data = d_db.filter_good_type(items, search_items, set_items, page, page_size)
    return FilterResGoodType(data=data, total=-1)

    
@router.post(f'/groupsir/create', response_model=SGroupsir)
async def create_groupsir(item: CreateGroupsir) -> SGroupsir:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_groupsir(item)
        
    
@router.post(f'/groupsir/update', response_model=str)
async def update_groupsir(item: SGroupsir) -> str:
    d_db.update_groupsir(item)
    return "success"

    
@router.get(f'/groupsir/get', response_model=SGroupsir)
async def get_groupsir(groupsir_id: int) -> SGroupsir:
    return d_db.get_groupsir(groupsir_id)


@router.get(f'/groupsir/filter', response_model=FilterResGroupsir)
async def filter_groupsir(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        parent_id: Optional[str] = None, 
        register_time: Optional[str] = None, 
        status: Optional[str] = None, 
        is_empower: Optional[str] = None, 
        notes: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_parent_id: Optional[str] = None, 
        l_register_time: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_is_empower: Optional[str] = None, 
        l_notes: Optional[str] = None, 
        s_notes: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGroupsir:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if parent_id is not None:
        values = parent_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parent_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parent_id_end'] = int(val)
        
    if register_time is not None:
        values = register_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['register_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['register_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['register_time_end'] = datetime.fromtimestamp(int(val))
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if is_empower is not None:
        values = is_empower.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_empower'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_empower_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_empower_end'] = int(val)
        
    if notes is not None:
        values = notes.split(',')
        if len(values) == 1:
            val = values[0]
            items['notes'] = val
        else:
            val = values[0]
            if val != '':
                items['notes_start'] = val
            
            val = values[1]
            if val != '':
                items['notes_end'] = val
        

    if s_notes is not None:
        search_items['notes'] = '%' + s_notes + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_parent_id is not None:
        values = l_parent_id.split(',')
        values = [int(val) for val in values]
        set_items['parent_id'] = values
        
    if l_register_time is not None:
        values = l_register_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['register_time'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_is_empower is not None:
        values = l_is_empower.split(',')
        values = [int(val) for val in values]
        set_items['is_empower'] = values
        
    if l_notes is not None:
        values = l_notes.split(',')
        values = [val for val in values]
        set_items['notes'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_groupsir(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_groupsir(items, search_items, set_items)
    
    return FilterResGroupsir(data=data, total=c)


@router.get(f'/groupsir/fast_filter', response_model=FilterResGroupsir)
async def fast_filter_groupsir(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        parent_id: Optional[str] = None, 
        register_time: Optional[str] = None, 
        status: Optional[str] = None, 
        is_empower: Optional[str] = None, 
        notes: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_parent_id: Optional[str] = None, 
        l_register_time: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_is_empower: Optional[str] = None, 
        l_notes: Optional[str] = None, 
        s_notes: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResGroupsir:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if parent_id is not None:
        values = parent_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parent_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parent_id_end'] = int(val)
        
    if register_time is not None:
        values = register_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['register_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['register_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['register_time_end'] = datetime.fromtimestamp(int(val))
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if is_empower is not None:
        values = is_empower.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_empower'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_empower_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_empower_end'] = int(val)
        
    if notes is not None:
        values = notes.split(',')
        if len(values) == 1:
            val = values[0]
            items['notes'] = val
        else:
            val = values[0]
            if val != '':
                items['notes_start'] = val
            
            val = values[1]
            if val != '':
                items['notes_end'] = val
        

    if s_notes is not None:
        search_items['notes'] = '%' + s_notes + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_parent_id is not None:
        values = l_parent_id.split(',')
        values = [int(val) for val in values]
        set_items['parent_id'] = values
        
    if l_register_time is not None:
        values = l_register_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['register_time'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_is_empower is not None:
        values = l_is_empower.split(',')
        values = [int(val) for val in values]
        set_items['is_empower'] = values
        
    if l_notes is not None:
        values = l_notes.split(',')
        values = [val for val in values]
        set_items['notes'] = values
            
    
    data = d_db.filter_groupsir(items, search_items, set_items, page, page_size)
    return FilterResGroupsir(data=data, total=-1)

    
@router.post(f'/level/create', response_model=SLevel)
async def create_level(item: CreateLevel) -> SLevel:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_level(item)
        
    
@router.post(f'/level/update', response_model=str)
async def update_level(item: SLevel) -> str:
    d_db.update_level(item)
    return "success"

    
@router.get(f'/level/get', response_model=SLevel)
async def get_level(level_id: int) -> SLevel:
    return d_db.get_level(level_id)


@router.get(f'/level/filter', response_model=FilterResLevel)
async def filter_level(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResLevel:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_level(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_level(items, search_items, set_items)
    
    return FilterResLevel(data=data, total=c)


@router.get(f'/level/fast_filter', response_model=FilterResLevel)
async def fast_filter_level(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResLevel:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    data = d_db.filter_level(items, search_items, set_items, page, page_size)
    return FilterResLevel(data=data, total=-1)

    
@router.post(f'/lock_balance/create', response_model=SLockBalance)
async def create_lock_balance(item: CreateLockBalance) -> SLockBalance:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_lock_balance(item)
        
    
@router.post(f'/lock_balance/update', response_model=str)
async def update_lock_balance(item: SLockBalance) -> str:
    d_db.update_lock_balance(item)
    return "success"

    
@router.get(f'/lock_balance/get', response_model=SLockBalance)
async def get_lock_balance(lock_balance_id: int) -> SLockBalance:
    return d_db.get_lock_balance(lock_balance_id)


@router.get(f'/lock_balance/filter', response_model=FilterResLockBalance)
async def filter_lock_balance(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        change: Optional[str] = None, 
        lock_balance: Optional[str] = None, 
        type: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        out_trade_no: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_change: Optional[str] = None, 
        l_lock_balance: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_out_trade_no: Optional[str] = None, 
        s_type: Optional[str] = None, 
        s_description: Optional[str] = None, 
        s_out_trade_no: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResLockBalance:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if change is not None:
        values = change.split(',')
        if len(values) == 1:
            val = values[0]
            items['change'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['change_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['change_end'] = int(val)
        
    if lock_balance is not None:
        values = lock_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['lock_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['lock_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['lock_balance_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if out_trade_no is not None:
        values = out_trade_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_trade_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_trade_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_trade_no_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        
    if s_out_trade_no is not None:
        search_items['out_trade_no'] = '%' + s_out_trade_no + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_change is not None:
        values = l_change.split(',')
        values = [int(val) for val in values]
        set_items['change'] = values
        
    if l_lock_balance is not None:
        values = l_lock_balance.split(',')
        values = [int(val) for val in values]
        set_items['lock_balance'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_out_trade_no is not None:
        values = l_out_trade_no.split(',')
        values = [val for val in values]
        set_items['out_trade_no'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_lock_balance(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_lock_balance(items, search_items, set_items)
    
    return FilterResLockBalance(data=data, total=c)


@router.get(f'/lock_balance/fast_filter', response_model=FilterResLockBalance)
async def fast_filter_lock_balance(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        change: Optional[str] = None, 
        lock_balance: Optional[str] = None, 
        type: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        out_trade_no: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_change: Optional[str] = None, 
        l_lock_balance: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_out_trade_no: Optional[str] = None, 
        s_type: Optional[str] = None, 
        s_description: Optional[str] = None, 
        s_out_trade_no: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResLockBalance:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if change is not None:
        values = change.split(',')
        if len(values) == 1:
            val = values[0]
            items['change'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['change_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['change_end'] = int(val)
        
    if lock_balance is not None:
        values = lock_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['lock_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['lock_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['lock_balance_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if out_trade_no is not None:
        values = out_trade_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_trade_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_trade_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_trade_no_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        
    if s_out_trade_no is not None:
        search_items['out_trade_no'] = '%' + s_out_trade_no + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_change is not None:
        values = l_change.split(',')
        values = [int(val) for val in values]
        set_items['change'] = values
        
    if l_lock_balance is not None:
        values = l_lock_balance.split(',')
        values = [int(val) for val in values]
        set_items['lock_balance'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_out_trade_no is not None:
        values = l_out_trade_no.split(',')
        values = [val for val in values]
        set_items['out_trade_no'] = values
            
    
    data = d_db.filter_lock_balance(items, search_items, set_items, page, page_size)
    return FilterResLockBalance(data=data, total=-1)

    
@router.post(f'/model/create', response_model=SModel)
async def create_model(item: CreateModel) -> SModel:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_model(item)
        
    
@router.post(f'/model/update', response_model=str)
async def update_model(item: SModel) -> str:
    d_db.update_model(item)
    return "success"

    
@router.get(f'/model/get', response_model=SModel)
async def get_model(model_id: int) -> SModel:
    return d_db.get_model(model_id)


@router.get(f'/model/filter', response_model=FilterResModel)
async def filter_model(
        id: Optional[str] = None, 
        product_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_product_id: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResModel:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if product_id is not None:
        values = product_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['product_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['product_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['product_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_product_id is not None:
        values = l_product_id.split(',')
        values = [int(val) for val in values]
        set_items['product_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_model(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_model(items, search_items, set_items)
    
    return FilterResModel(data=data, total=c)


@router.get(f'/model/fast_filter', response_model=FilterResModel)
async def fast_filter_model(
        id: Optional[str] = None, 
        product_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_product_id: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResModel:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if product_id is not None:
        values = product_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['product_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['product_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['product_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_product_id is not None:
        values = l_product_id.split(',')
        values = [int(val) for val in values]
        set_items['product_id'] = values
            
    
    data = d_db.filter_model(items, search_items, set_items, page, page_size)
    return FilterResModel(data=data, total=-1)

    
@router.post(f'/order/create', response_model=SOrder)
async def create_order(item: CreateOrder) -> SOrder:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_order(item)
        
    
@router.post(f'/order/update', response_model=str)
async def update_order(item: SOrder) -> str:
    d_db.update_order(item)
    return "success"

    
@router.get(f'/order/get', response_model=SOrder)
async def get_order(order_id: int) -> SOrder:
    return d_db.get_order(order_id)


@router.get(f'/order/filter', response_model=FilterResOrder)
async def filter_order(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        paider_id: Optional[str] = None, 
        sale_price: Optional[str] = None, 
        cost_price: Optional[str] = None, 
        create_time: Optional[str] = None, 
        paid_time: Optional[str] = None, 
        status_id: Optional[str] = None, 
        number: Optional[str] = None, 
        consignee_address: Optional[str] = None, 
        consignee_phone: Optional[str] = None, 
        store_id: Optional[str] = None, 
        paid_amount: Optional[str] = None, 
        delivery_fee: Optional[str] = None, 
        spec_id: Optional[str] = None, 
        paid_coin: Optional[str] = None, 
        delivery_track_code: Optional[str] = None, 
        paid_channel_id: Optional[str] = None, 
        consignee_name: Optional[str] = None, 
        delivery_time: Optional[str] = None, 
        good_name: Optional[str] = None, 
        paid_track_code: Optional[str] = None, 
        paider_name: Optional[str] = None, 
        paider_phone: Optional[str] = None, 
        paider_address: Optional[str] = None, 
        supplier_id: Optional[str] = None, 
        paid_balance: Optional[str] = None, 
        paid_lock_balance: Optional[str] = None, 
        delivery_company: Optional[str] = None, 
        complete_time: Optional[str] = None, 
        use_balance: Optional[str] = None, 
        use_coin: Optional[str] = None, 
        consignee_province: Optional[str] = None, 
        consignee_description: Optional[str] = None, 
        consignee_city: Optional[str] = None, 
        consignee_area: Optional[str] = None, 
        consignee_street: Optional[str] = None, 
        out_trade_no: Optional[str] = None, 
        code: Optional[str] = None, 
        code_expired_time: Optional[str] = None, 
        is_display: Optional[str] = None, 
        recommender_id: Optional[str] = None, 
        detail: Optional[str] = None, 
        is_assign_income: Optional[str] = None, 
        parent_uid: Optional[str] = None, 
        top_uid: Optional[str] = None, 
        invited_uid: Optional[str] = None, 
        supplier_uid: Optional[str] = None, 
        eqlevel_uid: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_paider_id: Optional[str] = None, 
        l_sale_price: Optional[str] = None, 
        l_cost_price: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_paid_time: Optional[str] = None, 
        l_status_id: Optional[str] = None, 
        l_number: Optional[str] = None, 
        l_consignee_address: Optional[str] = None, 
        l_consignee_phone: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        l_paid_amount: Optional[str] = None, 
        l_delivery_fee: Optional[str] = None, 
        l_spec_id: Optional[str] = None, 
        l_paid_coin: Optional[str] = None, 
        l_delivery_track_code: Optional[str] = None, 
        l_paid_channel_id: Optional[str] = None, 
        l_consignee_name: Optional[str] = None, 
        l_delivery_time: Optional[str] = None, 
        l_good_name: Optional[str] = None, 
        l_paid_track_code: Optional[str] = None, 
        l_paider_name: Optional[str] = None, 
        l_paider_phone: Optional[str] = None, 
        l_paider_address: Optional[str] = None, 
        l_supplier_id: Optional[str] = None, 
        l_paid_balance: Optional[str] = None, 
        l_paid_lock_balance: Optional[str] = None, 
        l_delivery_company: Optional[str] = None, 
        l_complete_time: Optional[str] = None, 
        l_use_balance: Optional[str] = None, 
        l_use_coin: Optional[str] = None, 
        l_consignee_province: Optional[str] = None, 
        l_consignee_description: Optional[str] = None, 
        l_consignee_city: Optional[str] = None, 
        l_consignee_area: Optional[str] = None, 
        l_consignee_street: Optional[str] = None, 
        l_out_trade_no: Optional[str] = None, 
        l_code: Optional[str] = None, 
        l_code_expired_time: Optional[str] = None, 
        l_is_display: Optional[str] = None, 
        l_recommender_id: Optional[str] = None, 
        l_detail: Optional[str] = None, 
        l_is_assign_income: Optional[str] = None, 
        l_parent_uid: Optional[str] = None, 
        l_top_uid: Optional[str] = None, 
        l_invited_uid: Optional[str] = None, 
        l_supplier_uid: Optional[str] = None, 
        l_eqlevel_uid: Optional[str] = None, 
        s_consignee_address: Optional[str] = None, 
        s_consignee_phone: Optional[str] = None, 
        s_delivery_track_code: Optional[str] = None, 
        s_consignee_name: Optional[str] = None, 
        s_good_name: Optional[str] = None, 
        s_paid_track_code: Optional[str] = None, 
        s_paider_name: Optional[str] = None, 
        s_paider_phone: Optional[str] = None, 
        s_paider_address: Optional[str] = None, 
        s_delivery_company: Optional[str] = None, 
        s_consignee_province: Optional[str] = None, 
        s_consignee_description: Optional[str] = None, 
        s_consignee_city: Optional[str] = None, 
        s_consignee_area: Optional[str] = None, 
        s_consignee_street: Optional[str] = None, 
        s_out_trade_no: Optional[str] = None, 
        s_code: Optional[str] = None, 
        s_detail: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResOrder:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if paider_id is not None:
        values = paider_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['paider_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paider_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paider_id_end'] = int(val)
        
    if sale_price is not None:
        values = sale_price.split(',')
        if len(values) == 1:
            val = values[0]
            items['sale_price'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['sale_price_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['sale_price_end'] = int(val)
        
    if cost_price is not None:
        values = cost_price.split(',')
        if len(values) == 1:
            val = values[0]
            items['cost_price'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['cost_price_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['cost_price_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if paid_time is not None:
        values = paid_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['paid_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['paid_time_end'] = datetime.fromtimestamp(int(val))
        
    if status_id is not None:
        values = status_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['status_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_id_end'] = int(val)
        
    if number is not None:
        values = number.split(',')
        if len(values) == 1:
            val = values[0]
            items['number'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['number_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['number_end'] = int(val)
        
    if consignee_address is not None:
        values = consignee_address.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_address'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_address_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_address_end'] = val
        
    if consignee_phone is not None:
        values = consignee_phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_phone'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_phone_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_phone_end'] = val
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        
    if paid_amount is not None:
        values = paid_amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paid_amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paid_amount_end'] = int(val)
        
    if delivery_fee is not None:
        values = delivery_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['delivery_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['delivery_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['delivery_fee_end'] = int(val)
        
    if spec_id is not None:
        values = spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['spec_id_end'] = int(val)
        
    if paid_coin is not None:
        values = paid_coin.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_coin'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paid_coin_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paid_coin_end'] = int(val)
        
    if delivery_track_code is not None:
        values = delivery_track_code.split(',')
        if len(values) == 1:
            val = values[0]
            items['delivery_track_code'] = val
        else:
            val = values[0]
            if val != '':
                items['delivery_track_code_start'] = val
            
            val = values[1]
            if val != '':
                items['delivery_track_code_end'] = val
        
    if paid_channel_id is not None:
        values = paid_channel_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_channel_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paid_channel_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paid_channel_id_end'] = int(val)
        
    if consignee_name is not None:
        values = consignee_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_name'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_name_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_name_end'] = val
        
    if delivery_time is not None:
        values = delivery_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['delivery_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['delivery_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['delivery_time_end'] = datetime.fromtimestamp(int(val))
        
    if good_name is not None:
        values = good_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_name'] = val
        else:
            val = values[0]
            if val != '':
                items['good_name_start'] = val
            
            val = values[1]
            if val != '':
                items['good_name_end'] = val
        
    if paid_track_code is not None:
        values = paid_track_code.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_track_code'] = val
        else:
            val = values[0]
            if val != '':
                items['paid_track_code_start'] = val
            
            val = values[1]
            if val != '':
                items['paid_track_code_end'] = val
        
    if paider_name is not None:
        values = paider_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['paider_name'] = val
        else:
            val = values[0]
            if val != '':
                items['paider_name_start'] = val
            
            val = values[1]
            if val != '':
                items['paider_name_end'] = val
        
    if paider_phone is not None:
        values = paider_phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['paider_phone'] = val
        else:
            val = values[0]
            if val != '':
                items['paider_phone_start'] = val
            
            val = values[1]
            if val != '':
                items['paider_phone_end'] = val
        
    if paider_address is not None:
        values = paider_address.split(',')
        if len(values) == 1:
            val = values[0]
            items['paider_address'] = val
        else:
            val = values[0]
            if val != '':
                items['paider_address_start'] = val
            
            val = values[1]
            if val != '':
                items['paider_address_end'] = val
        
    if supplier_id is not None:
        values = supplier_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_id_end'] = int(val)
        
    if paid_balance is not None:
        values = paid_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paid_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paid_balance_end'] = int(val)
        
    if paid_lock_balance is not None:
        values = paid_lock_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_lock_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paid_lock_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paid_lock_balance_end'] = int(val)
        
    if delivery_company is not None:
        values = delivery_company.split(',')
        if len(values) == 1:
            val = values[0]
            items['delivery_company'] = val
        else:
            val = values[0]
            if val != '':
                items['delivery_company_start'] = val
            
            val = values[1]
            if val != '':
                items['delivery_company_end'] = val
        
    if complete_time is not None:
        values = complete_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['complete_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['complete_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['complete_time_end'] = datetime.fromtimestamp(int(val))
        
    if use_balance is not None:
        values = use_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['use_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['use_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['use_balance_end'] = int(val)
        
    if use_coin is not None:
        values = use_coin.split(',')
        if len(values) == 1:
            val = values[0]
            items['use_coin'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['use_coin_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['use_coin_end'] = int(val)
        
    if consignee_province is not None:
        values = consignee_province.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_province'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_province_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_province_end'] = val
        
    if consignee_description is not None:
        values = consignee_description.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_description'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_description_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_description_end'] = val
        
    if consignee_city is not None:
        values = consignee_city.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_city'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_city_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_city_end'] = val
        
    if consignee_area is not None:
        values = consignee_area.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_area'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_area_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_area_end'] = val
        
    if consignee_street is not None:
        values = consignee_street.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_street'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_street_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_street_end'] = val
        
    if out_trade_no is not None:
        values = out_trade_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_trade_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_trade_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_trade_no_end'] = val
        
    if code is not None:
        values = code.split(',')
        if len(values) == 1:
            val = values[0]
            items['code'] = val
        else:
            val = values[0]
            if val != '':
                items['code_start'] = val
            
            val = values[1]
            if val != '':
                items['code_end'] = val
        
    if code_expired_time is not None:
        values = code_expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['code_expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['code_expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['code_expired_time_end'] = datetime.fromtimestamp(int(val))
        
    if is_display is not None:
        values = is_display.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_display'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_display_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_display_end'] = int(val)
        
    if recommender_id is not None:
        values = recommender_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['recommender_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['recommender_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['recommender_id_end'] = int(val)
        
    if detail is not None:
        values = detail.split(',')
        if len(values) == 1:
            val = values[0]
            items['detail'] = val
        else:
            val = values[0]
            if val != '':
                items['detail_start'] = val
            
            val = values[1]
            if val != '':
                items['detail_end'] = val
        
    if is_assign_income is not None:
        values = is_assign_income.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_assign_income'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_assign_income_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_assign_income_end'] = int(val)
        
    if parent_uid is not None:
        values = parent_uid.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_uid'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parent_uid_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parent_uid_end'] = int(val)
        
    if top_uid is not None:
        values = top_uid.split(',')
        if len(values) == 1:
            val = values[0]
            items['top_uid'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['top_uid_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['top_uid_end'] = int(val)
        
    if invited_uid is not None:
        values = invited_uid.split(',')
        if len(values) == 1:
            val = values[0]
            items['invited_uid'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['invited_uid_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['invited_uid_end'] = int(val)
        
    if supplier_uid is not None:
        values = supplier_uid.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_uid'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_uid_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_uid_end'] = int(val)
        
    if eqlevel_uid is not None:
        values = eqlevel_uid.split(',')
        if len(values) == 1:
            val = values[0]
            items['eqlevel_uid'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['eqlevel_uid_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['eqlevel_uid_end'] = int(val)
        

    if s_consignee_address is not None:
        search_items['consignee_address'] = '%' + s_consignee_address + '%'
        
    if s_consignee_phone is not None:
        search_items['consignee_phone'] = '%' + s_consignee_phone + '%'
        
    if s_delivery_track_code is not None:
        search_items['delivery_track_code'] = '%' + s_delivery_track_code + '%'
        
    if s_consignee_name is not None:
        search_items['consignee_name'] = '%' + s_consignee_name + '%'
        
    if s_good_name is not None:
        search_items['good_name'] = '%' + s_good_name + '%'
        
    if s_paid_track_code is not None:
        search_items['paid_track_code'] = '%' + s_paid_track_code + '%'
        
    if s_paider_name is not None:
        search_items['paider_name'] = '%' + s_paider_name + '%'
        
    if s_paider_phone is not None:
        search_items['paider_phone'] = '%' + s_paider_phone + '%'
        
    if s_paider_address is not None:
        search_items['paider_address'] = '%' + s_paider_address + '%'
        
    if s_delivery_company is not None:
        search_items['delivery_company'] = '%' + s_delivery_company + '%'
        
    if s_consignee_province is not None:
        search_items['consignee_province'] = '%' + s_consignee_province + '%'
        
    if s_consignee_description is not None:
        search_items['consignee_description'] = '%' + s_consignee_description + '%'
        
    if s_consignee_city is not None:
        search_items['consignee_city'] = '%' + s_consignee_city + '%'
        
    if s_consignee_area is not None:
        search_items['consignee_area'] = '%' + s_consignee_area + '%'
        
    if s_consignee_street is not None:
        search_items['consignee_street'] = '%' + s_consignee_street + '%'
        
    if s_out_trade_no is not None:
        search_items['out_trade_no'] = '%' + s_out_trade_no + '%'
        
    if s_code is not None:
        search_items['code'] = '%' + s_code + '%'
        
    if s_detail is not None:
        search_items['detail'] = '%' + s_detail + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_paider_id is not None:
        values = l_paider_id.split(',')
        values = [int(val) for val in values]
        set_items['paider_id'] = values
        
    if l_sale_price is not None:
        values = l_sale_price.split(',')
        values = [int(val) for val in values]
        set_items['sale_price'] = values
        
    if l_cost_price is not None:
        values = l_cost_price.split(',')
        values = [int(val) for val in values]
        set_items['cost_price'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_paid_time is not None:
        values = l_paid_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['paid_time'] = values
        
    if l_status_id is not None:
        values = l_status_id.split(',')
        values = [int(val) for val in values]
        set_items['status_id'] = values
        
    if l_number is not None:
        values = l_number.split(',')
        values = [int(val) for val in values]
        set_items['number'] = values
        
    if l_consignee_address is not None:
        values = l_consignee_address.split(',')
        values = [val for val in values]
        set_items['consignee_address'] = values
        
    if l_consignee_phone is not None:
        values = l_consignee_phone.split(',')
        values = [val for val in values]
        set_items['consignee_phone'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
        
    if l_paid_amount is not None:
        values = l_paid_amount.split(',')
        values = [int(val) for val in values]
        set_items['paid_amount'] = values
        
    if l_delivery_fee is not None:
        values = l_delivery_fee.split(',')
        values = [int(val) for val in values]
        set_items['delivery_fee'] = values
        
    if l_spec_id is not None:
        values = l_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['spec_id'] = values
        
    if l_paid_coin is not None:
        values = l_paid_coin.split(',')
        values = [int(val) for val in values]
        set_items['paid_coin'] = values
        
    if l_delivery_track_code is not None:
        values = l_delivery_track_code.split(',')
        values = [val for val in values]
        set_items['delivery_track_code'] = values
        
    if l_paid_channel_id is not None:
        values = l_paid_channel_id.split(',')
        values = [int(val) for val in values]
        set_items['paid_channel_id'] = values
        
    if l_consignee_name is not None:
        values = l_consignee_name.split(',')
        values = [val for val in values]
        set_items['consignee_name'] = values
        
    if l_delivery_time is not None:
        values = l_delivery_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['delivery_time'] = values
        
    if l_good_name is not None:
        values = l_good_name.split(',')
        values = [val for val in values]
        set_items['good_name'] = values
        
    if l_paid_track_code is not None:
        values = l_paid_track_code.split(',')
        values = [val for val in values]
        set_items['paid_track_code'] = values
        
    if l_paider_name is not None:
        values = l_paider_name.split(',')
        values = [val for val in values]
        set_items['paider_name'] = values
        
    if l_paider_phone is not None:
        values = l_paider_phone.split(',')
        values = [val for val in values]
        set_items['paider_phone'] = values
        
    if l_paider_address is not None:
        values = l_paider_address.split(',')
        values = [val for val in values]
        set_items['paider_address'] = values
        
    if l_supplier_id is not None:
        values = l_supplier_id.split(',')
        values = [int(val) for val in values]
        set_items['supplier_id'] = values
        
    if l_paid_balance is not None:
        values = l_paid_balance.split(',')
        values = [int(val) for val in values]
        set_items['paid_balance'] = values
        
    if l_paid_lock_balance is not None:
        values = l_paid_lock_balance.split(',')
        values = [int(val) for val in values]
        set_items['paid_lock_balance'] = values
        
    if l_delivery_company is not None:
        values = l_delivery_company.split(',')
        values = [val for val in values]
        set_items['delivery_company'] = values
        
    if l_complete_time is not None:
        values = l_complete_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['complete_time'] = values
        
    if l_use_balance is not None:
        values = l_use_balance.split(',')
        values = [int(val) for val in values]
        set_items['use_balance'] = values
        
    if l_use_coin is not None:
        values = l_use_coin.split(',')
        values = [int(val) for val in values]
        set_items['use_coin'] = values
        
    if l_consignee_province is not None:
        values = l_consignee_province.split(',')
        values = [val for val in values]
        set_items['consignee_province'] = values
        
    if l_consignee_description is not None:
        values = l_consignee_description.split(',')
        values = [val for val in values]
        set_items['consignee_description'] = values
        
    if l_consignee_city is not None:
        values = l_consignee_city.split(',')
        values = [val for val in values]
        set_items['consignee_city'] = values
        
    if l_consignee_area is not None:
        values = l_consignee_area.split(',')
        values = [val for val in values]
        set_items['consignee_area'] = values
        
    if l_consignee_street is not None:
        values = l_consignee_street.split(',')
        values = [val for val in values]
        set_items['consignee_street'] = values
        
    if l_out_trade_no is not None:
        values = l_out_trade_no.split(',')
        values = [val for val in values]
        set_items['out_trade_no'] = values
        
    if l_code is not None:
        values = l_code.split(',')
        values = [val for val in values]
        set_items['code'] = values
        
    if l_code_expired_time is not None:
        values = l_code_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['code_expired_time'] = values
        
    if l_is_display is not None:
        values = l_is_display.split(',')
        values = [int(val) for val in values]
        set_items['is_display'] = values
        
    if l_recommender_id is not None:
        values = l_recommender_id.split(',')
        values = [int(val) for val in values]
        set_items['recommender_id'] = values
        
    if l_detail is not None:
        values = l_detail.split(',')
        values = [val for val in values]
        set_items['detail'] = values
        
    if l_is_assign_income is not None:
        values = l_is_assign_income.split(',')
        values = [int(val) for val in values]
        set_items['is_assign_income'] = values
        
    if l_parent_uid is not None:
        values = l_parent_uid.split(',')
        values = [int(val) for val in values]
        set_items['parent_uid'] = values
        
    if l_top_uid is not None:
        values = l_top_uid.split(',')
        values = [int(val) for val in values]
        set_items['top_uid'] = values
        
    if l_invited_uid is not None:
        values = l_invited_uid.split(',')
        values = [int(val) for val in values]
        set_items['invited_uid'] = values
        
    if l_supplier_uid is not None:
        values = l_supplier_uid.split(',')
        values = [int(val) for val in values]
        set_items['supplier_uid'] = values
        
    if l_eqlevel_uid is not None:
        values = l_eqlevel_uid.split(',')
        values = [int(val) for val in values]
        set_items['eqlevel_uid'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_order(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_order(items, search_items, set_items)
    
    return FilterResOrder(data=data, total=c)


@router.get(f'/order/fast_filter', response_model=FilterResOrder)
async def fast_filter_order(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        paider_id: Optional[str] = None, 
        sale_price: Optional[str] = None, 
        cost_price: Optional[str] = None, 
        create_time: Optional[str] = None, 
        paid_time: Optional[str] = None, 
        status_id: Optional[str] = None, 
        number: Optional[str] = None, 
        consignee_address: Optional[str] = None, 
        consignee_phone: Optional[str] = None, 
        store_id: Optional[str] = None, 
        paid_amount: Optional[str] = None, 
        delivery_fee: Optional[str] = None, 
        spec_id: Optional[str] = None, 
        paid_coin: Optional[str] = None, 
        delivery_track_code: Optional[str] = None, 
        paid_channel_id: Optional[str] = None, 
        consignee_name: Optional[str] = None, 
        delivery_time: Optional[str] = None, 
        good_name: Optional[str] = None, 
        paid_track_code: Optional[str] = None, 
        paider_name: Optional[str] = None, 
        paider_phone: Optional[str] = None, 
        paider_address: Optional[str] = None, 
        supplier_id: Optional[str] = None, 
        paid_balance: Optional[str] = None, 
        paid_lock_balance: Optional[str] = None, 
        delivery_company: Optional[str] = None, 
        complete_time: Optional[str] = None, 
        use_balance: Optional[str] = None, 
        use_coin: Optional[str] = None, 
        consignee_province: Optional[str] = None, 
        consignee_description: Optional[str] = None, 
        consignee_city: Optional[str] = None, 
        consignee_area: Optional[str] = None, 
        consignee_street: Optional[str] = None, 
        out_trade_no: Optional[str] = None, 
        code: Optional[str] = None, 
        code_expired_time: Optional[str] = None, 
        is_display: Optional[str] = None, 
        recommender_id: Optional[str] = None, 
        detail: Optional[str] = None, 
        is_assign_income: Optional[str] = None, 
        parent_uid: Optional[str] = None, 
        top_uid: Optional[str] = None, 
        invited_uid: Optional[str] = None, 
        supplier_uid: Optional[str] = None, 
        eqlevel_uid: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_paider_id: Optional[str] = None, 
        l_sale_price: Optional[str] = None, 
        l_cost_price: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_paid_time: Optional[str] = None, 
        l_status_id: Optional[str] = None, 
        l_number: Optional[str] = None, 
        l_consignee_address: Optional[str] = None, 
        l_consignee_phone: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        l_paid_amount: Optional[str] = None, 
        l_delivery_fee: Optional[str] = None, 
        l_spec_id: Optional[str] = None, 
        l_paid_coin: Optional[str] = None, 
        l_delivery_track_code: Optional[str] = None, 
        l_paid_channel_id: Optional[str] = None, 
        l_consignee_name: Optional[str] = None, 
        l_delivery_time: Optional[str] = None, 
        l_good_name: Optional[str] = None, 
        l_paid_track_code: Optional[str] = None, 
        l_paider_name: Optional[str] = None, 
        l_paider_phone: Optional[str] = None, 
        l_paider_address: Optional[str] = None, 
        l_supplier_id: Optional[str] = None, 
        l_paid_balance: Optional[str] = None, 
        l_paid_lock_balance: Optional[str] = None, 
        l_delivery_company: Optional[str] = None, 
        l_complete_time: Optional[str] = None, 
        l_use_balance: Optional[str] = None, 
        l_use_coin: Optional[str] = None, 
        l_consignee_province: Optional[str] = None, 
        l_consignee_description: Optional[str] = None, 
        l_consignee_city: Optional[str] = None, 
        l_consignee_area: Optional[str] = None, 
        l_consignee_street: Optional[str] = None, 
        l_out_trade_no: Optional[str] = None, 
        l_code: Optional[str] = None, 
        l_code_expired_time: Optional[str] = None, 
        l_is_display: Optional[str] = None, 
        l_recommender_id: Optional[str] = None, 
        l_detail: Optional[str] = None, 
        l_is_assign_income: Optional[str] = None, 
        l_parent_uid: Optional[str] = None, 
        l_top_uid: Optional[str] = None, 
        l_invited_uid: Optional[str] = None, 
        l_supplier_uid: Optional[str] = None, 
        l_eqlevel_uid: Optional[str] = None, 
        s_consignee_address: Optional[str] = None, 
        s_consignee_phone: Optional[str] = None, 
        s_delivery_track_code: Optional[str] = None, 
        s_consignee_name: Optional[str] = None, 
        s_good_name: Optional[str] = None, 
        s_paid_track_code: Optional[str] = None, 
        s_paider_name: Optional[str] = None, 
        s_paider_phone: Optional[str] = None, 
        s_paider_address: Optional[str] = None, 
        s_delivery_company: Optional[str] = None, 
        s_consignee_province: Optional[str] = None, 
        s_consignee_description: Optional[str] = None, 
        s_consignee_city: Optional[str] = None, 
        s_consignee_area: Optional[str] = None, 
        s_consignee_street: Optional[str] = None, 
        s_out_trade_no: Optional[str] = None, 
        s_code: Optional[str] = None, 
        s_detail: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResOrder:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if paider_id is not None:
        values = paider_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['paider_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paider_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paider_id_end'] = int(val)
        
    if sale_price is not None:
        values = sale_price.split(',')
        if len(values) == 1:
            val = values[0]
            items['sale_price'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['sale_price_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['sale_price_end'] = int(val)
        
    if cost_price is not None:
        values = cost_price.split(',')
        if len(values) == 1:
            val = values[0]
            items['cost_price'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['cost_price_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['cost_price_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if paid_time is not None:
        values = paid_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['paid_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['paid_time_end'] = datetime.fromtimestamp(int(val))
        
    if status_id is not None:
        values = status_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['status_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_id_end'] = int(val)
        
    if number is not None:
        values = number.split(',')
        if len(values) == 1:
            val = values[0]
            items['number'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['number_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['number_end'] = int(val)
        
    if consignee_address is not None:
        values = consignee_address.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_address'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_address_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_address_end'] = val
        
    if consignee_phone is not None:
        values = consignee_phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_phone'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_phone_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_phone_end'] = val
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        
    if paid_amount is not None:
        values = paid_amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paid_amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paid_amount_end'] = int(val)
        
    if delivery_fee is not None:
        values = delivery_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['delivery_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['delivery_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['delivery_fee_end'] = int(val)
        
    if spec_id is not None:
        values = spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['spec_id_end'] = int(val)
        
    if paid_coin is not None:
        values = paid_coin.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_coin'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paid_coin_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paid_coin_end'] = int(val)
        
    if delivery_track_code is not None:
        values = delivery_track_code.split(',')
        if len(values) == 1:
            val = values[0]
            items['delivery_track_code'] = val
        else:
            val = values[0]
            if val != '':
                items['delivery_track_code_start'] = val
            
            val = values[1]
            if val != '':
                items['delivery_track_code_end'] = val
        
    if paid_channel_id is not None:
        values = paid_channel_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_channel_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paid_channel_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paid_channel_id_end'] = int(val)
        
    if consignee_name is not None:
        values = consignee_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_name'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_name_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_name_end'] = val
        
    if delivery_time is not None:
        values = delivery_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['delivery_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['delivery_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['delivery_time_end'] = datetime.fromtimestamp(int(val))
        
    if good_name is not None:
        values = good_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_name'] = val
        else:
            val = values[0]
            if val != '':
                items['good_name_start'] = val
            
            val = values[1]
            if val != '':
                items['good_name_end'] = val
        
    if paid_track_code is not None:
        values = paid_track_code.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_track_code'] = val
        else:
            val = values[0]
            if val != '':
                items['paid_track_code_start'] = val
            
            val = values[1]
            if val != '':
                items['paid_track_code_end'] = val
        
    if paider_name is not None:
        values = paider_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['paider_name'] = val
        else:
            val = values[0]
            if val != '':
                items['paider_name_start'] = val
            
            val = values[1]
            if val != '':
                items['paider_name_end'] = val
        
    if paider_phone is not None:
        values = paider_phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['paider_phone'] = val
        else:
            val = values[0]
            if val != '':
                items['paider_phone_start'] = val
            
            val = values[1]
            if val != '':
                items['paider_phone_end'] = val
        
    if paider_address is not None:
        values = paider_address.split(',')
        if len(values) == 1:
            val = values[0]
            items['paider_address'] = val
        else:
            val = values[0]
            if val != '':
                items['paider_address_start'] = val
            
            val = values[1]
            if val != '':
                items['paider_address_end'] = val
        
    if supplier_id is not None:
        values = supplier_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_id_end'] = int(val)
        
    if paid_balance is not None:
        values = paid_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paid_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paid_balance_end'] = int(val)
        
    if paid_lock_balance is not None:
        values = paid_lock_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['paid_lock_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['paid_lock_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['paid_lock_balance_end'] = int(val)
        
    if delivery_company is not None:
        values = delivery_company.split(',')
        if len(values) == 1:
            val = values[0]
            items['delivery_company'] = val
        else:
            val = values[0]
            if val != '':
                items['delivery_company_start'] = val
            
            val = values[1]
            if val != '':
                items['delivery_company_end'] = val
        
    if complete_time is not None:
        values = complete_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['complete_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['complete_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['complete_time_end'] = datetime.fromtimestamp(int(val))
        
    if use_balance is not None:
        values = use_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['use_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['use_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['use_balance_end'] = int(val)
        
    if use_coin is not None:
        values = use_coin.split(',')
        if len(values) == 1:
            val = values[0]
            items['use_coin'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['use_coin_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['use_coin_end'] = int(val)
        
    if consignee_province is not None:
        values = consignee_province.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_province'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_province_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_province_end'] = val
        
    if consignee_description is not None:
        values = consignee_description.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_description'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_description_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_description_end'] = val
        
    if consignee_city is not None:
        values = consignee_city.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_city'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_city_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_city_end'] = val
        
    if consignee_area is not None:
        values = consignee_area.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_area'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_area_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_area_end'] = val
        
    if consignee_street is not None:
        values = consignee_street.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_street'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_street_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_street_end'] = val
        
    if out_trade_no is not None:
        values = out_trade_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_trade_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_trade_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_trade_no_end'] = val
        
    if code is not None:
        values = code.split(',')
        if len(values) == 1:
            val = values[0]
            items['code'] = val
        else:
            val = values[0]
            if val != '':
                items['code_start'] = val
            
            val = values[1]
            if val != '':
                items['code_end'] = val
        
    if code_expired_time is not None:
        values = code_expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['code_expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['code_expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['code_expired_time_end'] = datetime.fromtimestamp(int(val))
        
    if is_display is not None:
        values = is_display.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_display'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_display_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_display_end'] = int(val)
        
    if recommender_id is not None:
        values = recommender_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['recommender_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['recommender_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['recommender_id_end'] = int(val)
        
    if detail is not None:
        values = detail.split(',')
        if len(values) == 1:
            val = values[0]
            items['detail'] = val
        else:
            val = values[0]
            if val != '':
                items['detail_start'] = val
            
            val = values[1]
            if val != '':
                items['detail_end'] = val
        
    if is_assign_income is not None:
        values = is_assign_income.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_assign_income'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_assign_income_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_assign_income_end'] = int(val)
        
    if parent_uid is not None:
        values = parent_uid.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_uid'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parent_uid_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parent_uid_end'] = int(val)
        
    if top_uid is not None:
        values = top_uid.split(',')
        if len(values) == 1:
            val = values[0]
            items['top_uid'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['top_uid_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['top_uid_end'] = int(val)
        
    if invited_uid is not None:
        values = invited_uid.split(',')
        if len(values) == 1:
            val = values[0]
            items['invited_uid'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['invited_uid_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['invited_uid_end'] = int(val)
        
    if supplier_uid is not None:
        values = supplier_uid.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_uid'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_uid_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_uid_end'] = int(val)
        
    if eqlevel_uid is not None:
        values = eqlevel_uid.split(',')
        if len(values) == 1:
            val = values[0]
            items['eqlevel_uid'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['eqlevel_uid_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['eqlevel_uid_end'] = int(val)
        

    if s_consignee_address is not None:
        search_items['consignee_address'] = '%' + s_consignee_address + '%'
        
    if s_consignee_phone is not None:
        search_items['consignee_phone'] = '%' + s_consignee_phone + '%'
        
    if s_delivery_track_code is not None:
        search_items['delivery_track_code'] = '%' + s_delivery_track_code + '%'
        
    if s_consignee_name is not None:
        search_items['consignee_name'] = '%' + s_consignee_name + '%'
        
    if s_good_name is not None:
        search_items['good_name'] = '%' + s_good_name + '%'
        
    if s_paid_track_code is not None:
        search_items['paid_track_code'] = '%' + s_paid_track_code + '%'
        
    if s_paider_name is not None:
        search_items['paider_name'] = '%' + s_paider_name + '%'
        
    if s_paider_phone is not None:
        search_items['paider_phone'] = '%' + s_paider_phone + '%'
        
    if s_paider_address is not None:
        search_items['paider_address'] = '%' + s_paider_address + '%'
        
    if s_delivery_company is not None:
        search_items['delivery_company'] = '%' + s_delivery_company + '%'
        
    if s_consignee_province is not None:
        search_items['consignee_province'] = '%' + s_consignee_province + '%'
        
    if s_consignee_description is not None:
        search_items['consignee_description'] = '%' + s_consignee_description + '%'
        
    if s_consignee_city is not None:
        search_items['consignee_city'] = '%' + s_consignee_city + '%'
        
    if s_consignee_area is not None:
        search_items['consignee_area'] = '%' + s_consignee_area + '%'
        
    if s_consignee_street is not None:
        search_items['consignee_street'] = '%' + s_consignee_street + '%'
        
    if s_out_trade_no is not None:
        search_items['out_trade_no'] = '%' + s_out_trade_no + '%'
        
    if s_code is not None:
        search_items['code'] = '%' + s_code + '%'
        
    if s_detail is not None:
        search_items['detail'] = '%' + s_detail + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_paider_id is not None:
        values = l_paider_id.split(',')
        values = [int(val) for val in values]
        set_items['paider_id'] = values
        
    if l_sale_price is not None:
        values = l_sale_price.split(',')
        values = [int(val) for val in values]
        set_items['sale_price'] = values
        
    if l_cost_price is not None:
        values = l_cost_price.split(',')
        values = [int(val) for val in values]
        set_items['cost_price'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_paid_time is not None:
        values = l_paid_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['paid_time'] = values
        
    if l_status_id is not None:
        values = l_status_id.split(',')
        values = [int(val) for val in values]
        set_items['status_id'] = values
        
    if l_number is not None:
        values = l_number.split(',')
        values = [int(val) for val in values]
        set_items['number'] = values
        
    if l_consignee_address is not None:
        values = l_consignee_address.split(',')
        values = [val for val in values]
        set_items['consignee_address'] = values
        
    if l_consignee_phone is not None:
        values = l_consignee_phone.split(',')
        values = [val for val in values]
        set_items['consignee_phone'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
        
    if l_paid_amount is not None:
        values = l_paid_amount.split(',')
        values = [int(val) for val in values]
        set_items['paid_amount'] = values
        
    if l_delivery_fee is not None:
        values = l_delivery_fee.split(',')
        values = [int(val) for val in values]
        set_items['delivery_fee'] = values
        
    if l_spec_id is not None:
        values = l_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['spec_id'] = values
        
    if l_paid_coin is not None:
        values = l_paid_coin.split(',')
        values = [int(val) for val in values]
        set_items['paid_coin'] = values
        
    if l_delivery_track_code is not None:
        values = l_delivery_track_code.split(',')
        values = [val for val in values]
        set_items['delivery_track_code'] = values
        
    if l_paid_channel_id is not None:
        values = l_paid_channel_id.split(',')
        values = [int(val) for val in values]
        set_items['paid_channel_id'] = values
        
    if l_consignee_name is not None:
        values = l_consignee_name.split(',')
        values = [val for val in values]
        set_items['consignee_name'] = values
        
    if l_delivery_time is not None:
        values = l_delivery_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['delivery_time'] = values
        
    if l_good_name is not None:
        values = l_good_name.split(',')
        values = [val for val in values]
        set_items['good_name'] = values
        
    if l_paid_track_code is not None:
        values = l_paid_track_code.split(',')
        values = [val for val in values]
        set_items['paid_track_code'] = values
        
    if l_paider_name is not None:
        values = l_paider_name.split(',')
        values = [val for val in values]
        set_items['paider_name'] = values
        
    if l_paider_phone is not None:
        values = l_paider_phone.split(',')
        values = [val for val in values]
        set_items['paider_phone'] = values
        
    if l_paider_address is not None:
        values = l_paider_address.split(',')
        values = [val for val in values]
        set_items['paider_address'] = values
        
    if l_supplier_id is not None:
        values = l_supplier_id.split(',')
        values = [int(val) for val in values]
        set_items['supplier_id'] = values
        
    if l_paid_balance is not None:
        values = l_paid_balance.split(',')
        values = [int(val) for val in values]
        set_items['paid_balance'] = values
        
    if l_paid_lock_balance is not None:
        values = l_paid_lock_balance.split(',')
        values = [int(val) for val in values]
        set_items['paid_lock_balance'] = values
        
    if l_delivery_company is not None:
        values = l_delivery_company.split(',')
        values = [val for val in values]
        set_items['delivery_company'] = values
        
    if l_complete_time is not None:
        values = l_complete_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['complete_time'] = values
        
    if l_use_balance is not None:
        values = l_use_balance.split(',')
        values = [int(val) for val in values]
        set_items['use_balance'] = values
        
    if l_use_coin is not None:
        values = l_use_coin.split(',')
        values = [int(val) for val in values]
        set_items['use_coin'] = values
        
    if l_consignee_province is not None:
        values = l_consignee_province.split(',')
        values = [val for val in values]
        set_items['consignee_province'] = values
        
    if l_consignee_description is not None:
        values = l_consignee_description.split(',')
        values = [val for val in values]
        set_items['consignee_description'] = values
        
    if l_consignee_city is not None:
        values = l_consignee_city.split(',')
        values = [val for val in values]
        set_items['consignee_city'] = values
        
    if l_consignee_area is not None:
        values = l_consignee_area.split(',')
        values = [val for val in values]
        set_items['consignee_area'] = values
        
    if l_consignee_street is not None:
        values = l_consignee_street.split(',')
        values = [val for val in values]
        set_items['consignee_street'] = values
        
    if l_out_trade_no is not None:
        values = l_out_trade_no.split(',')
        values = [val for val in values]
        set_items['out_trade_no'] = values
        
    if l_code is not None:
        values = l_code.split(',')
        values = [val for val in values]
        set_items['code'] = values
        
    if l_code_expired_time is not None:
        values = l_code_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['code_expired_time'] = values
        
    if l_is_display is not None:
        values = l_is_display.split(',')
        values = [int(val) for val in values]
        set_items['is_display'] = values
        
    if l_recommender_id is not None:
        values = l_recommender_id.split(',')
        values = [int(val) for val in values]
        set_items['recommender_id'] = values
        
    if l_detail is not None:
        values = l_detail.split(',')
        values = [val for val in values]
        set_items['detail'] = values
        
    if l_is_assign_income is not None:
        values = l_is_assign_income.split(',')
        values = [int(val) for val in values]
        set_items['is_assign_income'] = values
        
    if l_parent_uid is not None:
        values = l_parent_uid.split(',')
        values = [int(val) for val in values]
        set_items['parent_uid'] = values
        
    if l_top_uid is not None:
        values = l_top_uid.split(',')
        values = [int(val) for val in values]
        set_items['top_uid'] = values
        
    if l_invited_uid is not None:
        values = l_invited_uid.split(',')
        values = [int(val) for val in values]
        set_items['invited_uid'] = values
        
    if l_supplier_uid is not None:
        values = l_supplier_uid.split(',')
        values = [int(val) for val in values]
        set_items['supplier_uid'] = values
        
    if l_eqlevel_uid is not None:
        values = l_eqlevel_uid.split(',')
        values = [int(val) for val in values]
        set_items['eqlevel_uid'] = values
            
    
    data = d_db.filter_order(items, search_items, set_items, page, page_size)
    return FilterResOrder(data=data, total=-1)

    
@router.post(f'/order_batch/create', response_model=SOrderBatch)
async def create_order_batch(item: CreateOrderBatch) -> SOrderBatch:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_order_batch(item)
        
    
@router.post(f'/order_batch/update', response_model=str)
async def update_order_batch(item: SOrderBatch) -> str:
    d_db.update_order_batch(item)
    return "success"

    
@router.get(f'/order_batch/get', response_model=SOrderBatch)
async def get_order_batch(order_batch_id: int) -> SOrderBatch:
    return d_db.get_order_batch(order_batch_id)


@router.get(f'/order_batch/filter', response_model=FilterResOrderBatch)
async def filter_order_batch(
        id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResOrderBatch:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_order_batch(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_order_batch(items, search_items, set_items)
    
    return FilterResOrderBatch(data=data, total=c)


@router.get(f'/order_batch/fast_filter', response_model=FilterResOrderBatch)
async def fast_filter_order_batch(
        id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResOrderBatch:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
            
    
    data = d_db.filter_order_batch(items, search_items, set_items, page, page_size)
    return FilterResOrderBatch(data=data, total=-1)

    
@router.post(f'/order_check/create', response_model=SOrderCheck)
async def create_order_check(item: CreateOrderCheck) -> SOrderCheck:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_order_check(item)
        
    
@router.post(f'/order_check/update', response_model=str)
async def update_order_check(item: SOrderCheck) -> str:
    d_db.update_order_check(item)
    return "success"

    
@router.get(f'/order_check/get', response_model=SOrderCheck)
async def get_order_check(order_check_id: int) -> SOrderCheck:
    return d_db.get_order_check(order_check_id)


@router.get(f'/order_check/filter', response_model=FilterResOrderCheck)
async def filter_order_check(
        id: Optional[str] = None, 
        order_id: Optional[str] = None, 
        check_num: Optional[str] = None, 
        check_time: Optional[str] = None, 
        worker_id: Optional[str] = None, 
        check_amount: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_order_id: Optional[str] = None, 
        l_check_num: Optional[str] = None, 
        l_check_time: Optional[str] = None, 
        l_worker_id: Optional[str] = None, 
        l_check_amount: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResOrderCheck:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if order_id is not None:
        values = order_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['order_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['order_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['order_id_end'] = int(val)
        
    if check_num is not None:
        values = check_num.split(',')
        if len(values) == 1:
            val = values[0]
            items['check_num'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['check_num_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['check_num_end'] = int(val)
        
    if check_time is not None:
        values = check_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['check_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['check_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['check_time_end'] = datetime.fromtimestamp(int(val))
        
    if worker_id is not None:
        values = worker_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['worker_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['worker_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['worker_id_end'] = int(val)
        
    if check_amount is not None:
        values = check_amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['check_amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['check_amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['check_amount_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_order_id is not None:
        values = l_order_id.split(',')
        values = [int(val) for val in values]
        set_items['order_id'] = values
        
    if l_check_num is not None:
        values = l_check_num.split(',')
        values = [int(val) for val in values]
        set_items['check_num'] = values
        
    if l_check_time is not None:
        values = l_check_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['check_time'] = values
        
    if l_worker_id is not None:
        values = l_worker_id.split(',')
        values = [int(val) for val in values]
        set_items['worker_id'] = values
        
    if l_check_amount is not None:
        values = l_check_amount.split(',')
        values = [int(val) for val in values]
        set_items['check_amount'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_order_check(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_order_check(items, search_items, set_items)
    
    return FilterResOrderCheck(data=data, total=c)


@router.get(f'/order_check/fast_filter', response_model=FilterResOrderCheck)
async def fast_filter_order_check(
        id: Optional[str] = None, 
        order_id: Optional[str] = None, 
        check_num: Optional[str] = None, 
        check_time: Optional[str] = None, 
        worker_id: Optional[str] = None, 
        check_amount: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_order_id: Optional[str] = None, 
        l_check_num: Optional[str] = None, 
        l_check_time: Optional[str] = None, 
        l_worker_id: Optional[str] = None, 
        l_check_amount: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResOrderCheck:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if order_id is not None:
        values = order_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['order_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['order_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['order_id_end'] = int(val)
        
    if check_num is not None:
        values = check_num.split(',')
        if len(values) == 1:
            val = values[0]
            items['check_num'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['check_num_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['check_num_end'] = int(val)
        
    if check_time is not None:
        values = check_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['check_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['check_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['check_time_end'] = datetime.fromtimestamp(int(val))
        
    if worker_id is not None:
        values = worker_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['worker_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['worker_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['worker_id_end'] = int(val)
        
    if check_amount is not None:
        values = check_amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['check_amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['check_amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['check_amount_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_order_id is not None:
        values = l_order_id.split(',')
        values = [int(val) for val in values]
        set_items['order_id'] = values
        
    if l_check_num is not None:
        values = l_check_num.split(',')
        values = [int(val) for val in values]
        set_items['check_num'] = values
        
    if l_check_time is not None:
        values = l_check_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['check_time'] = values
        
    if l_worker_id is not None:
        values = l_worker_id.split(',')
        values = [int(val) for val in values]
        set_items['worker_id'] = values
        
    if l_check_amount is not None:
        values = l_check_amount.split(',')
        values = [int(val) for val in values]
        set_items['check_amount'] = values
            
    
    data = d_db.filter_order_check(items, search_items, set_items, page, page_size)
    return FilterResOrderCheck(data=data, total=-1)

    
@router.post(f'/order_return/create', response_model=SOrderReturn)
async def create_order_return(item: CreateOrderReturn) -> SOrderReturn:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_order_return(item)
        
    
@router.post(f'/order_return/update', response_model=str)
async def update_order_return(item: SOrderReturn) -> str:
    d_db.update_order_return(item)
    return "success"

    
@router.get(f'/order_return/get', response_model=SOrderReturn)
async def get_order_return(order_return_id: int) -> SOrderReturn:
    return d_db.get_order_return(order_return_id)


@router.get(f'/order_return/filter', response_model=FilterResOrderReturn)
async def filter_order_return(
        id: Optional[str] = None, 
        returner_name: Optional[str] = None, 
        returner_phone: Optional[str] = None, 
        returner_address: Optional[str] = None, 
        delivery_fee: Optional[str] = None, 
        return_amount: Optional[str] = None, 
        return_submit_time: Optional[str] = None, 
        return_reason: Optional[str] = None, 
        order_id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        return_num: Optional[str] = None, 
        store_id: Optional[str] = None, 
        return_delivery_track_code: Optional[str] = None, 
        status_id: Optional[str] = None, 
        consignee_name: Optional[str] = None, 
        consignee_phone: Optional[str] = None, 
        consignee_address: Optional[str] = None, 
        return_balance: Optional[str] = None, 
        return_lock_balance: Optional[str] = None, 
        return_coin: Optional[str] = None, 
        return_delivery_company: Optional[str] = None, 
        return_paid_track_code: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_returner_name: Optional[str] = None, 
        l_returner_phone: Optional[str] = None, 
        l_returner_address: Optional[str] = None, 
        l_delivery_fee: Optional[str] = None, 
        l_return_amount: Optional[str] = None, 
        l_return_submit_time: Optional[str] = None, 
        l_return_reason: Optional[str] = None, 
        l_order_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_return_num: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        l_return_delivery_track_code: Optional[str] = None, 
        l_status_id: Optional[str] = None, 
        l_consignee_name: Optional[str] = None, 
        l_consignee_phone: Optional[str] = None, 
        l_consignee_address: Optional[str] = None, 
        l_return_balance: Optional[str] = None, 
        l_return_lock_balance: Optional[str] = None, 
        l_return_coin: Optional[str] = None, 
        l_return_delivery_company: Optional[str] = None, 
        l_return_paid_track_code: Optional[str] = None, 
        s_returner_name: Optional[str] = None, 
        s_returner_phone: Optional[str] = None, 
        s_returner_address: Optional[str] = None, 
        s_return_reason: Optional[str] = None, 
        s_return_delivery_track_code: Optional[str] = None, 
        s_consignee_name: Optional[str] = None, 
        s_consignee_phone: Optional[str] = None, 
        s_consignee_address: Optional[str] = None, 
        s_return_delivery_company: Optional[str] = None, 
        s_return_paid_track_code: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResOrderReturn:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if returner_name is not None:
        values = returner_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['returner_name'] = val
        else:
            val = values[0]
            if val != '':
                items['returner_name_start'] = val
            
            val = values[1]
            if val != '':
                items['returner_name_end'] = val
        
    if returner_phone is not None:
        values = returner_phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['returner_phone'] = val
        else:
            val = values[0]
            if val != '':
                items['returner_phone_start'] = val
            
            val = values[1]
            if val != '':
                items['returner_phone_end'] = val
        
    if returner_address is not None:
        values = returner_address.split(',')
        if len(values) == 1:
            val = values[0]
            items['returner_address'] = val
        else:
            val = values[0]
            if val != '':
                items['returner_address_start'] = val
            
            val = values[1]
            if val != '':
                items['returner_address_end'] = val
        
    if delivery_fee is not None:
        values = delivery_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['delivery_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['delivery_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['delivery_fee_end'] = int(val)
        
    if return_amount is not None:
        values = return_amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['return_amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['return_amount_end'] = int(val)
        
    if return_submit_time is not None:
        values = return_submit_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_submit_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['return_submit_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['return_submit_time_end'] = datetime.fromtimestamp(int(val))
        
    if return_reason is not None:
        values = return_reason.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_reason'] = val
        else:
            val = values[0]
            if val != '':
                items['return_reason_start'] = val
            
            val = values[1]
            if val != '':
                items['return_reason_end'] = val
        
    if order_id is not None:
        values = order_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['order_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['order_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['order_id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if return_num is not None:
        values = return_num.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_num'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['return_num_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['return_num_end'] = int(val)
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        
    if return_delivery_track_code is not None:
        values = return_delivery_track_code.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_delivery_track_code'] = val
        else:
            val = values[0]
            if val != '':
                items['return_delivery_track_code_start'] = val
            
            val = values[1]
            if val != '':
                items['return_delivery_track_code_end'] = val
        
    if status_id is not None:
        values = status_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['status_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_id_end'] = int(val)
        
    if consignee_name is not None:
        values = consignee_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_name'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_name_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_name_end'] = val
        
    if consignee_phone is not None:
        values = consignee_phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_phone'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_phone_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_phone_end'] = val
        
    if consignee_address is not None:
        values = consignee_address.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_address'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_address_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_address_end'] = val
        
    if return_balance is not None:
        values = return_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['return_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['return_balance_end'] = int(val)
        
    if return_lock_balance is not None:
        values = return_lock_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_lock_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['return_lock_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['return_lock_balance_end'] = int(val)
        
    if return_coin is not None:
        values = return_coin.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_coin'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['return_coin_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['return_coin_end'] = int(val)
        
    if return_delivery_company is not None:
        values = return_delivery_company.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_delivery_company'] = val
        else:
            val = values[0]
            if val != '':
                items['return_delivery_company_start'] = val
            
            val = values[1]
            if val != '':
                items['return_delivery_company_end'] = val
        
    if return_paid_track_code is not None:
        values = return_paid_track_code.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_paid_track_code'] = val
        else:
            val = values[0]
            if val != '':
                items['return_paid_track_code_start'] = val
            
            val = values[1]
            if val != '':
                items['return_paid_track_code_end'] = val
        

    if s_returner_name is not None:
        search_items['returner_name'] = '%' + s_returner_name + '%'
        
    if s_returner_phone is not None:
        search_items['returner_phone'] = '%' + s_returner_phone + '%'
        
    if s_returner_address is not None:
        search_items['returner_address'] = '%' + s_returner_address + '%'
        
    if s_return_reason is not None:
        search_items['return_reason'] = '%' + s_return_reason + '%'
        
    if s_return_delivery_track_code is not None:
        search_items['return_delivery_track_code'] = '%' + s_return_delivery_track_code + '%'
        
    if s_consignee_name is not None:
        search_items['consignee_name'] = '%' + s_consignee_name + '%'
        
    if s_consignee_phone is not None:
        search_items['consignee_phone'] = '%' + s_consignee_phone + '%'
        
    if s_consignee_address is not None:
        search_items['consignee_address'] = '%' + s_consignee_address + '%'
        
    if s_return_delivery_company is not None:
        search_items['return_delivery_company'] = '%' + s_return_delivery_company + '%'
        
    if s_return_paid_track_code is not None:
        search_items['return_paid_track_code'] = '%' + s_return_paid_track_code + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_returner_name is not None:
        values = l_returner_name.split(',')
        values = [val for val in values]
        set_items['returner_name'] = values
        
    if l_returner_phone is not None:
        values = l_returner_phone.split(',')
        values = [val for val in values]
        set_items['returner_phone'] = values
        
    if l_returner_address is not None:
        values = l_returner_address.split(',')
        values = [val for val in values]
        set_items['returner_address'] = values
        
    if l_delivery_fee is not None:
        values = l_delivery_fee.split(',')
        values = [int(val) for val in values]
        set_items['delivery_fee'] = values
        
    if l_return_amount is not None:
        values = l_return_amount.split(',')
        values = [int(val) for val in values]
        set_items['return_amount'] = values
        
    if l_return_submit_time is not None:
        values = l_return_submit_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['return_submit_time'] = values
        
    if l_return_reason is not None:
        values = l_return_reason.split(',')
        values = [val for val in values]
        set_items['return_reason'] = values
        
    if l_order_id is not None:
        values = l_order_id.split(',')
        values = [int(val) for val in values]
        set_items['order_id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_return_num is not None:
        values = l_return_num.split(',')
        values = [int(val) for val in values]
        set_items['return_num'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
        
    if l_return_delivery_track_code is not None:
        values = l_return_delivery_track_code.split(',')
        values = [val for val in values]
        set_items['return_delivery_track_code'] = values
        
    if l_status_id is not None:
        values = l_status_id.split(',')
        values = [int(val) for val in values]
        set_items['status_id'] = values
        
    if l_consignee_name is not None:
        values = l_consignee_name.split(',')
        values = [val for val in values]
        set_items['consignee_name'] = values
        
    if l_consignee_phone is not None:
        values = l_consignee_phone.split(',')
        values = [val for val in values]
        set_items['consignee_phone'] = values
        
    if l_consignee_address is not None:
        values = l_consignee_address.split(',')
        values = [val for val in values]
        set_items['consignee_address'] = values
        
    if l_return_balance is not None:
        values = l_return_balance.split(',')
        values = [int(val) for val in values]
        set_items['return_balance'] = values
        
    if l_return_lock_balance is not None:
        values = l_return_lock_balance.split(',')
        values = [int(val) for val in values]
        set_items['return_lock_balance'] = values
        
    if l_return_coin is not None:
        values = l_return_coin.split(',')
        values = [int(val) for val in values]
        set_items['return_coin'] = values
        
    if l_return_delivery_company is not None:
        values = l_return_delivery_company.split(',')
        values = [val for val in values]
        set_items['return_delivery_company'] = values
        
    if l_return_paid_track_code is not None:
        values = l_return_paid_track_code.split(',')
        values = [val for val in values]
        set_items['return_paid_track_code'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_order_return(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_order_return(items, search_items, set_items)
    
    return FilterResOrderReturn(data=data, total=c)


@router.get(f'/order_return/fast_filter', response_model=FilterResOrderReturn)
async def fast_filter_order_return(
        id: Optional[str] = None, 
        returner_name: Optional[str] = None, 
        returner_phone: Optional[str] = None, 
        returner_address: Optional[str] = None, 
        delivery_fee: Optional[str] = None, 
        return_amount: Optional[str] = None, 
        return_submit_time: Optional[str] = None, 
        return_reason: Optional[str] = None, 
        order_id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        return_num: Optional[str] = None, 
        store_id: Optional[str] = None, 
        return_delivery_track_code: Optional[str] = None, 
        status_id: Optional[str] = None, 
        consignee_name: Optional[str] = None, 
        consignee_phone: Optional[str] = None, 
        consignee_address: Optional[str] = None, 
        return_balance: Optional[str] = None, 
        return_lock_balance: Optional[str] = None, 
        return_coin: Optional[str] = None, 
        return_delivery_company: Optional[str] = None, 
        return_paid_track_code: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_returner_name: Optional[str] = None, 
        l_returner_phone: Optional[str] = None, 
        l_returner_address: Optional[str] = None, 
        l_delivery_fee: Optional[str] = None, 
        l_return_amount: Optional[str] = None, 
        l_return_submit_time: Optional[str] = None, 
        l_return_reason: Optional[str] = None, 
        l_order_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_return_num: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        l_return_delivery_track_code: Optional[str] = None, 
        l_status_id: Optional[str] = None, 
        l_consignee_name: Optional[str] = None, 
        l_consignee_phone: Optional[str] = None, 
        l_consignee_address: Optional[str] = None, 
        l_return_balance: Optional[str] = None, 
        l_return_lock_balance: Optional[str] = None, 
        l_return_coin: Optional[str] = None, 
        l_return_delivery_company: Optional[str] = None, 
        l_return_paid_track_code: Optional[str] = None, 
        s_returner_name: Optional[str] = None, 
        s_returner_phone: Optional[str] = None, 
        s_returner_address: Optional[str] = None, 
        s_return_reason: Optional[str] = None, 
        s_return_delivery_track_code: Optional[str] = None, 
        s_consignee_name: Optional[str] = None, 
        s_consignee_phone: Optional[str] = None, 
        s_consignee_address: Optional[str] = None, 
        s_return_delivery_company: Optional[str] = None, 
        s_return_paid_track_code: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResOrderReturn:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if returner_name is not None:
        values = returner_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['returner_name'] = val
        else:
            val = values[0]
            if val != '':
                items['returner_name_start'] = val
            
            val = values[1]
            if val != '':
                items['returner_name_end'] = val
        
    if returner_phone is not None:
        values = returner_phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['returner_phone'] = val
        else:
            val = values[0]
            if val != '':
                items['returner_phone_start'] = val
            
            val = values[1]
            if val != '':
                items['returner_phone_end'] = val
        
    if returner_address is not None:
        values = returner_address.split(',')
        if len(values) == 1:
            val = values[0]
            items['returner_address'] = val
        else:
            val = values[0]
            if val != '':
                items['returner_address_start'] = val
            
            val = values[1]
            if val != '':
                items['returner_address_end'] = val
        
    if delivery_fee is not None:
        values = delivery_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['delivery_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['delivery_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['delivery_fee_end'] = int(val)
        
    if return_amount is not None:
        values = return_amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['return_amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['return_amount_end'] = int(val)
        
    if return_submit_time is not None:
        values = return_submit_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_submit_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['return_submit_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['return_submit_time_end'] = datetime.fromtimestamp(int(val))
        
    if return_reason is not None:
        values = return_reason.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_reason'] = val
        else:
            val = values[0]
            if val != '':
                items['return_reason_start'] = val
            
            val = values[1]
            if val != '':
                items['return_reason_end'] = val
        
    if order_id is not None:
        values = order_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['order_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['order_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['order_id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if return_num is not None:
        values = return_num.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_num'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['return_num_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['return_num_end'] = int(val)
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        
    if return_delivery_track_code is not None:
        values = return_delivery_track_code.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_delivery_track_code'] = val
        else:
            val = values[0]
            if val != '':
                items['return_delivery_track_code_start'] = val
            
            val = values[1]
            if val != '':
                items['return_delivery_track_code_end'] = val
        
    if status_id is not None:
        values = status_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['status_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_id_end'] = int(val)
        
    if consignee_name is not None:
        values = consignee_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_name'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_name_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_name_end'] = val
        
    if consignee_phone is not None:
        values = consignee_phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_phone'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_phone_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_phone_end'] = val
        
    if consignee_address is not None:
        values = consignee_address.split(',')
        if len(values) == 1:
            val = values[0]
            items['consignee_address'] = val
        else:
            val = values[0]
            if val != '':
                items['consignee_address_start'] = val
            
            val = values[1]
            if val != '':
                items['consignee_address_end'] = val
        
    if return_balance is not None:
        values = return_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['return_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['return_balance_end'] = int(val)
        
    if return_lock_balance is not None:
        values = return_lock_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_lock_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['return_lock_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['return_lock_balance_end'] = int(val)
        
    if return_coin is not None:
        values = return_coin.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_coin'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['return_coin_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['return_coin_end'] = int(val)
        
    if return_delivery_company is not None:
        values = return_delivery_company.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_delivery_company'] = val
        else:
            val = values[0]
            if val != '':
                items['return_delivery_company_start'] = val
            
            val = values[1]
            if val != '':
                items['return_delivery_company_end'] = val
        
    if return_paid_track_code is not None:
        values = return_paid_track_code.split(',')
        if len(values) == 1:
            val = values[0]
            items['return_paid_track_code'] = val
        else:
            val = values[0]
            if val != '':
                items['return_paid_track_code_start'] = val
            
            val = values[1]
            if val != '':
                items['return_paid_track_code_end'] = val
        

    if s_returner_name is not None:
        search_items['returner_name'] = '%' + s_returner_name + '%'
        
    if s_returner_phone is not None:
        search_items['returner_phone'] = '%' + s_returner_phone + '%'
        
    if s_returner_address is not None:
        search_items['returner_address'] = '%' + s_returner_address + '%'
        
    if s_return_reason is not None:
        search_items['return_reason'] = '%' + s_return_reason + '%'
        
    if s_return_delivery_track_code is not None:
        search_items['return_delivery_track_code'] = '%' + s_return_delivery_track_code + '%'
        
    if s_consignee_name is not None:
        search_items['consignee_name'] = '%' + s_consignee_name + '%'
        
    if s_consignee_phone is not None:
        search_items['consignee_phone'] = '%' + s_consignee_phone + '%'
        
    if s_consignee_address is not None:
        search_items['consignee_address'] = '%' + s_consignee_address + '%'
        
    if s_return_delivery_company is not None:
        search_items['return_delivery_company'] = '%' + s_return_delivery_company + '%'
        
    if s_return_paid_track_code is not None:
        search_items['return_paid_track_code'] = '%' + s_return_paid_track_code + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_returner_name is not None:
        values = l_returner_name.split(',')
        values = [val for val in values]
        set_items['returner_name'] = values
        
    if l_returner_phone is not None:
        values = l_returner_phone.split(',')
        values = [val for val in values]
        set_items['returner_phone'] = values
        
    if l_returner_address is not None:
        values = l_returner_address.split(',')
        values = [val for val in values]
        set_items['returner_address'] = values
        
    if l_delivery_fee is not None:
        values = l_delivery_fee.split(',')
        values = [int(val) for val in values]
        set_items['delivery_fee'] = values
        
    if l_return_amount is not None:
        values = l_return_amount.split(',')
        values = [int(val) for val in values]
        set_items['return_amount'] = values
        
    if l_return_submit_time is not None:
        values = l_return_submit_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['return_submit_time'] = values
        
    if l_return_reason is not None:
        values = l_return_reason.split(',')
        values = [val for val in values]
        set_items['return_reason'] = values
        
    if l_order_id is not None:
        values = l_order_id.split(',')
        values = [int(val) for val in values]
        set_items['order_id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_return_num is not None:
        values = l_return_num.split(',')
        values = [int(val) for val in values]
        set_items['return_num'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
        
    if l_return_delivery_track_code is not None:
        values = l_return_delivery_track_code.split(',')
        values = [val for val in values]
        set_items['return_delivery_track_code'] = values
        
    if l_status_id is not None:
        values = l_status_id.split(',')
        values = [int(val) for val in values]
        set_items['status_id'] = values
        
    if l_consignee_name is not None:
        values = l_consignee_name.split(',')
        values = [val for val in values]
        set_items['consignee_name'] = values
        
    if l_consignee_phone is not None:
        values = l_consignee_phone.split(',')
        values = [val for val in values]
        set_items['consignee_phone'] = values
        
    if l_consignee_address is not None:
        values = l_consignee_address.split(',')
        values = [val for val in values]
        set_items['consignee_address'] = values
        
    if l_return_balance is not None:
        values = l_return_balance.split(',')
        values = [int(val) for val in values]
        set_items['return_balance'] = values
        
    if l_return_lock_balance is not None:
        values = l_return_lock_balance.split(',')
        values = [int(val) for val in values]
        set_items['return_lock_balance'] = values
        
    if l_return_coin is not None:
        values = l_return_coin.split(',')
        values = [int(val) for val in values]
        set_items['return_coin'] = values
        
    if l_return_delivery_company is not None:
        values = l_return_delivery_company.split(',')
        values = [val for val in values]
        set_items['return_delivery_company'] = values
        
    if l_return_paid_track_code is not None:
        values = l_return_paid_track_code.split(',')
        values = [val for val in values]
        set_items['return_paid_track_code'] = values
            
    
    data = d_db.filter_order_return(items, search_items, set_items, page, page_size)
    return FilterResOrderReturn(data=data, total=-1)

    
@router.post(f'/order_return_state/create', response_model=SOrderReturnState)
async def create_order_return_state(item: CreateOrderReturnState) -> SOrderReturnState:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_order_return_state(item)
        
    
@router.post(f'/order_return_state/update', response_model=str)
async def update_order_return_state(item: SOrderReturnState) -> str:
    d_db.update_order_return_state(item)
    return "success"

    
@router.get(f'/order_return_state/get', response_model=SOrderReturnState)
async def get_order_return_state(order_return_state_id: int) -> SOrderReturnState:
    return d_db.get_order_return_state(order_return_state_id)


@router.get(f'/order_return_state/filter', response_model=FilterResOrderReturnState)
async def filter_order_return_state(
        id: Optional[str] = None, 
        state: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_state: Optional[str] = None, 
        s_state: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResOrderReturnState:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if state is not None:
        values = state.split(',')
        if len(values) == 1:
            val = values[0]
            items['state'] = val
        else:
            val = values[0]
            if val != '':
                items['state_start'] = val
            
            val = values[1]
            if val != '':
                items['state_end'] = val
        

    if s_state is not None:
        search_items['state'] = '%' + s_state + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_state is not None:
        values = l_state.split(',')
        values = [val for val in values]
        set_items['state'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_order_return_state(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_order_return_state(items, search_items, set_items)
    
    return FilterResOrderReturnState(data=data, total=c)


@router.get(f'/order_return_state/fast_filter', response_model=FilterResOrderReturnState)
async def fast_filter_order_return_state(
        id: Optional[str] = None, 
        state: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_state: Optional[str] = None, 
        s_state: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResOrderReturnState:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if state is not None:
        values = state.split(',')
        if len(values) == 1:
            val = values[0]
            items['state'] = val
        else:
            val = values[0]
            if val != '':
                items['state_start'] = val
            
            val = values[1]
            if val != '':
                items['state_end'] = val
        

    if s_state is not None:
        search_items['state'] = '%' + s_state + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_state is not None:
        values = l_state.split(',')
        values = [val for val in values]
        set_items['state'] = values
            
    
    data = d_db.filter_order_return_state(items, search_items, set_items, page, page_size)
    return FilterResOrderReturnState(data=data, total=-1)

    
@router.post(f'/order_return_type/create', response_model=SOrderReturnType)
async def create_order_return_type(item: CreateOrderReturnType) -> SOrderReturnType:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_order_return_type(item)
        
    
@router.post(f'/order_return_type/update', response_model=str)
async def update_order_return_type(item: SOrderReturnType) -> str:
    d_db.update_order_return_type(item)
    return "success"

    
@router.get(f'/order_return_type/get', response_model=SOrderReturnType)
async def get_order_return_type(order_return_type_id: int) -> SOrderReturnType:
    return d_db.get_order_return_type(order_return_type_id)


@router.get(f'/order_return_type/filter', response_model=FilterResOrderReturnType)
async def filter_order_return_type(
        id: Optional[str] = None, 
        type: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        s_type: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResOrderReturnType:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_order_return_type(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_order_return_type(items, search_items, set_items)
    
    return FilterResOrderReturnType(data=data, total=c)


@router.get(f'/order_return_type/fast_filter', response_model=FilterResOrderReturnType)
async def fast_filter_order_return_type(
        id: Optional[str] = None, 
        type: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        s_type: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResOrderReturnType:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
            
    
    data = d_db.filter_order_return_type(items, search_items, set_items, page, page_size)
    return FilterResOrderReturnType(data=data, total=-1)

    
@router.post(f'/order_source/create', response_model=SOrderSource)
async def create_order_source(item: CreateOrderSource) -> SOrderSource:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_order_source(item)
        
    
@router.post(f'/order_source/update', response_model=str)
async def update_order_source(item: SOrderSource) -> str:
    d_db.update_order_source(item)
    return "success"

    
@router.get(f'/order_source/get', response_model=SOrderSource)
async def get_order_source(order_source_id: int) -> SOrderSource:
    return d_db.get_order_source(order_source_id)


@router.get(f'/order_source/filter', response_model=FilterResOrderSource)
async def filter_order_source(
        id: Optional[str] = None, 
        order_id: Optional[str] = None, 
        source_id: Optional[str] = None, 
        amount: Optional[str] = None, 
        create_time: Optional[str] = None, 
        order_user_id: Optional[str] = None, 
        package_user_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_order_id: Optional[str] = None, 
        l_source_id: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_order_user_id: Optional[str] = None, 
        l_package_user_id: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResOrderSource:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if order_id is not None:
        values = order_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['order_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['order_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['order_id_end'] = int(val)
        
    if source_id is not None:
        values = source_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['source_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['source_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['source_id_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if order_user_id is not None:
        values = order_user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['order_user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['order_user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['order_user_id_end'] = int(val)
        
    if package_user_id is not None:
        values = package_user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['package_user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['package_user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['package_user_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_order_id is not None:
        values = l_order_id.split(',')
        values = [int(val) for val in values]
        set_items['order_id'] = values
        
    if l_source_id is not None:
        values = l_source_id.split(',')
        values = [int(val) for val in values]
        set_items['source_id'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_order_user_id is not None:
        values = l_order_user_id.split(',')
        values = [int(val) for val in values]
        set_items['order_user_id'] = values
        
    if l_package_user_id is not None:
        values = l_package_user_id.split(',')
        values = [int(val) for val in values]
        set_items['package_user_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_order_source(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_order_source(items, search_items, set_items)
    
    return FilterResOrderSource(data=data, total=c)


@router.get(f'/order_source/fast_filter', response_model=FilterResOrderSource)
async def fast_filter_order_source(
        id: Optional[str] = None, 
        order_id: Optional[str] = None, 
        source_id: Optional[str] = None, 
        amount: Optional[str] = None, 
        create_time: Optional[str] = None, 
        order_user_id: Optional[str] = None, 
        package_user_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_order_id: Optional[str] = None, 
        l_source_id: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_order_user_id: Optional[str] = None, 
        l_package_user_id: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResOrderSource:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if order_id is not None:
        values = order_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['order_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['order_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['order_id_end'] = int(val)
        
    if source_id is not None:
        values = source_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['source_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['source_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['source_id_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if order_user_id is not None:
        values = order_user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['order_user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['order_user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['order_user_id_end'] = int(val)
        
    if package_user_id is not None:
        values = package_user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['package_user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['package_user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['package_user_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_order_id is not None:
        values = l_order_id.split(',')
        values = [int(val) for val in values]
        set_items['order_id'] = values
        
    if l_source_id is not None:
        values = l_source_id.split(',')
        values = [int(val) for val in values]
        set_items['source_id'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_order_user_id is not None:
        values = l_order_user_id.split(',')
        values = [int(val) for val in values]
        set_items['order_user_id'] = values
        
    if l_package_user_id is not None:
        values = l_package_user_id.split(',')
        values = [int(val) for val in values]
        set_items['package_user_id'] = values
            
    
    data = d_db.filter_order_source(items, search_items, set_items, page, page_size)
    return FilterResOrderSource(data=data, total=-1)

    
@router.post(f'/order_state/create', response_model=SOrderState)
async def create_order_state(item: CreateOrderState) -> SOrderState:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_order_state(item)
        
    
@router.post(f'/order_state/update', response_model=str)
async def update_order_state(item: SOrderState) -> str:
    d_db.update_order_state(item)
    return "success"

    
@router.get(f'/order_state/get', response_model=SOrderState)
async def get_order_state(order_state_id: int) -> SOrderState:
    return d_db.get_order_state(order_state_id)


@router.get(f'/order_state/filter', response_model=FilterResOrderState)
async def filter_order_state(
        id: Optional[str] = None, 
        state: Optional[str] = None, 
        belong: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_state: Optional[str] = None, 
        l_belong: Optional[str] = None, 
        s_state: Optional[str] = None, 
        s_belong: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResOrderState:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if state is not None:
        values = state.split(',')
        if len(values) == 1:
            val = values[0]
            items['state'] = val
        else:
            val = values[0]
            if val != '':
                items['state_start'] = val
            
            val = values[1]
            if val != '':
                items['state_end'] = val
        
    if belong is not None:
        values = belong.split(',')
        if len(values) == 1:
            val = values[0]
            items['belong'] = val
        else:
            val = values[0]
            if val != '':
                items['belong_start'] = val
            
            val = values[1]
            if val != '':
                items['belong_end'] = val
        

    if s_state is not None:
        search_items['state'] = '%' + s_state + '%'
        
    if s_belong is not None:
        search_items['belong'] = '%' + s_belong + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_state is not None:
        values = l_state.split(',')
        values = [val for val in values]
        set_items['state'] = values
        
    if l_belong is not None:
        values = l_belong.split(',')
        values = [val for val in values]
        set_items['belong'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_order_state(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_order_state(items, search_items, set_items)
    
    return FilterResOrderState(data=data, total=c)


@router.get(f'/order_state/fast_filter', response_model=FilterResOrderState)
async def fast_filter_order_state(
        id: Optional[str] = None, 
        state: Optional[str] = None, 
        belong: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_state: Optional[str] = None, 
        l_belong: Optional[str] = None, 
        s_state: Optional[str] = None, 
        s_belong: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResOrderState:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if state is not None:
        values = state.split(',')
        if len(values) == 1:
            val = values[0]
            items['state'] = val
        else:
            val = values[0]
            if val != '':
                items['state_start'] = val
            
            val = values[1]
            if val != '':
                items['state_end'] = val
        
    if belong is not None:
        values = belong.split(',')
        if len(values) == 1:
            val = values[0]
            items['belong'] = val
        else:
            val = values[0]
            if val != '':
                items['belong_start'] = val
            
            val = values[1]
            if val != '':
                items['belong_end'] = val
        

    if s_state is not None:
        search_items['state'] = '%' + s_state + '%'
        
    if s_belong is not None:
        search_items['belong'] = '%' + s_belong + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_state is not None:
        values = l_state.split(',')
        values = [val for val in values]
        set_items['state'] = values
        
    if l_belong is not None:
        values = l_belong.split(',')
        values = [val for val in values]
        set_items['belong'] = values
            
    
    data = d_db.filter_order_state(items, search_items, set_items, page, page_size)
    return FilterResOrderState(data=data, total=-1)

    
@router.post(f'/package/create', response_model=SPackage)
async def create_package(item: CreatePackage) -> SPackage:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_package(item)
        
    
@router.post(f'/package/update', response_model=str)
async def update_package(item: SPackage) -> str:
    d_db.update_package(item)
    return "success"

    
@router.get(f'/package/get', response_model=SPackage)
async def get_package(package_id: int) -> SPackage:
    return d_db.get_package(package_id)


@router.get(f'/package/filter', response_model=FilterResPackage)
async def filter_package(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        amount: Optional[str] = None, 
        flash_sale_price: Optional[str] = None, 
        num: Optional[str] = None, 
        stock: Optional[str] = None, 
        seller_id: Optional[str] = None, 
        spec_id: Optional[str] = None, 
        share_fee: Optional[str] = None, 
        status: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_flash_sale_price: Optional[str] = None, 
        l_num: Optional[str] = None, 
        l_stock: Optional[str] = None, 
        l_seller_id: Optional[str] = None, 
        l_spec_id: Optional[str] = None, 
        l_share_fee: Optional[str] = None, 
        l_status: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPackage:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if flash_sale_price is not None:
        values = flash_sale_price.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_sale_price'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_sale_price_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_sale_price_end'] = int(val)
        
    if num is not None:
        values = num.split(',')
        if len(values) == 1:
            val = values[0]
            items['num'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['num_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['num_end'] = int(val)
        
    if stock is not None:
        values = stock.split(',')
        if len(values) == 1:
            val = values[0]
            items['stock'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['stock_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['stock_end'] = int(val)
        
    if seller_id is not None:
        values = seller_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['seller_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['seller_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['seller_id_end'] = int(val)
        
    if spec_id is not None:
        values = spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['spec_id_end'] = int(val)
        
    if share_fee is not None:
        values = share_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['share_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['share_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['share_fee_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_flash_sale_price is not None:
        values = l_flash_sale_price.split(',')
        values = [int(val) for val in values]
        set_items['flash_sale_price'] = values
        
    if l_num is not None:
        values = l_num.split(',')
        values = [int(val) for val in values]
        set_items['num'] = values
        
    if l_stock is not None:
        values = l_stock.split(',')
        values = [int(val) for val in values]
        set_items['stock'] = values
        
    if l_seller_id is not None:
        values = l_seller_id.split(',')
        values = [int(val) for val in values]
        set_items['seller_id'] = values
        
    if l_spec_id is not None:
        values = l_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['spec_id'] = values
        
    if l_share_fee is not None:
        values = l_share_fee.split(',')
        values = [int(val) for val in values]
        set_items['share_fee'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_package(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_package(items, search_items, set_items)
    
    return FilterResPackage(data=data, total=c)


@router.get(f'/package/fast_filter', response_model=FilterResPackage)
async def fast_filter_package(
        id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        amount: Optional[str] = None, 
        flash_sale_price: Optional[str] = None, 
        num: Optional[str] = None, 
        stock: Optional[str] = None, 
        seller_id: Optional[str] = None, 
        spec_id: Optional[str] = None, 
        share_fee: Optional[str] = None, 
        status: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_flash_sale_price: Optional[str] = None, 
        l_num: Optional[str] = None, 
        l_stock: Optional[str] = None, 
        l_seller_id: Optional[str] = None, 
        l_spec_id: Optional[str] = None, 
        l_share_fee: Optional[str] = None, 
        l_status: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResPackage:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if flash_sale_price is not None:
        values = flash_sale_price.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_sale_price'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_sale_price_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_sale_price_end'] = int(val)
        
    if num is not None:
        values = num.split(',')
        if len(values) == 1:
            val = values[0]
            items['num'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['num_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['num_end'] = int(val)
        
    if stock is not None:
        values = stock.split(',')
        if len(values) == 1:
            val = values[0]
            items['stock'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['stock_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['stock_end'] = int(val)
        
    if seller_id is not None:
        values = seller_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['seller_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['seller_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['seller_id_end'] = int(val)
        
    if spec_id is not None:
        values = spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['spec_id_end'] = int(val)
        
    if share_fee is not None:
        values = share_fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['share_fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['share_fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['share_fee_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_flash_sale_price is not None:
        values = l_flash_sale_price.split(',')
        values = [int(val) for val in values]
        set_items['flash_sale_price'] = values
        
    if l_num is not None:
        values = l_num.split(',')
        values = [int(val) for val in values]
        set_items['num'] = values
        
    if l_stock is not None:
        values = l_stock.split(',')
        values = [int(val) for val in values]
        set_items['stock'] = values
        
    if l_seller_id is not None:
        values = l_seller_id.split(',')
        values = [int(val) for val in values]
        set_items['seller_id'] = values
        
    if l_spec_id is not None:
        values = l_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['spec_id'] = values
        
    if l_share_fee is not None:
        values = l_share_fee.split(',')
        values = [int(val) for val in values]
        set_items['share_fee'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
            
    
    data = d_db.filter_package(items, search_items, set_items, page, page_size)
    return FilterResPackage(data=data, total=-1)

    
@router.post(f'/package_express/create', response_model=SPackageExpress)
async def create_package_express(item: CreatePackageExpress) -> SPackageExpress:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_package_express(item)
        
    
@router.post(f'/package_express/update', response_model=str)
async def update_package_express(item: SPackageExpress) -> str:
    d_db.update_package_express(item)
    return "success"

    
@router.get(f'/package_express/get', response_model=SPackageExpress)
async def get_package_express(package_express_id: int) -> SPackageExpress:
    return d_db.get_package_express(package_express_id)


@router.get(f'/package_express/filter', response_model=FilterResPackageExpress)
async def filter_package_express(
        id: Optional[str] = None, 
        flash_order_id: Optional[str] = None, 
        status: Optional[str] = None, 
        address_id: Optional[str] = None, 
        amount: Optional[str] = None, 
        express_num: Optional[str] = None, 
        apply_time: Optional[str] = None, 
        delivery_time: Optional[str] = None, 
        complete_time: Optional[str] = None, 
        detail: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_flash_order_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_address_id: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_express_num: Optional[str] = None, 
        l_apply_time: Optional[str] = None, 
        l_delivery_time: Optional[str] = None, 
        l_complete_time: Optional[str] = None, 
        l_detail: Optional[str] = None, 
        s_express_num: Optional[str] = None, 
        s_detail: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPackageExpress:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if flash_order_id is not None:
        values = flash_order_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_order_id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if address_id is not None:
        values = address_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['address_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['address_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['address_id_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if express_num is not None:
        values = express_num.split(',')
        if len(values) == 1:
            val = values[0]
            items['express_num'] = val
        else:
            val = values[0]
            if val != '':
                items['express_num_start'] = val
            
            val = values[1]
            if val != '':
                items['express_num_end'] = val
        
    if apply_time is not None:
        values = apply_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['apply_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['apply_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['apply_time_end'] = datetime.fromtimestamp(int(val))
        
    if delivery_time is not None:
        values = delivery_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['delivery_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['delivery_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['delivery_time_end'] = datetime.fromtimestamp(int(val))
        
    if complete_time is not None:
        values = complete_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['complete_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['complete_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['complete_time_end'] = datetime.fromtimestamp(int(val))
        
    if detail is not None:
        values = detail.split(',')
        if len(values) == 1:
            val = values[0]
            items['detail'] = val
        else:
            val = values[0]
            if val != '':
                items['detail_start'] = val
            
            val = values[1]
            if val != '':
                items['detail_end'] = val
        

    if s_express_num is not None:
        search_items['express_num'] = '%' + s_express_num + '%'
        
    if s_detail is not None:
        search_items['detail'] = '%' + s_detail + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_flash_order_id is not None:
        values = l_flash_order_id.split(',')
        values = [int(val) for val in values]
        set_items['flash_order_id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_address_id is not None:
        values = l_address_id.split(',')
        values = [int(val) for val in values]
        set_items['address_id'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_express_num is not None:
        values = l_express_num.split(',')
        values = [val for val in values]
        set_items['express_num'] = values
        
    if l_apply_time is not None:
        values = l_apply_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['apply_time'] = values
        
    if l_delivery_time is not None:
        values = l_delivery_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['delivery_time'] = values
        
    if l_complete_time is not None:
        values = l_complete_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['complete_time'] = values
        
    if l_detail is not None:
        values = l_detail.split(',')
        values = [val for val in values]
        set_items['detail'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_package_express(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_package_express(items, search_items, set_items)
    
    return FilterResPackageExpress(data=data, total=c)


@router.get(f'/package_express/fast_filter', response_model=FilterResPackageExpress)
async def fast_filter_package_express(
        id: Optional[str] = None, 
        flash_order_id: Optional[str] = None, 
        status: Optional[str] = None, 
        address_id: Optional[str] = None, 
        amount: Optional[str] = None, 
        express_num: Optional[str] = None, 
        apply_time: Optional[str] = None, 
        delivery_time: Optional[str] = None, 
        complete_time: Optional[str] = None, 
        detail: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_flash_order_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_address_id: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_express_num: Optional[str] = None, 
        l_apply_time: Optional[str] = None, 
        l_delivery_time: Optional[str] = None, 
        l_complete_time: Optional[str] = None, 
        l_detail: Optional[str] = None, 
        s_express_num: Optional[str] = None, 
        s_detail: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPackageExpress:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if flash_order_id is not None:
        values = flash_order_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_order_id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if address_id is not None:
        values = address_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['address_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['address_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['address_id_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if express_num is not None:
        values = express_num.split(',')
        if len(values) == 1:
            val = values[0]
            items['express_num'] = val
        else:
            val = values[0]
            if val != '':
                items['express_num_start'] = val
            
            val = values[1]
            if val != '':
                items['express_num_end'] = val
        
    if apply_time is not None:
        values = apply_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['apply_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['apply_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['apply_time_end'] = datetime.fromtimestamp(int(val))
        
    if delivery_time is not None:
        values = delivery_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['delivery_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['delivery_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['delivery_time_end'] = datetime.fromtimestamp(int(val))
        
    if complete_time is not None:
        values = complete_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['complete_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['complete_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['complete_time_end'] = datetime.fromtimestamp(int(val))
        
    if detail is not None:
        values = detail.split(',')
        if len(values) == 1:
            val = values[0]
            items['detail'] = val
        else:
            val = values[0]
            if val != '':
                items['detail_start'] = val
            
            val = values[1]
            if val != '':
                items['detail_end'] = val
        

    if s_express_num is not None:
        search_items['express_num'] = '%' + s_express_num + '%'
        
    if s_detail is not None:
        search_items['detail'] = '%' + s_detail + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_flash_order_id is not None:
        values = l_flash_order_id.split(',')
        values = [int(val) for val in values]
        set_items['flash_order_id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_address_id is not None:
        values = l_address_id.split(',')
        values = [int(val) for val in values]
        set_items['address_id'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_express_num is not None:
        values = l_express_num.split(',')
        values = [val for val in values]
        set_items['express_num'] = values
        
    if l_apply_time is not None:
        values = l_apply_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['apply_time'] = values
        
    if l_delivery_time is not None:
        values = l_delivery_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['delivery_time'] = values
        
    if l_complete_time is not None:
        values = l_complete_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['complete_time'] = values
        
    if l_detail is not None:
        values = l_detail.split(',')
        values = [val for val in values]
        set_items['detail'] = values
            
    
    data = d_db.filter_package_express(items, search_items, set_items, page, page_size)
    return FilterResPackageExpress(data=data, total=-1)

    
@router.post(f'/package_express_status/create', response_model=SPackageExpressStatus)
async def create_package_express_status(item: CreatePackageExpressStatus) -> SPackageExpressStatus:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_package_express_status(item)
        
    
@router.post(f'/package_express_status/update', response_model=str)
async def update_package_express_status(item: SPackageExpressStatus) -> str:
    d_db.update_package_express_status(item)
    return "success"

    
@router.get(f'/package_express_status/get', response_model=SPackageExpressStatus)
async def get_package_express_status(package_express_status_id: int) -> SPackageExpressStatus:
    return d_db.get_package_express_status(package_express_status_id)


@router.get(f'/package_express_status/filter', response_model=FilterResPackageExpressStatus)
async def filter_package_express_status(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPackageExpressStatus:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_package_express_status(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_package_express_status(items, search_items, set_items)
    
    return FilterResPackageExpressStatus(data=data, total=c)


@router.get(f'/package_express_status/fast_filter', response_model=FilterResPackageExpressStatus)
async def fast_filter_package_express_status(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPackageExpressStatus:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    data = d_db.filter_package_express_status(items, search_items, set_items, page, page_size)
    return FilterResPackageExpressStatus(data=data, total=-1)

    
@router.post(f'/package_time/create', response_model=SPackageTime)
async def create_package_time(item: CreatePackageTime) -> SPackageTime:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_package_time(item)
        
    
@router.post(f'/package_time/update', response_model=str)
async def update_package_time(item: SPackageTime) -> str:
    d_db.update_package_time(item)
    return "success"

    
@router.get(f'/package_time/get', response_model=SPackageTime)
async def get_package_time(package_time_id: int) -> SPackageTime:
    return d_db.get_package_time(package_time_id)


@router.get(f'/package_time/filter', response_model=FilterResPackageTime)
async def filter_package_time(
        id: Optional[str] = None, 
        start_time: Optional[str] = None, 
        end_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_start_time: Optional[str] = None, 
        l_end_time: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPackageTime:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if start_time is not None:
        values = start_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['start_time'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['start_time_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['start_time_end'] = int(val)
        
    if end_time is not None:
        values = end_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['end_time'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['end_time_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['end_time_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_start_time is not None:
        values = l_start_time.split(',')
        values = [int(val) for val in values]
        set_items['start_time'] = values
        
    if l_end_time is not None:
        values = l_end_time.split(',')
        values = [int(val) for val in values]
        set_items['end_time'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_package_time(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_package_time(items, search_items, set_items)
    
    return FilterResPackageTime(data=data, total=c)


@router.get(f'/package_time/fast_filter', response_model=FilterResPackageTime)
async def fast_filter_package_time(
        id: Optional[str] = None, 
        start_time: Optional[str] = None, 
        end_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_start_time: Optional[str] = None, 
        l_end_time: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResPackageTime:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if start_time is not None:
        values = start_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['start_time'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['start_time_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['start_time_end'] = int(val)
        
    if end_time is not None:
        values = end_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['end_time'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['end_time_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['end_time_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_start_time is not None:
        values = l_start_time.split(',')
        values = [int(val) for val in values]
        set_items['start_time'] = values
        
    if l_end_time is not None:
        values = l_end_time.split(',')
        values = [int(val) for val in values]
        set_items['end_time'] = values
            
    
    data = d_db.filter_package_time(items, search_items, set_items, page, page_size)
    return FilterResPackageTime(data=data, total=-1)

    
@router.post(f'/package_time_pair/create', response_model=SPackageTimePair)
async def create_package_time_pair(item: CreatePackageTimePair) -> SPackageTimePair:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_package_time_pair(item)
        
    
@router.post(f'/package_time_pair/update', response_model=str)
async def update_package_time_pair(item: SPackageTimePair) -> str:
    d_db.update_package_time_pair(item)
    return "success"

    
@router.get(f'/package_time_pair/get', response_model=SPackageTimePair)
async def get_package_time_pair(package_time_pair_id: int) -> SPackageTimePair:
    return d_db.get_package_time_pair(package_time_pair_id)


@router.get(f'/package_time_pair/filter', response_model=FilterResPackageTimePair)
async def filter_package_time_pair(
        id: Optional[str] = None, 
        package_id: Optional[str] = None, 
        package_time_id: Optional[str] = None, 
        status: Optional[str] = None, 
        package_num: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_package_id: Optional[str] = None, 
        l_package_time_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_package_num: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPackageTimePair:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if package_id is not None:
        values = package_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['package_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['package_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['package_id_end'] = int(val)
        
    if package_time_id is not None:
        values = package_time_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['package_time_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['package_time_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['package_time_id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if package_num is not None:
        values = package_num.split(',')
        if len(values) == 1:
            val = values[0]
            items['package_num'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['package_num_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['package_num_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_package_id is not None:
        values = l_package_id.split(',')
        values = [int(val) for val in values]
        set_items['package_id'] = values
        
    if l_package_time_id is not None:
        values = l_package_time_id.split(',')
        values = [int(val) for val in values]
        set_items['package_time_id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_package_num is not None:
        values = l_package_num.split(',')
        values = [int(val) for val in values]
        set_items['package_num'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_package_time_pair(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_package_time_pair(items, search_items, set_items)
    
    return FilterResPackageTimePair(data=data, total=c)


@router.get(f'/package_time_pair/fast_filter', response_model=FilterResPackageTimePair)
async def fast_filter_package_time_pair(
        id: Optional[str] = None, 
        package_id: Optional[str] = None, 
        package_time_id: Optional[str] = None, 
        status: Optional[str] = None, 
        package_num: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_package_id: Optional[str] = None, 
        l_package_time_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_package_num: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResPackageTimePair:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if package_id is not None:
        values = package_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['package_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['package_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['package_id_end'] = int(val)
        
    if package_time_id is not None:
        values = package_time_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['package_time_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['package_time_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['package_time_id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if package_num is not None:
        values = package_num.split(',')
        if len(values) == 1:
            val = values[0]
            items['package_num'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['package_num_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['package_num_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_package_id is not None:
        values = l_package_id.split(',')
        values = [int(val) for val in values]
        set_items['package_id'] = values
        
    if l_package_time_id is not None:
        values = l_package_time_id.split(',')
        values = [int(val) for val in values]
        set_items['package_time_id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_package_num is not None:
        values = l_package_num.split(',')
        values = [int(val) for val in values]
        set_items['package_num'] = values
            
    
    data = d_db.filter_package_time_pair(items, search_items, set_items, page, page_size)
    return FilterResPackageTimePair(data=data, total=-1)

    
@router.post(f'/pay_channel/create', response_model=SPayChannel)
async def create_pay_channel(item: CreatePayChannel) -> SPayChannel:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_pay_channel(item)
        
    
@router.post(f'/pay_channel/update', response_model=str)
async def update_pay_channel(item: SPayChannel) -> str:
    d_db.update_pay_channel(item)
    return "success"

    
@router.get(f'/pay_channel/get', response_model=SPayChannel)
async def get_pay_channel(pay_channel_id: int) -> SPayChannel:
    return d_db.get_pay_channel(pay_channel_id)


@router.get(f'/pay_channel/filter', response_model=FilterResPayChannel)
async def filter_pay_channel(
        id: Optional[str] = None, 
        type: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        s_type: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPayChannel:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_pay_channel(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_pay_channel(items, search_items, set_items)
    
    return FilterResPayChannel(data=data, total=c)


@router.get(f'/pay_channel/fast_filter', response_model=FilterResPayChannel)
async def fast_filter_pay_channel(
        id: Optional[str] = None, 
        type: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        s_type: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPayChannel:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
            
    
    data = d_db.filter_pay_channel(items, search_items, set_items, page, page_size)
    return FilterResPayChannel(data=data, total=-1)

    
@router.post(f'/platform_law/create', response_model=SPlatformLaw)
async def create_platform_law(item: CreatePlatformLaw) -> SPlatformLaw:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_platform_law(item)
        
    
@router.post(f'/platform_law/update', response_model=str)
async def update_platform_law(item: SPlatformLaw) -> str:
    d_db.update_platform_law(item)
    return "success"

    
@router.get(f'/platform_law/get', response_model=SPlatformLaw)
async def get_platform_law(platform_law_id: int) -> SPlatformLaw:
    return d_db.get_platform_law(platform_law_id)


@router.get(f'/platform_law/filter', response_model=FilterResPlatformLaw)
async def filter_platform_law(
        id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        admin_id: Optional[str] = None, 
        law: Optional[str] = None, 
        privacy: Optional[str] = None, 
        purchase: Optional[str] = None, 
        flash_law: Optional[str] = None, 
        withdraw_law: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_admin_id: Optional[str] = None, 
        l_law: Optional[str] = None, 
        l_privacy: Optional[str] = None, 
        l_purchase: Optional[str] = None, 
        l_flash_law: Optional[str] = None, 
        l_withdraw_law: Optional[str] = None, 
        s_law: Optional[str] = None, 
        s_privacy: Optional[str] = None, 
        s_purchase: Optional[str] = None, 
        s_flash_law: Optional[str] = None, 
        s_withdraw_law: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPlatformLaw:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if admin_id is not None:
        values = admin_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['admin_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['admin_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['admin_id_end'] = int(val)
        
    if law is not None:
        values = law.split(',')
        if len(values) == 1:
            val = values[0]
            items['law'] = val
        else:
            val = values[0]
            if val != '':
                items['law_start'] = val
            
            val = values[1]
            if val != '':
                items['law_end'] = val
        
    if privacy is not None:
        values = privacy.split(',')
        if len(values) == 1:
            val = values[0]
            items['privacy'] = val
        else:
            val = values[0]
            if val != '':
                items['privacy_start'] = val
            
            val = values[1]
            if val != '':
                items['privacy_end'] = val
        
    if purchase is not None:
        values = purchase.split(',')
        if len(values) == 1:
            val = values[0]
            items['purchase'] = val
        else:
            val = values[0]
            if val != '':
                items['purchase_start'] = val
            
            val = values[1]
            if val != '':
                items['purchase_end'] = val
        
    if flash_law is not None:
        values = flash_law.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_law'] = val
        else:
            val = values[0]
            if val != '':
                items['flash_law_start'] = val
            
            val = values[1]
            if val != '':
                items['flash_law_end'] = val
        
    if withdraw_law is not None:
        values = withdraw_law.split(',')
        if len(values) == 1:
            val = values[0]
            items['withdraw_law'] = val
        else:
            val = values[0]
            if val != '':
                items['withdraw_law_start'] = val
            
            val = values[1]
            if val != '':
                items['withdraw_law_end'] = val
        

    if s_law is not None:
        search_items['law'] = '%' + s_law + '%'
        
    if s_privacy is not None:
        search_items['privacy'] = '%' + s_privacy + '%'
        
    if s_purchase is not None:
        search_items['purchase'] = '%' + s_purchase + '%'
        
    if s_flash_law is not None:
        search_items['flash_law'] = '%' + s_flash_law + '%'
        
    if s_withdraw_law is not None:
        search_items['withdraw_law'] = '%' + s_withdraw_law + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_admin_id is not None:
        values = l_admin_id.split(',')
        values = [int(val) for val in values]
        set_items['admin_id'] = values
        
    if l_law is not None:
        values = l_law.split(',')
        values = [val for val in values]
        set_items['law'] = values
        
    if l_privacy is not None:
        values = l_privacy.split(',')
        values = [val for val in values]
        set_items['privacy'] = values
        
    if l_purchase is not None:
        values = l_purchase.split(',')
        values = [val for val in values]
        set_items['purchase'] = values
        
    if l_flash_law is not None:
        values = l_flash_law.split(',')
        values = [val for val in values]
        set_items['flash_law'] = values
        
    if l_withdraw_law is not None:
        values = l_withdraw_law.split(',')
        values = [val for val in values]
        set_items['withdraw_law'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_platform_law(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_platform_law(items, search_items, set_items)
    
    return FilterResPlatformLaw(data=data, total=c)


@router.get(f'/platform_law/fast_filter', response_model=FilterResPlatformLaw)
async def fast_filter_platform_law(
        id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        admin_id: Optional[str] = None, 
        law: Optional[str] = None, 
        privacy: Optional[str] = None, 
        purchase: Optional[str] = None, 
        flash_law: Optional[str] = None, 
        withdraw_law: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_admin_id: Optional[str] = None, 
        l_law: Optional[str] = None, 
        l_privacy: Optional[str] = None, 
        l_purchase: Optional[str] = None, 
        l_flash_law: Optional[str] = None, 
        l_withdraw_law: Optional[str] = None, 
        s_law: Optional[str] = None, 
        s_privacy: Optional[str] = None, 
        s_purchase: Optional[str] = None, 
        s_flash_law: Optional[str] = None, 
        s_withdraw_law: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPlatformLaw:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if admin_id is not None:
        values = admin_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['admin_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['admin_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['admin_id_end'] = int(val)
        
    if law is not None:
        values = law.split(',')
        if len(values) == 1:
            val = values[0]
            items['law'] = val
        else:
            val = values[0]
            if val != '':
                items['law_start'] = val
            
            val = values[1]
            if val != '':
                items['law_end'] = val
        
    if privacy is not None:
        values = privacy.split(',')
        if len(values) == 1:
            val = values[0]
            items['privacy'] = val
        else:
            val = values[0]
            if val != '':
                items['privacy_start'] = val
            
            val = values[1]
            if val != '':
                items['privacy_end'] = val
        
    if purchase is not None:
        values = purchase.split(',')
        if len(values) == 1:
            val = values[0]
            items['purchase'] = val
        else:
            val = values[0]
            if val != '':
                items['purchase_start'] = val
            
            val = values[1]
            if val != '':
                items['purchase_end'] = val
        
    if flash_law is not None:
        values = flash_law.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_law'] = val
        else:
            val = values[0]
            if val != '':
                items['flash_law_start'] = val
            
            val = values[1]
            if val != '':
                items['flash_law_end'] = val
        
    if withdraw_law is not None:
        values = withdraw_law.split(',')
        if len(values) == 1:
            val = values[0]
            items['withdraw_law'] = val
        else:
            val = values[0]
            if val != '':
                items['withdraw_law_start'] = val
            
            val = values[1]
            if val != '':
                items['withdraw_law_end'] = val
        

    if s_law is not None:
        search_items['law'] = '%' + s_law + '%'
        
    if s_privacy is not None:
        search_items['privacy'] = '%' + s_privacy + '%'
        
    if s_purchase is not None:
        search_items['purchase'] = '%' + s_purchase + '%'
        
    if s_flash_law is not None:
        search_items['flash_law'] = '%' + s_flash_law + '%'
        
    if s_withdraw_law is not None:
        search_items['withdraw_law'] = '%' + s_withdraw_law + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_admin_id is not None:
        values = l_admin_id.split(',')
        values = [int(val) for val in values]
        set_items['admin_id'] = values
        
    if l_law is not None:
        values = l_law.split(',')
        values = [val for val in values]
        set_items['law'] = values
        
    if l_privacy is not None:
        values = l_privacy.split(',')
        values = [val for val in values]
        set_items['privacy'] = values
        
    if l_purchase is not None:
        values = l_purchase.split(',')
        values = [val for val in values]
        set_items['purchase'] = values
        
    if l_flash_law is not None:
        values = l_flash_law.split(',')
        values = [val for val in values]
        set_items['flash_law'] = values
        
    if l_withdraw_law is not None:
        values = l_withdraw_law.split(',')
        values = [val for val in values]
        set_items['withdraw_law'] = values
            
    
    data = d_db.filter_platform_law(items, search_items, set_items, page, page_size)
    return FilterResPlatformLaw(data=data, total=-1)

    
@router.post(f'/platform_notice/create', response_model=SPlatformNotice)
async def create_platform_notice(item: CreatePlatformNotice) -> SPlatformNotice:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_platform_notice(item)
        
    
@router.post(f'/platform_notice/update', response_model=str)
async def update_platform_notice(item: SPlatformNotice) -> str:
    d_db.update_platform_notice(item)
    return "success"

    
@router.get(f'/platform_notice/get', response_model=SPlatformNotice)
async def get_platform_notice(platform_notice_id: int) -> SPlatformNotice:
    return d_db.get_platform_notice(platform_notice_id)


@router.get(f'/platform_notice/filter', response_model=FilterResPlatformNotice)
async def filter_platform_notice(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        create_time: Optional[str] = None, 
        admin_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_admin_id: Optional[str] = None, 
        s_title: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPlatformNotice:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if admin_id is not None:
        values = admin_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['admin_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['admin_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['admin_id_end'] = int(val)
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_admin_id is not None:
        values = l_admin_id.split(',')
        values = [int(val) for val in values]
        set_items['admin_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_platform_notice(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_platform_notice(items, search_items, set_items)
    
    return FilterResPlatformNotice(data=data, total=c)


@router.get(f'/platform_notice/fast_filter', response_model=FilterResPlatformNotice)
async def fast_filter_platform_notice(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        create_time: Optional[str] = None, 
        admin_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_admin_id: Optional[str] = None, 
        s_title: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPlatformNotice:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if admin_id is not None:
        values = admin_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['admin_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['admin_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['admin_id_end'] = int(val)
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_admin_id is not None:
        values = l_admin_id.split(',')
        values = [int(val) for val in values]
        set_items['admin_id'] = values
            
    
    data = d_db.filter_platform_notice(items, search_items, set_items, page, page_size)
    return FilterResPlatformNotice(data=data, total=-1)

    
@router.post(f'/poster/create', response_model=SPoster)
async def create_poster(item: CreatePoster) -> SPoster:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_poster(item)
        
    
@router.post(f'/poster/update', response_model=str)
async def update_poster(item: SPoster) -> str:
    d_db.update_poster(item)
    return "success"

    
@router.get(f'/poster/get', response_model=SPoster)
async def get_poster(poster_id: int) -> SPoster:
    return d_db.get_poster(poster_id)


@router.get(f'/poster/filter', response_model=FilterResPoster)
async def filter_poster(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        poster_url: Optional[str] = None, 
        status: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_poster_url: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        s_poster_url: Optional[str] = None, 
        s_status: Optional[str] = None, 
        s_description: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPoster:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if poster_url is not None:
        values = poster_url.split(',')
        if len(values) == 1:
            val = values[0]
            items['poster_url'] = val
        else:
            val = values[0]
            if val != '':
                items['poster_url_start'] = val
            
            val = values[1]
            if val != '':
                items['poster_url_end'] = val
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = val
        else:
            val = values[0]
            if val != '':
                items['status_start'] = val
            
            val = values[1]
            if val != '':
                items['status_end'] = val
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_poster_url is not None:
        search_items['poster_url'] = '%' + s_poster_url + '%'
        
    if s_status is not None:
        search_items['status'] = '%' + s_status + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_poster_url is not None:
        values = l_poster_url.split(',')
        values = [val for val in values]
        set_items['poster_url'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [val for val in values]
        set_items['status'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_poster(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_poster(items, search_items, set_items)
    
    return FilterResPoster(data=data, total=c)


@router.get(f'/poster/fast_filter', response_model=FilterResPoster)
async def fast_filter_poster(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        poster_url: Optional[str] = None, 
        status: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_poster_url: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        s_poster_url: Optional[str] = None, 
        s_status: Optional[str] = None, 
        s_description: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResPoster:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if poster_url is not None:
        values = poster_url.split(',')
        if len(values) == 1:
            val = values[0]
            items['poster_url'] = val
        else:
            val = values[0]
            if val != '':
                items['poster_url_start'] = val
            
            val = values[1]
            if val != '':
                items['poster_url_end'] = val
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = val
        else:
            val = values[0]
            if val != '':
                items['status_start'] = val
            
            val = values[1]
            if val != '':
                items['status_end'] = val
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_poster_url is not None:
        search_items['poster_url'] = '%' + s_poster_url + '%'
        
    if s_status is not None:
        search_items['status'] = '%' + s_status + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_poster_url is not None:
        values = l_poster_url.split(',')
        values = [val for val in values]
        set_items['poster_url'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [val for val in values]
        set_items['status'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
            
    
    data = d_db.filter_poster(items, search_items, set_items, page, page_size)
    return FilterResPoster(data=data, total=-1)

    
@router.post(f'/setting/create', response_model=SSetting)
async def create_setting(item: CreateSetting) -> SSetting:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_setting(item)
        
    
@router.post(f'/setting/update', response_model=str)
async def update_setting(item: SSetting) -> str:
    d_db.update_setting(item)
    return "success"

    
@router.get(f'/setting/get', response_model=SSetting)
async def get_setting(setting_id: int) -> SSetting:
    return d_db.get_setting(setting_id)


@router.get(f'/setting/filter', response_model=FilterResSetting)
async def filter_setting(
        id: Optional[str] = None, 
        recommend_num: Optional[str] = None, 
        flash_order_income: Optional[str] = None, 
        tuan_order_income: Optional[str] = None, 
        flash_order_max: Optional[str] = None, 
        flash_order_money_max: Optional[str] = None, 
        flash_order_active_user: Optional[str] = None, 
        consume_money_active_user: Optional[str] = None, 
        many_high_user: Optional[str] = None, 
        many_top_user: Optional[str] = None, 
        flash_order_income_retio: Optional[str] = None, 
        flash_order_income_layer: Optional[str] = None, 
        flash_order_income_toper: Optional[str] = None, 
        flash_order_income_groupsir: Optional[str] = None, 
        flash_order_owner_times: Optional[str] = None, 
        parent_user_limit: Optional[str] = None, 
        flash_order_income_subsidy: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_recommend_num: Optional[str] = None, 
        l_flash_order_income: Optional[str] = None, 
        l_tuan_order_income: Optional[str] = None, 
        l_flash_order_max: Optional[str] = None, 
        l_flash_order_money_max: Optional[str] = None, 
        l_flash_order_active_user: Optional[str] = None, 
        l_consume_money_active_user: Optional[str] = None, 
        l_many_high_user: Optional[str] = None, 
        l_many_top_user: Optional[str] = None, 
        l_flash_order_income_retio: Optional[str] = None, 
        l_flash_order_income_layer: Optional[str] = None, 
        l_flash_order_income_toper: Optional[str] = None, 
        l_flash_order_income_groupsir: Optional[str] = None, 
        l_flash_order_owner_times: Optional[str] = None, 
        l_parent_user_limit: Optional[str] = None, 
        l_flash_order_income_subsidy: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSetting:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if recommend_num is not None:
        values = recommend_num.split(',')
        if len(values) == 1:
            val = values[0]
            items['recommend_num'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['recommend_num_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['recommend_num_end'] = int(val)
        
    if flash_order_income is not None:
        values = flash_order_income.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_income'] = float(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_income_start'] = float(val)
            
            val = values[1]
            if val != '':
                items['flash_order_income_end'] = float(val)
        
    if tuan_order_income is not None:
        values = tuan_order_income.split(',')
        if len(values) == 1:
            val = values[0]
            items['tuan_order_income'] = float(val)
        else:
            val = values[0]
            if val != '':
                items['tuan_order_income_start'] = float(val)
            
            val = values[1]
            if val != '':
                items['tuan_order_income_end'] = float(val)
        
    if flash_order_max is not None:
        values = flash_order_max.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_max'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_max_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_order_max_end'] = int(val)
        
    if flash_order_money_max is not None:
        values = flash_order_money_max.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_money_max'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_money_max_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_order_money_max_end'] = int(val)
        
    if flash_order_active_user is not None:
        values = flash_order_active_user.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_active_user'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_active_user_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_order_active_user_end'] = int(val)
        
    if consume_money_active_user is not None:
        values = consume_money_active_user.split(',')
        if len(values) == 1:
            val = values[0]
            items['consume_money_active_user'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['consume_money_active_user_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['consume_money_active_user_end'] = int(val)
        
    if many_high_user is not None:
        values = many_high_user.split(',')
        if len(values) == 1:
            val = values[0]
            items['many_high_user'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['many_high_user_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['many_high_user_end'] = int(val)
        
    if many_top_user is not None:
        values = many_top_user.split(',')
        if len(values) == 1:
            val = values[0]
            items['many_top_user'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['many_top_user_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['many_top_user_end'] = int(val)
        
    if flash_order_income_retio is not None:
        values = flash_order_income_retio.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_income_retio'] = float(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_income_retio_start'] = float(val)
            
            val = values[1]
            if val != '':
                items['flash_order_income_retio_end'] = float(val)
        
    if flash_order_income_layer is not None:
        values = flash_order_income_layer.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_income_layer'] = float(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_income_layer_start'] = float(val)
            
            val = values[1]
            if val != '':
                items['flash_order_income_layer_end'] = float(val)
        
    if flash_order_income_toper is not None:
        values = flash_order_income_toper.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_income_toper'] = float(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_income_toper_start'] = float(val)
            
            val = values[1]
            if val != '':
                items['flash_order_income_toper_end'] = float(val)
        
    if flash_order_income_groupsir is not None:
        values = flash_order_income_groupsir.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_income_groupsir'] = float(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_income_groupsir_start'] = float(val)
            
            val = values[1]
            if val != '':
                items['flash_order_income_groupsir_end'] = float(val)
        
    if flash_order_owner_times is not None:
        values = flash_order_owner_times.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_owner_times'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_owner_times_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_order_owner_times_end'] = int(val)
        
    if parent_user_limit is not None:
        values = parent_user_limit.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_user_limit'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parent_user_limit_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parent_user_limit_end'] = int(val)
        
    if flash_order_income_subsidy is not None:
        values = flash_order_income_subsidy.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_income_subsidy'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_income_subsidy_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_order_income_subsidy_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_recommend_num is not None:
        values = l_recommend_num.split(',')
        values = [int(val) for val in values]
        set_items['recommend_num'] = values
        
    if l_flash_order_income is not None:
        values = l_flash_order_income.split(',')
        values = [float(val) for val in values]
        set_items['flash_order_income'] = values
        
    if l_tuan_order_income is not None:
        values = l_tuan_order_income.split(',')
        values = [float(val) for val in values]
        set_items['tuan_order_income'] = values
        
    if l_flash_order_max is not None:
        values = l_flash_order_max.split(',')
        values = [int(val) for val in values]
        set_items['flash_order_max'] = values
        
    if l_flash_order_money_max is not None:
        values = l_flash_order_money_max.split(',')
        values = [int(val) for val in values]
        set_items['flash_order_money_max'] = values
        
    if l_flash_order_active_user is not None:
        values = l_flash_order_active_user.split(',')
        values = [int(val) for val in values]
        set_items['flash_order_active_user'] = values
        
    if l_consume_money_active_user is not None:
        values = l_consume_money_active_user.split(',')
        values = [int(val) for val in values]
        set_items['consume_money_active_user'] = values
        
    if l_many_high_user is not None:
        values = l_many_high_user.split(',')
        values = [int(val) for val in values]
        set_items['many_high_user'] = values
        
    if l_many_top_user is not None:
        values = l_many_top_user.split(',')
        values = [int(val) for val in values]
        set_items['many_top_user'] = values
        
    if l_flash_order_income_retio is not None:
        values = l_flash_order_income_retio.split(',')
        values = [float(val) for val in values]
        set_items['flash_order_income_retio'] = values
        
    if l_flash_order_income_layer is not None:
        values = l_flash_order_income_layer.split(',')
        values = [float(val) for val in values]
        set_items['flash_order_income_layer'] = values
        
    if l_flash_order_income_toper is not None:
        values = l_flash_order_income_toper.split(',')
        values = [float(val) for val in values]
        set_items['flash_order_income_toper'] = values
        
    if l_flash_order_income_groupsir is not None:
        values = l_flash_order_income_groupsir.split(',')
        values = [float(val) for val in values]
        set_items['flash_order_income_groupsir'] = values
        
    if l_flash_order_owner_times is not None:
        values = l_flash_order_owner_times.split(',')
        values = [int(val) for val in values]
        set_items['flash_order_owner_times'] = values
        
    if l_parent_user_limit is not None:
        values = l_parent_user_limit.split(',')
        values = [int(val) for val in values]
        set_items['parent_user_limit'] = values
        
    if l_flash_order_income_subsidy is not None:
        values = l_flash_order_income_subsidy.split(',')
        values = [int(val) for val in values]
        set_items['flash_order_income_subsidy'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_setting(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_setting(items, search_items, set_items)
    
    return FilterResSetting(data=data, total=c)


@router.get(f'/setting/fast_filter', response_model=FilterResSetting)
async def fast_filter_setting(
        id: Optional[str] = None, 
        recommend_num: Optional[str] = None, 
        flash_order_income: Optional[str] = None, 
        tuan_order_income: Optional[str] = None, 
        flash_order_max: Optional[str] = None, 
        flash_order_money_max: Optional[str] = None, 
        flash_order_active_user: Optional[str] = None, 
        consume_money_active_user: Optional[str] = None, 
        many_high_user: Optional[str] = None, 
        many_top_user: Optional[str] = None, 
        flash_order_income_retio: Optional[str] = None, 
        flash_order_income_layer: Optional[str] = None, 
        flash_order_income_toper: Optional[str] = None, 
        flash_order_income_groupsir: Optional[str] = None, 
        flash_order_owner_times: Optional[str] = None, 
        parent_user_limit: Optional[str] = None, 
        flash_order_income_subsidy: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_recommend_num: Optional[str] = None, 
        l_flash_order_income: Optional[str] = None, 
        l_tuan_order_income: Optional[str] = None, 
        l_flash_order_max: Optional[str] = None, 
        l_flash_order_money_max: Optional[str] = None, 
        l_flash_order_active_user: Optional[str] = None, 
        l_consume_money_active_user: Optional[str] = None, 
        l_many_high_user: Optional[str] = None, 
        l_many_top_user: Optional[str] = None, 
        l_flash_order_income_retio: Optional[str] = None, 
        l_flash_order_income_layer: Optional[str] = None, 
        l_flash_order_income_toper: Optional[str] = None, 
        l_flash_order_income_groupsir: Optional[str] = None, 
        l_flash_order_owner_times: Optional[str] = None, 
        l_parent_user_limit: Optional[str] = None, 
        l_flash_order_income_subsidy: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResSetting:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if recommend_num is not None:
        values = recommend_num.split(',')
        if len(values) == 1:
            val = values[0]
            items['recommend_num'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['recommend_num_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['recommend_num_end'] = int(val)
        
    if flash_order_income is not None:
        values = flash_order_income.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_income'] = float(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_income_start'] = float(val)
            
            val = values[1]
            if val != '':
                items['flash_order_income_end'] = float(val)
        
    if tuan_order_income is not None:
        values = tuan_order_income.split(',')
        if len(values) == 1:
            val = values[0]
            items['tuan_order_income'] = float(val)
        else:
            val = values[0]
            if val != '':
                items['tuan_order_income_start'] = float(val)
            
            val = values[1]
            if val != '':
                items['tuan_order_income_end'] = float(val)
        
    if flash_order_max is not None:
        values = flash_order_max.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_max'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_max_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_order_max_end'] = int(val)
        
    if flash_order_money_max is not None:
        values = flash_order_money_max.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_money_max'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_money_max_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_order_money_max_end'] = int(val)
        
    if flash_order_active_user is not None:
        values = flash_order_active_user.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_active_user'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_active_user_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_order_active_user_end'] = int(val)
        
    if consume_money_active_user is not None:
        values = consume_money_active_user.split(',')
        if len(values) == 1:
            val = values[0]
            items['consume_money_active_user'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['consume_money_active_user_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['consume_money_active_user_end'] = int(val)
        
    if many_high_user is not None:
        values = many_high_user.split(',')
        if len(values) == 1:
            val = values[0]
            items['many_high_user'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['many_high_user_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['many_high_user_end'] = int(val)
        
    if many_top_user is not None:
        values = many_top_user.split(',')
        if len(values) == 1:
            val = values[0]
            items['many_top_user'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['many_top_user_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['many_top_user_end'] = int(val)
        
    if flash_order_income_retio is not None:
        values = flash_order_income_retio.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_income_retio'] = float(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_income_retio_start'] = float(val)
            
            val = values[1]
            if val != '':
                items['flash_order_income_retio_end'] = float(val)
        
    if flash_order_income_layer is not None:
        values = flash_order_income_layer.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_income_layer'] = float(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_income_layer_start'] = float(val)
            
            val = values[1]
            if val != '':
                items['flash_order_income_layer_end'] = float(val)
        
    if flash_order_income_toper is not None:
        values = flash_order_income_toper.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_income_toper'] = float(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_income_toper_start'] = float(val)
            
            val = values[1]
            if val != '':
                items['flash_order_income_toper_end'] = float(val)
        
    if flash_order_income_groupsir is not None:
        values = flash_order_income_groupsir.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_income_groupsir'] = float(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_income_groupsir_start'] = float(val)
            
            val = values[1]
            if val != '':
                items['flash_order_income_groupsir_end'] = float(val)
        
    if flash_order_owner_times is not None:
        values = flash_order_owner_times.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_owner_times'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_owner_times_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_order_owner_times_end'] = int(val)
        
    if parent_user_limit is not None:
        values = parent_user_limit.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_user_limit'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parent_user_limit_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parent_user_limit_end'] = int(val)
        
    if flash_order_income_subsidy is not None:
        values = flash_order_income_subsidy.split(',')
        if len(values) == 1:
            val = values[0]
            items['flash_order_income_subsidy'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['flash_order_income_subsidy_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['flash_order_income_subsidy_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_recommend_num is not None:
        values = l_recommend_num.split(',')
        values = [int(val) for val in values]
        set_items['recommend_num'] = values
        
    if l_flash_order_income is not None:
        values = l_flash_order_income.split(',')
        values = [float(val) for val in values]
        set_items['flash_order_income'] = values
        
    if l_tuan_order_income is not None:
        values = l_tuan_order_income.split(',')
        values = [float(val) for val in values]
        set_items['tuan_order_income'] = values
        
    if l_flash_order_max is not None:
        values = l_flash_order_max.split(',')
        values = [int(val) for val in values]
        set_items['flash_order_max'] = values
        
    if l_flash_order_money_max is not None:
        values = l_flash_order_money_max.split(',')
        values = [int(val) for val in values]
        set_items['flash_order_money_max'] = values
        
    if l_flash_order_active_user is not None:
        values = l_flash_order_active_user.split(',')
        values = [int(val) for val in values]
        set_items['flash_order_active_user'] = values
        
    if l_consume_money_active_user is not None:
        values = l_consume_money_active_user.split(',')
        values = [int(val) for val in values]
        set_items['consume_money_active_user'] = values
        
    if l_many_high_user is not None:
        values = l_many_high_user.split(',')
        values = [int(val) for val in values]
        set_items['many_high_user'] = values
        
    if l_many_top_user is not None:
        values = l_many_top_user.split(',')
        values = [int(val) for val in values]
        set_items['many_top_user'] = values
        
    if l_flash_order_income_retio is not None:
        values = l_flash_order_income_retio.split(',')
        values = [float(val) for val in values]
        set_items['flash_order_income_retio'] = values
        
    if l_flash_order_income_layer is not None:
        values = l_flash_order_income_layer.split(',')
        values = [float(val) for val in values]
        set_items['flash_order_income_layer'] = values
        
    if l_flash_order_income_toper is not None:
        values = l_flash_order_income_toper.split(',')
        values = [float(val) for val in values]
        set_items['flash_order_income_toper'] = values
        
    if l_flash_order_income_groupsir is not None:
        values = l_flash_order_income_groupsir.split(',')
        values = [float(val) for val in values]
        set_items['flash_order_income_groupsir'] = values
        
    if l_flash_order_owner_times is not None:
        values = l_flash_order_owner_times.split(',')
        values = [int(val) for val in values]
        set_items['flash_order_owner_times'] = values
        
    if l_parent_user_limit is not None:
        values = l_parent_user_limit.split(',')
        values = [int(val) for val in values]
        set_items['parent_user_limit'] = values
        
    if l_flash_order_income_subsidy is not None:
        values = l_flash_order_income_subsidy.split(',')
        values = [int(val) for val in values]
        set_items['flash_order_income_subsidy'] = values
            
    
    data = d_db.filter_setting(items, search_items, set_items, page, page_size)
    return FilterResSetting(data=data, total=-1)

    
@router.post(f'/store/create', response_model=SStore)
async def create_store(item: CreateStore) -> SStore:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_store(item)
        
    
@router.post(f'/store/update', response_model=str)
async def update_store(item: SStore) -> str:
    d_db.update_store(item)
    return "success"

    
@router.get(f'/store/get', response_model=SStore)
async def get_store(store_id: int) -> SStore:
    return d_db.get_store(store_id)


@router.get(f'/store/filter', response_model=FilterResStore)
async def filter_store(
        id: Optional[str] = None, 
        name: Optional[str] = None, 
        phone: Optional[str] = None, 
        province: Optional[str] = None, 
        city: Optional[str] = None, 
        area: Optional[str] = None, 
        street: Optional[str] = None, 
        address: Optional[str] = None, 
        status: Optional[str] = None, 
        owner: Optional[str] = None, 
        recommender_id: Optional[str] = None, 
        register_time: Optional[str] = None, 
        type: Optional[str] = None, 
        expired_time: Optional[str] = None, 
        open_time: Optional[str] = None, 
        close_time: Optional[str] = None, 
        image: Optional[str] = None, 
        owner_id: Optional[str] = None, 
        supplier_id: Optional[str] = None, 
        company_name: Optional[str] = None, 
        reject_reason: Optional[str] = None, 
        reject_time: Optional[str] = None, 
        reject_admin_id: Optional[str] = None, 
        is_default: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_name: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_province: Optional[str] = None, 
        l_city: Optional[str] = None, 
        l_area: Optional[str] = None, 
        l_street: Optional[str] = None, 
        l_address: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_owner: Optional[str] = None, 
        l_recommender_id: Optional[str] = None, 
        l_register_time: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_expired_time: Optional[str] = None, 
        l_open_time: Optional[str] = None, 
        l_close_time: Optional[str] = None, 
        l_image: Optional[str] = None, 
        l_owner_id: Optional[str] = None, 
        l_supplier_id: Optional[str] = None, 
        l_company_name: Optional[str] = None, 
        l_reject_reason: Optional[str] = None, 
        l_reject_time: Optional[str] = None, 
        l_reject_admin_id: Optional[str] = None, 
        l_is_default: Optional[str] = None, 
        s_name: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_province: Optional[str] = None, 
        s_city: Optional[str] = None, 
        s_area: Optional[str] = None, 
        s_street: Optional[str] = None, 
        s_address: Optional[str] = None, 
        s_owner: Optional[str] = None, 
        s_image: Optional[str] = None, 
        s_company_name: Optional[str] = None, 
        s_reject_reason: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStore:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if name is not None:
        values = name.split(',')
        if len(values) == 1:
            val = values[0]
            items['name'] = val
        else:
            val = values[0]
            if val != '':
                items['name_start'] = val
            
            val = values[1]
            if val != '':
                items['name_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if province is not None:
        values = province.split(',')
        if len(values) == 1:
            val = values[0]
            items['province'] = val
        else:
            val = values[0]
            if val != '':
                items['province_start'] = val
            
            val = values[1]
            if val != '':
                items['province_end'] = val
        
    if city is not None:
        values = city.split(',')
        if len(values) == 1:
            val = values[0]
            items['city'] = val
        else:
            val = values[0]
            if val != '':
                items['city_start'] = val
            
            val = values[1]
            if val != '':
                items['city_end'] = val
        
    if area is not None:
        values = area.split(',')
        if len(values) == 1:
            val = values[0]
            items['area'] = val
        else:
            val = values[0]
            if val != '':
                items['area_start'] = val
            
            val = values[1]
            if val != '':
                items['area_end'] = val
        
    if street is not None:
        values = street.split(',')
        if len(values) == 1:
            val = values[0]
            items['street'] = val
        else:
            val = values[0]
            if val != '':
                items['street_start'] = val
            
            val = values[1]
            if val != '':
                items['street_end'] = val
        
    if address is not None:
        values = address.split(',')
        if len(values) == 1:
            val = values[0]
            items['address'] = val
        else:
            val = values[0]
            if val != '':
                items['address_start'] = val
            
            val = values[1]
            if val != '':
                items['address_end'] = val
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if owner is not None:
        values = owner.split(',')
        if len(values) == 1:
            val = values[0]
            items['owner'] = val
        else:
            val = values[0]
            if val != '':
                items['owner_start'] = val
            
            val = values[1]
            if val != '':
                items['owner_end'] = val
        
    if recommender_id is not None:
        values = recommender_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['recommender_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['recommender_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['recommender_id_end'] = int(val)
        
    if register_time is not None:
        values = register_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['register_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['register_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['register_time_end'] = datetime.fromtimestamp(int(val))
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['type_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['type_end'] = int(val)
        
    if expired_time is not None:
        values = expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['expired_time_end'] = datetime.fromtimestamp(int(val))
        
    if open_time is not None:
        values = open_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['open_time'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['open_time_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['open_time_end'] = int(val)
        
    if close_time is not None:
        values = close_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['close_time'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['close_time_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['close_time_end'] = int(val)
        
    if image is not None:
        values = image.split(',')
        if len(values) == 1:
            val = values[0]
            items['image'] = val
        else:
            val = values[0]
            if val != '':
                items['image_start'] = val
            
            val = values[1]
            if val != '':
                items['image_end'] = val
        
    if owner_id is not None:
        values = owner_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['owner_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['owner_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['owner_id_end'] = int(val)
        
    if supplier_id is not None:
        values = supplier_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_id_end'] = int(val)
        
    if company_name is not None:
        values = company_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['company_name'] = val
        else:
            val = values[0]
            if val != '':
                items['company_name_start'] = val
            
            val = values[1]
            if val != '':
                items['company_name_end'] = val
        
    if reject_reason is not None:
        values = reject_reason.split(',')
        if len(values) == 1:
            val = values[0]
            items['reject_reason'] = val
        else:
            val = values[0]
            if val != '':
                items['reject_reason_start'] = val
            
            val = values[1]
            if val != '':
                items['reject_reason_end'] = val
        
    if reject_time is not None:
        values = reject_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['reject_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['reject_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['reject_time_end'] = datetime.fromtimestamp(int(val))
        
    if reject_admin_id is not None:
        values = reject_admin_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['reject_admin_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['reject_admin_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['reject_admin_id_end'] = int(val)
        
    if is_default is not None:
        values = is_default.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_default'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_default_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_default_end'] = int(val)
        

    if s_name is not None:
        search_items['name'] = '%' + s_name + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_province is not None:
        search_items['province'] = '%' + s_province + '%'
        
    if s_city is not None:
        search_items['city'] = '%' + s_city + '%'
        
    if s_area is not None:
        search_items['area'] = '%' + s_area + '%'
        
    if s_street is not None:
        search_items['street'] = '%' + s_street + '%'
        
    if s_address is not None:
        search_items['address'] = '%' + s_address + '%'
        
    if s_owner is not None:
        search_items['owner'] = '%' + s_owner + '%'
        
    if s_image is not None:
        search_items['image'] = '%' + s_image + '%'
        
    if s_company_name is not None:
        search_items['company_name'] = '%' + s_company_name + '%'
        
    if s_reject_reason is not None:
        search_items['reject_reason'] = '%' + s_reject_reason + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_name is not None:
        values = l_name.split(',')
        values = [val for val in values]
        set_items['name'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_province is not None:
        values = l_province.split(',')
        values = [val for val in values]
        set_items['province'] = values
        
    if l_city is not None:
        values = l_city.split(',')
        values = [val for val in values]
        set_items['city'] = values
        
    if l_area is not None:
        values = l_area.split(',')
        values = [val for val in values]
        set_items['area'] = values
        
    if l_street is not None:
        values = l_street.split(',')
        values = [val for val in values]
        set_items['street'] = values
        
    if l_address is not None:
        values = l_address.split(',')
        values = [val for val in values]
        set_items['address'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_owner is not None:
        values = l_owner.split(',')
        values = [val for val in values]
        set_items['owner'] = values
        
    if l_recommender_id is not None:
        values = l_recommender_id.split(',')
        values = [int(val) for val in values]
        set_items['recommender_id'] = values
        
    if l_register_time is not None:
        values = l_register_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['register_time'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [int(val) for val in values]
        set_items['type'] = values
        
    if l_expired_time is not None:
        values = l_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['expired_time'] = values
        
    if l_open_time is not None:
        values = l_open_time.split(',')
        values = [int(val) for val in values]
        set_items['open_time'] = values
        
    if l_close_time is not None:
        values = l_close_time.split(',')
        values = [int(val) for val in values]
        set_items['close_time'] = values
        
    if l_image is not None:
        values = l_image.split(',')
        values = [val for val in values]
        set_items['image'] = values
        
    if l_owner_id is not None:
        values = l_owner_id.split(',')
        values = [int(val) for val in values]
        set_items['owner_id'] = values
        
    if l_supplier_id is not None:
        values = l_supplier_id.split(',')
        values = [int(val) for val in values]
        set_items['supplier_id'] = values
        
    if l_company_name is not None:
        values = l_company_name.split(',')
        values = [val for val in values]
        set_items['company_name'] = values
        
    if l_reject_reason is not None:
        values = l_reject_reason.split(',')
        values = [val for val in values]
        set_items['reject_reason'] = values
        
    if l_reject_time is not None:
        values = l_reject_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['reject_time'] = values
        
    if l_reject_admin_id is not None:
        values = l_reject_admin_id.split(',')
        values = [int(val) for val in values]
        set_items['reject_admin_id'] = values
        
    if l_is_default is not None:
        values = l_is_default.split(',')
        values = [int(val) for val in values]
        set_items['is_default'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_store(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_store(items, search_items, set_items)
    
    return FilterResStore(data=data, total=c)


@router.get(f'/store/fast_filter', response_model=FilterResStore)
async def fast_filter_store(
        id: Optional[str] = None, 
        name: Optional[str] = None, 
        phone: Optional[str] = None, 
        province: Optional[str] = None, 
        city: Optional[str] = None, 
        area: Optional[str] = None, 
        street: Optional[str] = None, 
        address: Optional[str] = None, 
        status: Optional[str] = None, 
        owner: Optional[str] = None, 
        recommender_id: Optional[str] = None, 
        register_time: Optional[str] = None, 
        type: Optional[str] = None, 
        expired_time: Optional[str] = None, 
        open_time: Optional[str] = None, 
        close_time: Optional[str] = None, 
        image: Optional[str] = None, 
        owner_id: Optional[str] = None, 
        supplier_id: Optional[str] = None, 
        company_name: Optional[str] = None, 
        reject_reason: Optional[str] = None, 
        reject_time: Optional[str] = None, 
        reject_admin_id: Optional[str] = None, 
        is_default: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_name: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_province: Optional[str] = None, 
        l_city: Optional[str] = None, 
        l_area: Optional[str] = None, 
        l_street: Optional[str] = None, 
        l_address: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_owner: Optional[str] = None, 
        l_recommender_id: Optional[str] = None, 
        l_register_time: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_expired_time: Optional[str] = None, 
        l_open_time: Optional[str] = None, 
        l_close_time: Optional[str] = None, 
        l_image: Optional[str] = None, 
        l_owner_id: Optional[str] = None, 
        l_supplier_id: Optional[str] = None, 
        l_company_name: Optional[str] = None, 
        l_reject_reason: Optional[str] = None, 
        l_reject_time: Optional[str] = None, 
        l_reject_admin_id: Optional[str] = None, 
        l_is_default: Optional[str] = None, 
        s_name: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_province: Optional[str] = None, 
        s_city: Optional[str] = None, 
        s_area: Optional[str] = None, 
        s_street: Optional[str] = None, 
        s_address: Optional[str] = None, 
        s_owner: Optional[str] = None, 
        s_image: Optional[str] = None, 
        s_company_name: Optional[str] = None, 
        s_reject_reason: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStore:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if name is not None:
        values = name.split(',')
        if len(values) == 1:
            val = values[0]
            items['name'] = val
        else:
            val = values[0]
            if val != '':
                items['name_start'] = val
            
            val = values[1]
            if val != '':
                items['name_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if province is not None:
        values = province.split(',')
        if len(values) == 1:
            val = values[0]
            items['province'] = val
        else:
            val = values[0]
            if val != '':
                items['province_start'] = val
            
            val = values[1]
            if val != '':
                items['province_end'] = val
        
    if city is not None:
        values = city.split(',')
        if len(values) == 1:
            val = values[0]
            items['city'] = val
        else:
            val = values[0]
            if val != '':
                items['city_start'] = val
            
            val = values[1]
            if val != '':
                items['city_end'] = val
        
    if area is not None:
        values = area.split(',')
        if len(values) == 1:
            val = values[0]
            items['area'] = val
        else:
            val = values[0]
            if val != '':
                items['area_start'] = val
            
            val = values[1]
            if val != '':
                items['area_end'] = val
        
    if street is not None:
        values = street.split(',')
        if len(values) == 1:
            val = values[0]
            items['street'] = val
        else:
            val = values[0]
            if val != '':
                items['street_start'] = val
            
            val = values[1]
            if val != '':
                items['street_end'] = val
        
    if address is not None:
        values = address.split(',')
        if len(values) == 1:
            val = values[0]
            items['address'] = val
        else:
            val = values[0]
            if val != '':
                items['address_start'] = val
            
            val = values[1]
            if val != '':
                items['address_end'] = val
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if owner is not None:
        values = owner.split(',')
        if len(values) == 1:
            val = values[0]
            items['owner'] = val
        else:
            val = values[0]
            if val != '':
                items['owner_start'] = val
            
            val = values[1]
            if val != '':
                items['owner_end'] = val
        
    if recommender_id is not None:
        values = recommender_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['recommender_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['recommender_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['recommender_id_end'] = int(val)
        
    if register_time is not None:
        values = register_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['register_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['register_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['register_time_end'] = datetime.fromtimestamp(int(val))
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['type_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['type_end'] = int(val)
        
    if expired_time is not None:
        values = expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['expired_time_end'] = datetime.fromtimestamp(int(val))
        
    if open_time is not None:
        values = open_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['open_time'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['open_time_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['open_time_end'] = int(val)
        
    if close_time is not None:
        values = close_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['close_time'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['close_time_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['close_time_end'] = int(val)
        
    if image is not None:
        values = image.split(',')
        if len(values) == 1:
            val = values[0]
            items['image'] = val
        else:
            val = values[0]
            if val != '':
                items['image_start'] = val
            
            val = values[1]
            if val != '':
                items['image_end'] = val
        
    if owner_id is not None:
        values = owner_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['owner_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['owner_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['owner_id_end'] = int(val)
        
    if supplier_id is not None:
        values = supplier_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_id_end'] = int(val)
        
    if company_name is not None:
        values = company_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['company_name'] = val
        else:
            val = values[0]
            if val != '':
                items['company_name_start'] = val
            
            val = values[1]
            if val != '':
                items['company_name_end'] = val
        
    if reject_reason is not None:
        values = reject_reason.split(',')
        if len(values) == 1:
            val = values[0]
            items['reject_reason'] = val
        else:
            val = values[0]
            if val != '':
                items['reject_reason_start'] = val
            
            val = values[1]
            if val != '':
                items['reject_reason_end'] = val
        
    if reject_time is not None:
        values = reject_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['reject_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['reject_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['reject_time_end'] = datetime.fromtimestamp(int(val))
        
    if reject_admin_id is not None:
        values = reject_admin_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['reject_admin_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['reject_admin_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['reject_admin_id_end'] = int(val)
        
    if is_default is not None:
        values = is_default.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_default'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_default_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_default_end'] = int(val)
        

    if s_name is not None:
        search_items['name'] = '%' + s_name + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_province is not None:
        search_items['province'] = '%' + s_province + '%'
        
    if s_city is not None:
        search_items['city'] = '%' + s_city + '%'
        
    if s_area is not None:
        search_items['area'] = '%' + s_area + '%'
        
    if s_street is not None:
        search_items['street'] = '%' + s_street + '%'
        
    if s_address is not None:
        search_items['address'] = '%' + s_address + '%'
        
    if s_owner is not None:
        search_items['owner'] = '%' + s_owner + '%'
        
    if s_image is not None:
        search_items['image'] = '%' + s_image + '%'
        
    if s_company_name is not None:
        search_items['company_name'] = '%' + s_company_name + '%'
        
    if s_reject_reason is not None:
        search_items['reject_reason'] = '%' + s_reject_reason + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_name is not None:
        values = l_name.split(',')
        values = [val for val in values]
        set_items['name'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_province is not None:
        values = l_province.split(',')
        values = [val for val in values]
        set_items['province'] = values
        
    if l_city is not None:
        values = l_city.split(',')
        values = [val for val in values]
        set_items['city'] = values
        
    if l_area is not None:
        values = l_area.split(',')
        values = [val for val in values]
        set_items['area'] = values
        
    if l_street is not None:
        values = l_street.split(',')
        values = [val for val in values]
        set_items['street'] = values
        
    if l_address is not None:
        values = l_address.split(',')
        values = [val for val in values]
        set_items['address'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_owner is not None:
        values = l_owner.split(',')
        values = [val for val in values]
        set_items['owner'] = values
        
    if l_recommender_id is not None:
        values = l_recommender_id.split(',')
        values = [int(val) for val in values]
        set_items['recommender_id'] = values
        
    if l_register_time is not None:
        values = l_register_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['register_time'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [int(val) for val in values]
        set_items['type'] = values
        
    if l_expired_time is not None:
        values = l_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['expired_time'] = values
        
    if l_open_time is not None:
        values = l_open_time.split(',')
        values = [int(val) for val in values]
        set_items['open_time'] = values
        
    if l_close_time is not None:
        values = l_close_time.split(',')
        values = [int(val) for val in values]
        set_items['close_time'] = values
        
    if l_image is not None:
        values = l_image.split(',')
        values = [val for val in values]
        set_items['image'] = values
        
    if l_owner_id is not None:
        values = l_owner_id.split(',')
        values = [int(val) for val in values]
        set_items['owner_id'] = values
        
    if l_supplier_id is not None:
        values = l_supplier_id.split(',')
        values = [int(val) for val in values]
        set_items['supplier_id'] = values
        
    if l_company_name is not None:
        values = l_company_name.split(',')
        values = [val for val in values]
        set_items['company_name'] = values
        
    if l_reject_reason is not None:
        values = l_reject_reason.split(',')
        values = [val for val in values]
        set_items['reject_reason'] = values
        
    if l_reject_time is not None:
        values = l_reject_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['reject_time'] = values
        
    if l_reject_admin_id is not None:
        values = l_reject_admin_id.split(',')
        values = [int(val) for val in values]
        set_items['reject_admin_id'] = values
        
    if l_is_default is not None:
        values = l_is_default.split(',')
        values = [int(val) for val in values]
        set_items['is_default'] = values
            
    
    data = d_db.filter_store(items, search_items, set_items, page, page_size)
    return FilterResStore(data=data, total=-1)

    
@router.post(f'/store_amount/create', response_model=SStoreAmount)
async def create_store_amount(item: CreateStoreAmount) -> SStoreAmount:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_store_amount(item)
        
    
@router.post(f'/store_amount/update', response_model=str)
async def update_store_amount(item: SStoreAmount) -> str:
    d_db.update_store_amount(item)
    return "success"

    
@router.get(f'/store_amount/get', response_model=SStoreAmount)
async def get_store_amount(store_amount_id: int) -> SStoreAmount:
    return d_db.get_store_amount(store_amount_id)


@router.get(f'/store_amount/filter', response_model=FilterResStoreAmount)
async def filter_store_amount(
        id: Optional[str] = None, 
        type: Optional[str] = None, 
        change: Optional[str] = None, 
        amount: Optional[str] = None, 
        create_time: Optional[str] = None, 
        store_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_change: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreAmount:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['type_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['type_end'] = int(val)
        
    if change is not None:
        values = change.split(',')
        if len(values) == 1:
            val = values[0]
            items['change'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['change_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['change_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [int(val) for val in values]
        set_items['type'] = values
        
    if l_change is not None:
        values = l_change.split(',')
        values = [int(val) for val in values]
        set_items['change'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_store_amount(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_store_amount(items, search_items, set_items)
    
    return FilterResStoreAmount(data=data, total=c)


@router.get(f'/store_amount/fast_filter', response_model=FilterResStoreAmount)
async def fast_filter_store_amount(
        id: Optional[str] = None, 
        type: Optional[str] = None, 
        change: Optional[str] = None, 
        amount: Optional[str] = None, 
        create_time: Optional[str] = None, 
        store_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_change: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreAmount:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['type_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['type_end'] = int(val)
        
    if change is not None:
        values = change.split(',')
        if len(values) == 1:
            val = values[0]
            items['change'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['change_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['change_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [int(val) for val in values]
        set_items['type'] = values
        
    if l_change is not None:
        values = l_change.split(',')
        values = [int(val) for val in values]
        set_items['change'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
            
    
    data = d_db.filter_store_amount(items, search_items, set_items, page, page_size)
    return FilterResStoreAmount(data=data, total=-1)

    
@router.post(f'/store_change_type/create', response_model=SStoreChangeType)
async def create_store_change_type(item: CreateStoreChangeType) -> SStoreChangeType:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_store_change_type(item)
        
    
@router.post(f'/store_change_type/update', response_model=str)
async def update_store_change_type(item: SStoreChangeType) -> str:
    d_db.update_store_change_type(item)
    return "success"

    
@router.get(f'/store_change_type/get', response_model=SStoreChangeType)
async def get_store_change_type(store_change_type_id: int) -> SStoreChangeType:
    return d_db.get_store_change_type(store_change_type_id)


@router.get(f'/store_change_type/filter', response_model=FilterResStoreChangeType)
async def filter_store_change_type(
        id: Optional[str] = None, 
        type: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        s_type: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreChangeType:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_store_change_type(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_store_change_type(items, search_items, set_items)
    
    return FilterResStoreChangeType(data=data, total=c)


@router.get(f'/store_change_type/fast_filter', response_model=FilterResStoreChangeType)
async def fast_filter_store_change_type(
        id: Optional[str] = None, 
        type: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        s_type: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreChangeType:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
            
    
    data = d_db.filter_store_change_type(items, search_items, set_items, page, page_size)
    return FilterResStoreChangeType(data=data, total=-1)

    
@router.post(f'/store_contract/create', response_model=SStoreContract)
async def create_store_contract(item: CreateStoreContract) -> SStoreContract:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_store_contract(item)
        
    
@router.post(f'/store_contract/update', response_model=str)
async def update_store_contract(item: SStoreContract) -> str:
    d_db.update_store_contract(item)
    return "success"

    
@router.get(f'/store_contract/get', response_model=SStoreContract)
async def get_store_contract(store_contract_id: int) -> SStoreContract:
    return d_db.get_store_contract(store_contract_id)


@router.get(f'/store_contract/filter', response_model=FilterResStoreContract)
async def filter_store_contract(
        contract: Optional[str] = None, 
        id: Optional[str] = None, 
        store_id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        expired_time: Optional[str] = None, 
        l_contract: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_expired_time: Optional[str] = None, 
        s_contract: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreContract:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if contract is not None:
        values = contract.split(',')
        if len(values) == 1:
            val = values[0]
            items['contract'] = val
        else:
            val = values[0]
            if val != '':
                items['contract_start'] = val
            
            val = values[1]
            if val != '':
                items['contract_end'] = val
        
    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if expired_time is not None:
        values = expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['expired_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_contract is not None:
        search_items['contract'] = '%' + s_contract + '%'
        

    if l_contract is not None:
        values = l_contract.split(',')
        values = [val for val in values]
        set_items['contract'] = values
        
    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_expired_time is not None:
        values = l_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['expired_time'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_store_contract(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_store_contract(items, search_items, set_items)
    
    return FilterResStoreContract(data=data, total=c)


@router.get(f'/store_contract/fast_filter', response_model=FilterResStoreContract)
async def fast_filter_store_contract(
        contract: Optional[str] = None, 
        id: Optional[str] = None, 
        store_id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        expired_time: Optional[str] = None, 
        l_contract: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_expired_time: Optional[str] = None, 
        s_contract: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreContract:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if contract is not None:
        values = contract.split(',')
        if len(values) == 1:
            val = values[0]
            items['contract'] = val
        else:
            val = values[0]
            if val != '':
                items['contract_start'] = val
            
            val = values[1]
            if val != '':
                items['contract_end'] = val
        
    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if expired_time is not None:
        values = expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['expired_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_contract is not None:
        search_items['contract'] = '%' + s_contract + '%'
        

    if l_contract is not None:
        values = l_contract.split(',')
        values = [val for val in values]
        set_items['contract'] = values
        
    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_expired_time is not None:
        values = l_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['expired_time'] = values
            
    
    data = d_db.filter_store_contract(items, search_items, set_items, page, page_size)
    return FilterResStoreContract(data=data, total=-1)

    
@router.post(f'/store_income/create', response_model=SStoreIncome)
async def create_store_income(item: CreateStoreIncome) -> SStoreIncome:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_store_income(item)
        
    
@router.post(f'/store_income/update', response_model=str)
async def update_store_income(item: SStoreIncome) -> str:
    d_db.update_store_income(item)
    return "success"

    
@router.get(f'/store_income/get', response_model=SStoreIncome)
async def get_store_income(store_income_id: int) -> SStoreIncome:
    return d_db.get_store_income(store_income_id)


@router.get(f'/store_income/filter', response_model=FilterResStoreIncome)
async def filter_store_income(
        id: Optional[str] = None, 
        income_add: Optional[str] = None, 
        income_total: Optional[str] = None, 
        create_time: Optional[str] = None, 
        store_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_income_add: Optional[str] = None, 
        l_income_total: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreIncome:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if income_add is not None:
        values = income_add.split(',')
        if len(values) == 1:
            val = values[0]
            items['income_add'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['income_add_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['income_add_end'] = int(val)
        
    if income_total is not None:
        values = income_total.split(',')
        if len(values) == 1:
            val = values[0]
            items['income_total'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['income_total_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['income_total_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_income_add is not None:
        values = l_income_add.split(',')
        values = [int(val) for val in values]
        set_items['income_add'] = values
        
    if l_income_total is not None:
        values = l_income_total.split(',')
        values = [int(val) for val in values]
        set_items['income_total'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_store_income(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_store_income(items, search_items, set_items)
    
    return FilterResStoreIncome(data=data, total=c)


@router.get(f'/store_income/fast_filter', response_model=FilterResStoreIncome)
async def fast_filter_store_income(
        id: Optional[str] = None, 
        income_add: Optional[str] = None, 
        income_total: Optional[str] = None, 
        create_time: Optional[str] = None, 
        store_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_income_add: Optional[str] = None, 
        l_income_total: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreIncome:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if income_add is not None:
        values = income_add.split(',')
        if len(values) == 1:
            val = values[0]
            items['income_add'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['income_add_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['income_add_end'] = int(val)
        
    if income_total is not None:
        values = income_total.split(',')
        if len(values) == 1:
            val = values[0]
            items['income_total'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['income_total_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['income_total_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_income_add is not None:
        values = l_income_add.split(',')
        values = [int(val) for val in values]
        set_items['income_add'] = values
        
    if l_income_total is not None:
        values = l_income_total.split(',')
        values = [int(val) for val in values]
        set_items['income_total'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
            
    
    data = d_db.filter_store_income(items, search_items, set_items, page, page_size)
    return FilterResStoreIncome(data=data, total=-1)

    
@router.post(f'/store_license/create', response_model=SStoreLicense)
async def create_store_license(item: CreateStoreLicense) -> SStoreLicense:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_store_license(item)
        
    
@router.post(f'/store_license/update', response_model=str)
async def update_store_license(item: SStoreLicense) -> str:
    d_db.update_store_license(item)
    return "success"

    
@router.get(f'/store_license/get', response_model=SStoreLicense)
async def get_store_license(store_license_id: int) -> SStoreLicense:
    return d_db.get_store_license(store_license_id)


@router.get(f'/store_license/filter', response_model=FilterResStoreLicense)
async def filter_store_license(
        id: Optional[str] = None, 
        license: Optional[str] = None, 
        store_id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_license: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        s_license: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreLicense:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if license is not None:
        values = license.split(',')
        if len(values) == 1:
            val = values[0]
            items['license'] = val
        else:
            val = values[0]
            if val != '':
                items['license_start'] = val
            
            val = values[1]
            if val != '':
                items['license_end'] = val
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_license is not None:
        search_items['license'] = '%' + s_license + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_license is not None:
        values = l_license.split(',')
        values = [val for val in values]
        set_items['license'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_store_license(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_store_license(items, search_items, set_items)
    
    return FilterResStoreLicense(data=data, total=c)


@router.get(f'/store_license/fast_filter', response_model=FilterResStoreLicense)
async def fast_filter_store_license(
        id: Optional[str] = None, 
        license: Optional[str] = None, 
        store_id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_license: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        s_license: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreLicense:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if license is not None:
        values = license.split(',')
        if len(values) == 1:
            val = values[0]
            items['license'] = val
        else:
            val = values[0]
            if val != '':
                items['license_start'] = val
            
            val = values[1]
            if val != '':
                items['license_end'] = val
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_license is not None:
        search_items['license'] = '%' + s_license + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_license is not None:
        values = l_license.split(',')
        values = [val for val in values]
        set_items['license'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
            
    
    data = d_db.filter_store_license(items, search_items, set_items, page, page_size)
    return FilterResStoreLicense(data=data, total=-1)

    
@router.post(f'/store_membership/create', response_model=SStoreMembership)
async def create_store_membership(item: CreateStoreMembership) -> SStoreMembership:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_store_membership(item)
        
    
@router.post(f'/store_membership/update', response_model=str)
async def update_store_membership(item: SStoreMembership) -> str:
    d_db.update_store_membership(item)
    return "success"

    
@router.get(f'/store_membership/get', response_model=SStoreMembership)
async def get_store_membership(store_membership_id: int) -> SStoreMembership:
    return d_db.get_store_membership(store_membership_id)


@router.get(f'/store_membership/filter', response_model=FilterResStoreMembership)
async def filter_store_membership(
        id: Optional[str] = None, 
        store_id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        status: Optional[str] = None, 
        create_time: Optional[str] = None, 
        expired_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_expired_time: Optional[str] = None, 
        s_status: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreMembership:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = val
        else:
            val = values[0]
            if val != '':
                items['status_start'] = val
            
            val = values[1]
            if val != '':
                items['status_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if expired_time is not None:
        values = expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['expired_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_status is not None:
        search_items['status'] = '%' + s_status + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [val for val in values]
        set_items['status'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_expired_time is not None:
        values = l_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['expired_time'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_store_membership(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_store_membership(items, search_items, set_items)
    
    return FilterResStoreMembership(data=data, total=c)


@router.get(f'/store_membership/fast_filter', response_model=FilterResStoreMembership)
async def fast_filter_store_membership(
        id: Optional[str] = None, 
        store_id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        status: Optional[str] = None, 
        create_time: Optional[str] = None, 
        expired_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_store_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_expired_time: Optional[str] = None, 
        s_status: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreMembership:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if store_id is not None:
        values = store_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = val
        else:
            val = values[0]
            if val != '':
                items['status_start'] = val
            
            val = values[1]
            if val != '':
                items['status_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if expired_time is not None:
        values = expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['expired_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_status is not None:
        search_items['status'] = '%' + s_status + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_store_id is not None:
        values = l_store_id.split(',')
        values = [int(val) for val in values]
        set_items['store_id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [val for val in values]
        set_items['status'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_expired_time is not None:
        values = l_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['expired_time'] = values
            
    
    data = d_db.filter_store_membership(items, search_items, set_items, page, page_size)
    return FilterResStoreMembership(data=data, total=-1)

    
@router.post(f'/store_owner/create', response_model=SStoreOwner)
async def create_store_owner(item: CreateStoreOwner) -> SStoreOwner:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_store_owner(item)
        
    
@router.post(f'/store_owner/update', response_model=str)
async def update_store_owner(item: SStoreOwner) -> str:
    d_db.update_store_owner(item)
    return "success"

    
@router.get(f'/store_owner/get', response_model=SStoreOwner)
async def get_store_owner(store_owner_id: int) -> SStoreOwner:
    return d_db.get_store_owner(store_owner_id)


@router.get(f'/store_owner/filter', response_model=FilterResStoreOwner)
async def filter_store_owner(
        id: Optional[str] = None, 
        name: Optional[str] = None, 
        phone: Optional[str] = None, 
        password: Optional[str] = None, 
        id_card: Optional[str] = None, 
        front_image: Optional[str] = None, 
        back_image: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_name: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_password: Optional[str] = None, 
        l_id_card: Optional[str] = None, 
        l_front_image: Optional[str] = None, 
        l_back_image: Optional[str] = None, 
        s_name: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_password: Optional[str] = None, 
        s_id_card: Optional[str] = None, 
        s_front_image: Optional[str] = None, 
        s_back_image: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreOwner:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if name is not None:
        values = name.split(',')
        if len(values) == 1:
            val = values[0]
            items['name'] = val
        else:
            val = values[0]
            if val != '':
                items['name_start'] = val
            
            val = values[1]
            if val != '':
                items['name_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if password is not None:
        values = password.split(',')
        if len(values) == 1:
            val = values[0]
            items['password'] = val
        else:
            val = values[0]
            if val != '':
                items['password_start'] = val
            
            val = values[1]
            if val != '':
                items['password_end'] = val
        
    if id_card is not None:
        values = id_card.split(',')
        if len(values) == 1:
            val = values[0]
            items['id_card'] = val
        else:
            val = values[0]
            if val != '':
                items['id_card_start'] = val
            
            val = values[1]
            if val != '':
                items['id_card_end'] = val
        
    if front_image is not None:
        values = front_image.split(',')
        if len(values) == 1:
            val = values[0]
            items['front_image'] = val
        else:
            val = values[0]
            if val != '':
                items['front_image_start'] = val
            
            val = values[1]
            if val != '':
                items['front_image_end'] = val
        
    if back_image is not None:
        values = back_image.split(',')
        if len(values) == 1:
            val = values[0]
            items['back_image'] = val
        else:
            val = values[0]
            if val != '':
                items['back_image_start'] = val
            
            val = values[1]
            if val != '':
                items['back_image_end'] = val
        

    if s_name is not None:
        search_items['name'] = '%' + s_name + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_password is not None:
        search_items['password'] = '%' + s_password + '%'
        
    if s_id_card is not None:
        search_items['id_card'] = '%' + s_id_card + '%'
        
    if s_front_image is not None:
        search_items['front_image'] = '%' + s_front_image + '%'
        
    if s_back_image is not None:
        search_items['back_image'] = '%' + s_back_image + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_name is not None:
        values = l_name.split(',')
        values = [val for val in values]
        set_items['name'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_password is not None:
        values = l_password.split(',')
        values = [val for val in values]
        set_items['password'] = values
        
    if l_id_card is not None:
        values = l_id_card.split(',')
        values = [val for val in values]
        set_items['id_card'] = values
        
    if l_front_image is not None:
        values = l_front_image.split(',')
        values = [val for val in values]
        set_items['front_image'] = values
        
    if l_back_image is not None:
        values = l_back_image.split(',')
        values = [val for val in values]
        set_items['back_image'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_store_owner(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_store_owner(items, search_items, set_items)
    
    return FilterResStoreOwner(data=data, total=c)


@router.get(f'/store_owner/fast_filter', response_model=FilterResStoreOwner)
async def fast_filter_store_owner(
        id: Optional[str] = None, 
        name: Optional[str] = None, 
        phone: Optional[str] = None, 
        password: Optional[str] = None, 
        id_card: Optional[str] = None, 
        front_image: Optional[str] = None, 
        back_image: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_name: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_password: Optional[str] = None, 
        l_id_card: Optional[str] = None, 
        l_front_image: Optional[str] = None, 
        l_back_image: Optional[str] = None, 
        s_name: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_password: Optional[str] = None, 
        s_id_card: Optional[str] = None, 
        s_front_image: Optional[str] = None, 
        s_back_image: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreOwner:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if name is not None:
        values = name.split(',')
        if len(values) == 1:
            val = values[0]
            items['name'] = val
        else:
            val = values[0]
            if val != '':
                items['name_start'] = val
            
            val = values[1]
            if val != '':
                items['name_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if password is not None:
        values = password.split(',')
        if len(values) == 1:
            val = values[0]
            items['password'] = val
        else:
            val = values[0]
            if val != '':
                items['password_start'] = val
            
            val = values[1]
            if val != '':
                items['password_end'] = val
        
    if id_card is not None:
        values = id_card.split(',')
        if len(values) == 1:
            val = values[0]
            items['id_card'] = val
        else:
            val = values[0]
            if val != '':
                items['id_card_start'] = val
            
            val = values[1]
            if val != '':
                items['id_card_end'] = val
        
    if front_image is not None:
        values = front_image.split(',')
        if len(values) == 1:
            val = values[0]
            items['front_image'] = val
        else:
            val = values[0]
            if val != '':
                items['front_image_start'] = val
            
            val = values[1]
            if val != '':
                items['front_image_end'] = val
        
    if back_image is not None:
        values = back_image.split(',')
        if len(values) == 1:
            val = values[0]
            items['back_image'] = val
        else:
            val = values[0]
            if val != '':
                items['back_image_start'] = val
            
            val = values[1]
            if val != '':
                items['back_image_end'] = val
        

    if s_name is not None:
        search_items['name'] = '%' + s_name + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_password is not None:
        search_items['password'] = '%' + s_password + '%'
        
    if s_id_card is not None:
        search_items['id_card'] = '%' + s_id_card + '%'
        
    if s_front_image is not None:
        search_items['front_image'] = '%' + s_front_image + '%'
        
    if s_back_image is not None:
        search_items['back_image'] = '%' + s_back_image + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_name is not None:
        values = l_name.split(',')
        values = [val for val in values]
        set_items['name'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_password is not None:
        values = l_password.split(',')
        values = [val for val in values]
        set_items['password'] = values
        
    if l_id_card is not None:
        values = l_id_card.split(',')
        values = [val for val in values]
        set_items['id_card'] = values
        
    if l_front_image is not None:
        values = l_front_image.split(',')
        values = [val for val in values]
        set_items['front_image'] = values
        
    if l_back_image is not None:
        values = l_back_image.split(',')
        values = [val for val in values]
        set_items['back_image'] = values
            
    
    data = d_db.filter_store_owner(items, search_items, set_items, page, page_size)
    return FilterResStoreOwner(data=data, total=-1)

    
@router.post(f'/store_state/create', response_model=SStoreState)
async def create_store_state(item: CreateStoreState) -> SStoreState:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_store_state(item)
        
    
@router.post(f'/store_state/update', response_model=str)
async def update_store_state(item: SStoreState) -> str:
    d_db.update_store_state(item)
    return "success"

    
@router.get(f'/store_state/get', response_model=SStoreState)
async def get_store_state(store_state_id: int) -> SStoreState:
    return d_db.get_store_state(store_state_id)


@router.get(f'/store_state/filter', response_model=FilterResStoreState)
async def filter_store_state(
        id: Optional[str] = None, 
        status: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        s_status: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreState:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = val
        else:
            val = values[0]
            if val != '':
                items['status_start'] = val
            
            val = values[1]
            if val != '':
                items['status_end'] = val
        

    if s_status is not None:
        search_items['status'] = '%' + s_status + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [val for val in values]
        set_items['status'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_store_state(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_store_state(items, search_items, set_items)
    
    return FilterResStoreState(data=data, total=c)


@router.get(f'/store_state/fast_filter', response_model=FilterResStoreState)
async def fast_filter_store_state(
        id: Optional[str] = None, 
        status: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        s_status: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResStoreState:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = val
        else:
            val = values[0]
            if val != '':
                items['status_start'] = val
            
            val = values[1]
            if val != '':
                items['status_end'] = val
        

    if s_status is not None:
        search_items['status'] = '%' + s_status + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [val for val in values]
        set_items['status'] = values
            
    
    data = d_db.filter_store_state(items, search_items, set_items, page, page_size)
    return FilterResStoreState(data=data, total=-1)

    
@router.post(f'/supplier/create', response_model=SSupplier)
async def create_supplier(item: CreateSupplier) -> SSupplier:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_supplier(item)
        
    
@router.post(f'/supplier/update', response_model=str)
async def update_supplier(item: SSupplier) -> str:
    d_db.update_supplier(item)
    return "success"

    
@router.get(f'/supplier/get', response_model=SSupplier)
async def get_supplier(supplier_id: int) -> SSupplier:
    return d_db.get_supplier(supplier_id)


@router.get(f'/supplier/filter', response_model=FilterResSupplier)
async def filter_supplier(
        id: Optional[str] = None, 
        name: Optional[str] = None, 
        phone: Optional[str] = None, 
        province: Optional[str] = None, 
        city: Optional[str] = None, 
        area: Optional[str] = None, 
        street: Optional[str] = None, 
        address: Optional[str] = None, 
        status: Optional[str] = None, 
        owner: Optional[str] = None, 
        recommender_id: Optional[str] = None, 
        register_time: Optional[str] = None, 
        type: Optional[str] = None, 
        expired_time: Optional[str] = None, 
        open_time: Optional[str] = None, 
        close_time: Optional[str] = None, 
        image: Optional[str] = None, 
        owner_id: Optional[str] = None, 
        category: Optional[str] = None, 
        balance: Optional[str] = None, 
        reject_reason: Optional[str] = None, 
        reject_admin_id: Optional[str] = None, 
        reject_time: Optional[str] = None, 
        company_name: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_name: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_province: Optional[str] = None, 
        l_city: Optional[str] = None, 
        l_area: Optional[str] = None, 
        l_street: Optional[str] = None, 
        l_address: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_owner: Optional[str] = None, 
        l_recommender_id: Optional[str] = None, 
        l_register_time: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_expired_time: Optional[str] = None, 
        l_open_time: Optional[str] = None, 
        l_close_time: Optional[str] = None, 
        l_image: Optional[str] = None, 
        l_owner_id: Optional[str] = None, 
        l_category: Optional[str] = None, 
        l_balance: Optional[str] = None, 
        l_reject_reason: Optional[str] = None, 
        l_reject_admin_id: Optional[str] = None, 
        l_reject_time: Optional[str] = None, 
        l_company_name: Optional[str] = None, 
        s_name: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_province: Optional[str] = None, 
        s_city: Optional[str] = None, 
        s_area: Optional[str] = None, 
        s_street: Optional[str] = None, 
        s_address: Optional[str] = None, 
        s_owner: Optional[str] = None, 
        s_image: Optional[str] = None, 
        s_reject_reason: Optional[str] = None, 
        s_company_name: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplier:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if name is not None:
        values = name.split(',')
        if len(values) == 1:
            val = values[0]
            items['name'] = val
        else:
            val = values[0]
            if val != '':
                items['name_start'] = val
            
            val = values[1]
            if val != '':
                items['name_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if province is not None:
        values = province.split(',')
        if len(values) == 1:
            val = values[0]
            items['province'] = val
        else:
            val = values[0]
            if val != '':
                items['province_start'] = val
            
            val = values[1]
            if val != '':
                items['province_end'] = val
        
    if city is not None:
        values = city.split(',')
        if len(values) == 1:
            val = values[0]
            items['city'] = val
        else:
            val = values[0]
            if val != '':
                items['city_start'] = val
            
            val = values[1]
            if val != '':
                items['city_end'] = val
        
    if area is not None:
        values = area.split(',')
        if len(values) == 1:
            val = values[0]
            items['area'] = val
        else:
            val = values[0]
            if val != '':
                items['area_start'] = val
            
            val = values[1]
            if val != '':
                items['area_end'] = val
        
    if street is not None:
        values = street.split(',')
        if len(values) == 1:
            val = values[0]
            items['street'] = val
        else:
            val = values[0]
            if val != '':
                items['street_start'] = val
            
            val = values[1]
            if val != '':
                items['street_end'] = val
        
    if address is not None:
        values = address.split(',')
        if len(values) == 1:
            val = values[0]
            items['address'] = val
        else:
            val = values[0]
            if val != '':
                items['address_start'] = val
            
            val = values[1]
            if val != '':
                items['address_end'] = val
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if owner is not None:
        values = owner.split(',')
        if len(values) == 1:
            val = values[0]
            items['owner'] = val
        else:
            val = values[0]
            if val != '':
                items['owner_start'] = val
            
            val = values[1]
            if val != '':
                items['owner_end'] = val
        
    if recommender_id is not None:
        values = recommender_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['recommender_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['recommender_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['recommender_id_end'] = int(val)
        
    if register_time is not None:
        values = register_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['register_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['register_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['register_time_end'] = datetime.fromtimestamp(int(val))
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['type_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['type_end'] = int(val)
        
    if expired_time is not None:
        values = expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['expired_time_end'] = datetime.fromtimestamp(int(val))
        
    if open_time is not None:
        values = open_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['open_time'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['open_time_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['open_time_end'] = int(val)
        
    if close_time is not None:
        values = close_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['close_time'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['close_time_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['close_time_end'] = int(val)
        
    if image is not None:
        values = image.split(',')
        if len(values) == 1:
            val = values[0]
            items['image'] = val
        else:
            val = values[0]
            if val != '':
                items['image_start'] = val
            
            val = values[1]
            if val != '':
                items['image_end'] = val
        
    if owner_id is not None:
        values = owner_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['owner_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['owner_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['owner_id_end'] = int(val)
        
    if category is not None:
        values = category.split(',')
        if len(values) == 1:
            val = values[0]
            items['category'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['category_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['category_end'] = int(val)
        
    if balance is not None:
        values = balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['balance_end'] = int(val)
        
    if reject_reason is not None:
        values = reject_reason.split(',')
        if len(values) == 1:
            val = values[0]
            items['reject_reason'] = val
        else:
            val = values[0]
            if val != '':
                items['reject_reason_start'] = val
            
            val = values[1]
            if val != '':
                items['reject_reason_end'] = val
        
    if reject_admin_id is not None:
        values = reject_admin_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['reject_admin_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['reject_admin_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['reject_admin_id_end'] = int(val)
        
    if reject_time is not None:
        values = reject_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['reject_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['reject_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['reject_time_end'] = datetime.fromtimestamp(int(val))
        
    if company_name is not None:
        values = company_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['company_name'] = val
        else:
            val = values[0]
            if val != '':
                items['company_name_start'] = val
            
            val = values[1]
            if val != '':
                items['company_name_end'] = val
        

    if s_name is not None:
        search_items['name'] = '%' + s_name + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_province is not None:
        search_items['province'] = '%' + s_province + '%'
        
    if s_city is not None:
        search_items['city'] = '%' + s_city + '%'
        
    if s_area is not None:
        search_items['area'] = '%' + s_area + '%'
        
    if s_street is not None:
        search_items['street'] = '%' + s_street + '%'
        
    if s_address is not None:
        search_items['address'] = '%' + s_address + '%'
        
    if s_owner is not None:
        search_items['owner'] = '%' + s_owner + '%'
        
    if s_image is not None:
        search_items['image'] = '%' + s_image + '%'
        
    if s_reject_reason is not None:
        search_items['reject_reason'] = '%' + s_reject_reason + '%'
        
    if s_company_name is not None:
        search_items['company_name'] = '%' + s_company_name + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_name is not None:
        values = l_name.split(',')
        values = [val for val in values]
        set_items['name'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_province is not None:
        values = l_province.split(',')
        values = [val for val in values]
        set_items['province'] = values
        
    if l_city is not None:
        values = l_city.split(',')
        values = [val for val in values]
        set_items['city'] = values
        
    if l_area is not None:
        values = l_area.split(',')
        values = [val for val in values]
        set_items['area'] = values
        
    if l_street is not None:
        values = l_street.split(',')
        values = [val for val in values]
        set_items['street'] = values
        
    if l_address is not None:
        values = l_address.split(',')
        values = [val for val in values]
        set_items['address'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_owner is not None:
        values = l_owner.split(',')
        values = [val for val in values]
        set_items['owner'] = values
        
    if l_recommender_id is not None:
        values = l_recommender_id.split(',')
        values = [int(val) for val in values]
        set_items['recommender_id'] = values
        
    if l_register_time is not None:
        values = l_register_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['register_time'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [int(val) for val in values]
        set_items['type'] = values
        
    if l_expired_time is not None:
        values = l_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['expired_time'] = values
        
    if l_open_time is not None:
        values = l_open_time.split(',')
        values = [int(val) for val in values]
        set_items['open_time'] = values
        
    if l_close_time is not None:
        values = l_close_time.split(',')
        values = [int(val) for val in values]
        set_items['close_time'] = values
        
    if l_image is not None:
        values = l_image.split(',')
        values = [val for val in values]
        set_items['image'] = values
        
    if l_owner_id is not None:
        values = l_owner_id.split(',')
        values = [int(val) for val in values]
        set_items['owner_id'] = values
        
    if l_category is not None:
        values = l_category.split(',')
        values = [int(val) for val in values]
        set_items['category'] = values
        
    if l_balance is not None:
        values = l_balance.split(',')
        values = [int(val) for val in values]
        set_items['balance'] = values
        
    if l_reject_reason is not None:
        values = l_reject_reason.split(',')
        values = [val for val in values]
        set_items['reject_reason'] = values
        
    if l_reject_admin_id is not None:
        values = l_reject_admin_id.split(',')
        values = [int(val) for val in values]
        set_items['reject_admin_id'] = values
        
    if l_reject_time is not None:
        values = l_reject_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['reject_time'] = values
        
    if l_company_name is not None:
        values = l_company_name.split(',')
        values = [val for val in values]
        set_items['company_name'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_supplier(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_supplier(items, search_items, set_items)
    
    return FilterResSupplier(data=data, total=c)


@router.get(f'/supplier/fast_filter', response_model=FilterResSupplier)
async def fast_filter_supplier(
        id: Optional[str] = None, 
        name: Optional[str] = None, 
        phone: Optional[str] = None, 
        province: Optional[str] = None, 
        city: Optional[str] = None, 
        area: Optional[str] = None, 
        street: Optional[str] = None, 
        address: Optional[str] = None, 
        status: Optional[str] = None, 
        owner: Optional[str] = None, 
        recommender_id: Optional[str] = None, 
        register_time: Optional[str] = None, 
        type: Optional[str] = None, 
        expired_time: Optional[str] = None, 
        open_time: Optional[str] = None, 
        close_time: Optional[str] = None, 
        image: Optional[str] = None, 
        owner_id: Optional[str] = None, 
        category: Optional[str] = None, 
        balance: Optional[str] = None, 
        reject_reason: Optional[str] = None, 
        reject_admin_id: Optional[str] = None, 
        reject_time: Optional[str] = None, 
        company_name: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_name: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_province: Optional[str] = None, 
        l_city: Optional[str] = None, 
        l_area: Optional[str] = None, 
        l_street: Optional[str] = None, 
        l_address: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_owner: Optional[str] = None, 
        l_recommender_id: Optional[str] = None, 
        l_register_time: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_expired_time: Optional[str] = None, 
        l_open_time: Optional[str] = None, 
        l_close_time: Optional[str] = None, 
        l_image: Optional[str] = None, 
        l_owner_id: Optional[str] = None, 
        l_category: Optional[str] = None, 
        l_balance: Optional[str] = None, 
        l_reject_reason: Optional[str] = None, 
        l_reject_admin_id: Optional[str] = None, 
        l_reject_time: Optional[str] = None, 
        l_company_name: Optional[str] = None, 
        s_name: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_province: Optional[str] = None, 
        s_city: Optional[str] = None, 
        s_area: Optional[str] = None, 
        s_street: Optional[str] = None, 
        s_address: Optional[str] = None, 
        s_owner: Optional[str] = None, 
        s_image: Optional[str] = None, 
        s_reject_reason: Optional[str] = None, 
        s_company_name: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplier:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if name is not None:
        values = name.split(',')
        if len(values) == 1:
            val = values[0]
            items['name'] = val
        else:
            val = values[0]
            if val != '':
                items['name_start'] = val
            
            val = values[1]
            if val != '':
                items['name_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if province is not None:
        values = province.split(',')
        if len(values) == 1:
            val = values[0]
            items['province'] = val
        else:
            val = values[0]
            if val != '':
                items['province_start'] = val
            
            val = values[1]
            if val != '':
                items['province_end'] = val
        
    if city is not None:
        values = city.split(',')
        if len(values) == 1:
            val = values[0]
            items['city'] = val
        else:
            val = values[0]
            if val != '':
                items['city_start'] = val
            
            val = values[1]
            if val != '':
                items['city_end'] = val
        
    if area is not None:
        values = area.split(',')
        if len(values) == 1:
            val = values[0]
            items['area'] = val
        else:
            val = values[0]
            if val != '':
                items['area_start'] = val
            
            val = values[1]
            if val != '':
                items['area_end'] = val
        
    if street is not None:
        values = street.split(',')
        if len(values) == 1:
            val = values[0]
            items['street'] = val
        else:
            val = values[0]
            if val != '':
                items['street_start'] = val
            
            val = values[1]
            if val != '':
                items['street_end'] = val
        
    if address is not None:
        values = address.split(',')
        if len(values) == 1:
            val = values[0]
            items['address'] = val
        else:
            val = values[0]
            if val != '':
                items['address_start'] = val
            
            val = values[1]
            if val != '':
                items['address_end'] = val
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if owner is not None:
        values = owner.split(',')
        if len(values) == 1:
            val = values[0]
            items['owner'] = val
        else:
            val = values[0]
            if val != '':
                items['owner_start'] = val
            
            val = values[1]
            if val != '':
                items['owner_end'] = val
        
    if recommender_id is not None:
        values = recommender_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['recommender_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['recommender_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['recommender_id_end'] = int(val)
        
    if register_time is not None:
        values = register_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['register_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['register_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['register_time_end'] = datetime.fromtimestamp(int(val))
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['type_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['type_end'] = int(val)
        
    if expired_time is not None:
        values = expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['expired_time_end'] = datetime.fromtimestamp(int(val))
        
    if open_time is not None:
        values = open_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['open_time'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['open_time_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['open_time_end'] = int(val)
        
    if close_time is not None:
        values = close_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['close_time'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['close_time_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['close_time_end'] = int(val)
        
    if image is not None:
        values = image.split(',')
        if len(values) == 1:
            val = values[0]
            items['image'] = val
        else:
            val = values[0]
            if val != '':
                items['image_start'] = val
            
            val = values[1]
            if val != '':
                items['image_end'] = val
        
    if owner_id is not None:
        values = owner_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['owner_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['owner_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['owner_id_end'] = int(val)
        
    if category is not None:
        values = category.split(',')
        if len(values) == 1:
            val = values[0]
            items['category'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['category_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['category_end'] = int(val)
        
    if balance is not None:
        values = balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['balance_end'] = int(val)
        
    if reject_reason is not None:
        values = reject_reason.split(',')
        if len(values) == 1:
            val = values[0]
            items['reject_reason'] = val
        else:
            val = values[0]
            if val != '':
                items['reject_reason_start'] = val
            
            val = values[1]
            if val != '':
                items['reject_reason_end'] = val
        
    if reject_admin_id is not None:
        values = reject_admin_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['reject_admin_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['reject_admin_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['reject_admin_id_end'] = int(val)
        
    if reject_time is not None:
        values = reject_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['reject_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['reject_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['reject_time_end'] = datetime.fromtimestamp(int(val))
        
    if company_name is not None:
        values = company_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['company_name'] = val
        else:
            val = values[0]
            if val != '':
                items['company_name_start'] = val
            
            val = values[1]
            if val != '':
                items['company_name_end'] = val
        

    if s_name is not None:
        search_items['name'] = '%' + s_name + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_province is not None:
        search_items['province'] = '%' + s_province + '%'
        
    if s_city is not None:
        search_items['city'] = '%' + s_city + '%'
        
    if s_area is not None:
        search_items['area'] = '%' + s_area + '%'
        
    if s_street is not None:
        search_items['street'] = '%' + s_street + '%'
        
    if s_address is not None:
        search_items['address'] = '%' + s_address + '%'
        
    if s_owner is not None:
        search_items['owner'] = '%' + s_owner + '%'
        
    if s_image is not None:
        search_items['image'] = '%' + s_image + '%'
        
    if s_reject_reason is not None:
        search_items['reject_reason'] = '%' + s_reject_reason + '%'
        
    if s_company_name is not None:
        search_items['company_name'] = '%' + s_company_name + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_name is not None:
        values = l_name.split(',')
        values = [val for val in values]
        set_items['name'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_province is not None:
        values = l_province.split(',')
        values = [val for val in values]
        set_items['province'] = values
        
    if l_city is not None:
        values = l_city.split(',')
        values = [val for val in values]
        set_items['city'] = values
        
    if l_area is not None:
        values = l_area.split(',')
        values = [val for val in values]
        set_items['area'] = values
        
    if l_street is not None:
        values = l_street.split(',')
        values = [val for val in values]
        set_items['street'] = values
        
    if l_address is not None:
        values = l_address.split(',')
        values = [val for val in values]
        set_items['address'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_owner is not None:
        values = l_owner.split(',')
        values = [val for val in values]
        set_items['owner'] = values
        
    if l_recommender_id is not None:
        values = l_recommender_id.split(',')
        values = [int(val) for val in values]
        set_items['recommender_id'] = values
        
    if l_register_time is not None:
        values = l_register_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['register_time'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [int(val) for val in values]
        set_items['type'] = values
        
    if l_expired_time is not None:
        values = l_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['expired_time'] = values
        
    if l_open_time is not None:
        values = l_open_time.split(',')
        values = [int(val) for val in values]
        set_items['open_time'] = values
        
    if l_close_time is not None:
        values = l_close_time.split(',')
        values = [int(val) for val in values]
        set_items['close_time'] = values
        
    if l_image is not None:
        values = l_image.split(',')
        values = [val for val in values]
        set_items['image'] = values
        
    if l_owner_id is not None:
        values = l_owner_id.split(',')
        values = [int(val) for val in values]
        set_items['owner_id'] = values
        
    if l_category is not None:
        values = l_category.split(',')
        values = [int(val) for val in values]
        set_items['category'] = values
        
    if l_balance is not None:
        values = l_balance.split(',')
        values = [int(val) for val in values]
        set_items['balance'] = values
        
    if l_reject_reason is not None:
        values = l_reject_reason.split(',')
        values = [val for val in values]
        set_items['reject_reason'] = values
        
    if l_reject_admin_id is not None:
        values = l_reject_admin_id.split(',')
        values = [int(val) for val in values]
        set_items['reject_admin_id'] = values
        
    if l_reject_time is not None:
        values = l_reject_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['reject_time'] = values
        
    if l_company_name is not None:
        values = l_company_name.split(',')
        values = [val for val in values]
        set_items['company_name'] = values
            
    
    data = d_db.filter_supplier(items, search_items, set_items, page, page_size)
    return FilterResSupplier(data=data, total=-1)

    
@router.post(f'/supplier_amount/create', response_model=SSupplierAmount)
async def create_supplier_amount(item: CreateSupplierAmount) -> SSupplierAmount:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_supplier_amount(item)
        
    
@router.post(f'/supplier_amount/update', response_model=str)
async def update_supplier_amount(item: SSupplierAmount) -> str:
    d_db.update_supplier_amount(item)
    return "success"

    
@router.get(f'/supplier_amount/get', response_model=SSupplierAmount)
async def get_supplier_amount(supplier_amount_id: int) -> SSupplierAmount:
    return d_db.get_supplier_amount(supplier_amount_id)


@router.get(f'/supplier_amount/filter', response_model=FilterResSupplierAmount)
async def filter_supplier_amount(
        id: Optional[str] = None, 
        type: Optional[str] = None, 
        change: Optional[str] = None, 
        amount: Optional[str] = None, 
        create_time: Optional[str] = None, 
        supplier_id: Optional[str] = None, 
        order_id: Optional[str] = None, 
        description: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_change: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_supplier_id: Optional[str] = None, 
        l_order_id: Optional[str] = None, 
        l_description: Optional[str] = None, 
        s_description: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierAmount:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['type_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['type_end'] = int(val)
        
    if change is not None:
        values = change.split(',')
        if len(values) == 1:
            val = values[0]
            items['change'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['change_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['change_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if supplier_id is not None:
        values = supplier_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_id_end'] = int(val)
        
    if order_id is not None:
        values = order_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['order_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['order_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['order_id_end'] = int(val)
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        

    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [int(val) for val in values]
        set_items['type'] = values
        
    if l_change is not None:
        values = l_change.split(',')
        values = [int(val) for val in values]
        set_items['change'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_supplier_id is not None:
        values = l_supplier_id.split(',')
        values = [int(val) for val in values]
        set_items['supplier_id'] = values
        
    if l_order_id is not None:
        values = l_order_id.split(',')
        values = [int(val) for val in values]
        set_items['order_id'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_supplier_amount(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_supplier_amount(items, search_items, set_items)
    
    return FilterResSupplierAmount(data=data, total=c)


@router.get(f'/supplier_amount/fast_filter', response_model=FilterResSupplierAmount)
async def fast_filter_supplier_amount(
        id: Optional[str] = None, 
        type: Optional[str] = None, 
        change: Optional[str] = None, 
        amount: Optional[str] = None, 
        create_time: Optional[str] = None, 
        supplier_id: Optional[str] = None, 
        order_id: Optional[str] = None, 
        description: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_change: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_supplier_id: Optional[str] = None, 
        l_order_id: Optional[str] = None, 
        l_description: Optional[str] = None, 
        s_description: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierAmount:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['type_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['type_end'] = int(val)
        
    if change is not None:
        values = change.split(',')
        if len(values) == 1:
            val = values[0]
            items['change'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['change_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['change_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if supplier_id is not None:
        values = supplier_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_id_end'] = int(val)
        
    if order_id is not None:
        values = order_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['order_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['order_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['order_id_end'] = int(val)
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        

    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [int(val) for val in values]
        set_items['type'] = values
        
    if l_change is not None:
        values = l_change.split(',')
        values = [int(val) for val in values]
        set_items['change'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_supplier_id is not None:
        values = l_supplier_id.split(',')
        values = [int(val) for val in values]
        set_items['supplier_id'] = values
        
    if l_order_id is not None:
        values = l_order_id.split(',')
        values = [int(val) for val in values]
        set_items['order_id'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
            
    
    data = d_db.filter_supplier_amount(items, search_items, set_items, page, page_size)
    return FilterResSupplierAmount(data=data, total=-1)

    
@router.post(f'/supplier_change_type/create', response_model=SSupplierChangeType)
async def create_supplier_change_type(item: CreateSupplierChangeType) -> SSupplierChangeType:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_supplier_change_type(item)
        
    
@router.post(f'/supplier_change_type/update', response_model=str)
async def update_supplier_change_type(item: SSupplierChangeType) -> str:
    d_db.update_supplier_change_type(item)
    return "success"

    
@router.get(f'/supplier_change_type/get', response_model=SSupplierChangeType)
async def get_supplier_change_type(supplier_change_type_id: int) -> SSupplierChangeType:
    return d_db.get_supplier_change_type(supplier_change_type_id)


@router.get(f'/supplier_change_type/filter', response_model=FilterResSupplierChangeType)
async def filter_supplier_change_type(
        id: Optional[str] = None, 
        type: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        s_type: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierChangeType:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_supplier_change_type(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_supplier_change_type(items, search_items, set_items)
    
    return FilterResSupplierChangeType(data=data, total=c)


@router.get(f'/supplier_change_type/fast_filter', response_model=FilterResSupplierChangeType)
async def fast_filter_supplier_change_type(
        id: Optional[str] = None, 
        type: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type: Optional[str] = None, 
        s_type: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierChangeType:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
            
    
    data = d_db.filter_supplier_change_type(items, search_items, set_items, page, page_size)
    return FilterResSupplierChangeType(data=data, total=-1)

    
@router.post(f'/supplier_income/create', response_model=SSupplierIncome)
async def create_supplier_income(item: CreateSupplierIncome) -> SSupplierIncome:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_supplier_income(item)
        
    
@router.post(f'/supplier_income/update', response_model=str)
async def update_supplier_income(item: SSupplierIncome) -> str:
    d_db.update_supplier_income(item)
    return "success"

    
@router.get(f'/supplier_income/get', response_model=SSupplierIncome)
async def get_supplier_income(supplier_income_id: int) -> SSupplierIncome:
    return d_db.get_supplier_income(supplier_income_id)


@router.get(f'/supplier_income/filter', response_model=FilterResSupplierIncome)
async def filter_supplier_income(
        id: Optional[str] = None, 
        supplier_id: Optional[str] = None, 
        change: Optional[str] = None, 
        balance: Optional[str] = None, 
        type: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        user_withdraw_id: Optional[str] = None, 
        operator_id: Optional[str] = None, 
        out_trade_no: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_supplier_id: Optional[str] = None, 
        l_change: Optional[str] = None, 
        l_balance: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_user_withdraw_id: Optional[str] = None, 
        l_operator_id: Optional[str] = None, 
        l_out_trade_no: Optional[str] = None, 
        s_type: Optional[str] = None, 
        s_description: Optional[str] = None, 
        s_out_trade_no: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierIncome:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if supplier_id is not None:
        values = supplier_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_id_end'] = int(val)
        
    if change is not None:
        values = change.split(',')
        if len(values) == 1:
            val = values[0]
            items['change'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['change_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['change_end'] = int(val)
        
    if balance is not None:
        values = balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['balance_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if user_withdraw_id is not None:
        values = user_withdraw_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_withdraw_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_withdraw_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_withdraw_id_end'] = int(val)
        
    if operator_id is not None:
        values = operator_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['operator_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['operator_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['operator_id_end'] = int(val)
        
    if out_trade_no is not None:
        values = out_trade_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_trade_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_trade_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_trade_no_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        
    if s_out_trade_no is not None:
        search_items['out_trade_no'] = '%' + s_out_trade_no + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_supplier_id is not None:
        values = l_supplier_id.split(',')
        values = [int(val) for val in values]
        set_items['supplier_id'] = values
        
    if l_change is not None:
        values = l_change.split(',')
        values = [int(val) for val in values]
        set_items['change'] = values
        
    if l_balance is not None:
        values = l_balance.split(',')
        values = [int(val) for val in values]
        set_items['balance'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_user_withdraw_id is not None:
        values = l_user_withdraw_id.split(',')
        values = [int(val) for val in values]
        set_items['user_withdraw_id'] = values
        
    if l_operator_id is not None:
        values = l_operator_id.split(',')
        values = [int(val) for val in values]
        set_items['operator_id'] = values
        
    if l_out_trade_no is not None:
        values = l_out_trade_no.split(',')
        values = [val for val in values]
        set_items['out_trade_no'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_supplier_income(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_supplier_income(items, search_items, set_items)
    
    return FilterResSupplierIncome(data=data, total=c)


@router.get(f'/supplier_income/fast_filter', response_model=FilterResSupplierIncome)
async def fast_filter_supplier_income(
        id: Optional[str] = None, 
        supplier_id: Optional[str] = None, 
        change: Optional[str] = None, 
        balance: Optional[str] = None, 
        type: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        user_withdraw_id: Optional[str] = None, 
        operator_id: Optional[str] = None, 
        out_trade_no: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_supplier_id: Optional[str] = None, 
        l_change: Optional[str] = None, 
        l_balance: Optional[str] = None, 
        l_type: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_user_withdraw_id: Optional[str] = None, 
        l_operator_id: Optional[str] = None, 
        l_out_trade_no: Optional[str] = None, 
        s_type: Optional[str] = None, 
        s_description: Optional[str] = None, 
        s_out_trade_no: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierIncome:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if supplier_id is not None:
        values = supplier_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_id_end'] = int(val)
        
    if change is not None:
        values = change.split(',')
        if len(values) == 1:
            val = values[0]
            items['change'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['change_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['change_end'] = int(val)
        
    if balance is not None:
        values = balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['balance_end'] = int(val)
        
    if type is not None:
        values = type.split(',')
        if len(values) == 1:
            val = values[0]
            items['type'] = val
        else:
            val = values[0]
            if val != '':
                items['type_start'] = val
            
            val = values[1]
            if val != '':
                items['type_end'] = val
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if user_withdraw_id is not None:
        values = user_withdraw_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_withdraw_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_withdraw_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_withdraw_id_end'] = int(val)
        
    if operator_id is not None:
        values = operator_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['operator_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['operator_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['operator_id_end'] = int(val)
        
    if out_trade_no is not None:
        values = out_trade_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_trade_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_trade_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_trade_no_end'] = val
        

    if s_type is not None:
        search_items['type'] = '%' + s_type + '%'
        
    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        
    if s_out_trade_no is not None:
        search_items['out_trade_no'] = '%' + s_out_trade_no + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_supplier_id is not None:
        values = l_supplier_id.split(',')
        values = [int(val) for val in values]
        set_items['supplier_id'] = values
        
    if l_change is not None:
        values = l_change.split(',')
        values = [int(val) for val in values]
        set_items['change'] = values
        
    if l_balance is not None:
        values = l_balance.split(',')
        values = [int(val) for val in values]
        set_items['balance'] = values
        
    if l_type is not None:
        values = l_type.split(',')
        values = [val for val in values]
        set_items['type'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_user_withdraw_id is not None:
        values = l_user_withdraw_id.split(',')
        values = [int(val) for val in values]
        set_items['user_withdraw_id'] = values
        
    if l_operator_id is not None:
        values = l_operator_id.split(',')
        values = [int(val) for val in values]
        set_items['operator_id'] = values
        
    if l_out_trade_no is not None:
        values = l_out_trade_no.split(',')
        values = [val for val in values]
        set_items['out_trade_no'] = values
            
    
    data = d_db.filter_supplier_income(items, search_items, set_items, page, page_size)
    return FilterResSupplierIncome(data=data, total=-1)

    
@router.post(f'/supplier_license/create', response_model=SSupplierLicense)
async def create_supplier_license(item: CreateSupplierLicense) -> SSupplierLicense:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_supplier_license(item)
        
    
@router.post(f'/supplier_license/update', response_model=str)
async def update_supplier_license(item: SSupplierLicense) -> str:
    d_db.update_supplier_license(item)
    return "success"

    
@router.get(f'/supplier_license/get', response_model=SSupplierLicense)
async def get_supplier_license(supplier_license_id: int) -> SSupplierLicense:
    return d_db.get_supplier_license(supplier_license_id)


@router.get(f'/supplier_license/filter', response_model=FilterResSupplierLicense)
async def filter_supplier_license(
        id: Optional[str] = None, 
        license: Optional[str] = None, 
        supplier_id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_license: Optional[str] = None, 
        l_supplier_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        s_license: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierLicense:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if license is not None:
        values = license.split(',')
        if len(values) == 1:
            val = values[0]
            items['license'] = val
        else:
            val = values[0]
            if val != '':
                items['license_start'] = val
            
            val = values[1]
            if val != '':
                items['license_end'] = val
        
    if supplier_id is not None:
        values = supplier_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_license is not None:
        search_items['license'] = '%' + s_license + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_license is not None:
        values = l_license.split(',')
        values = [val for val in values]
        set_items['license'] = values
        
    if l_supplier_id is not None:
        values = l_supplier_id.split(',')
        values = [int(val) for val in values]
        set_items['supplier_id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_supplier_license(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_supplier_license(items, search_items, set_items)
    
    return FilterResSupplierLicense(data=data, total=c)


@router.get(f'/supplier_license/fast_filter', response_model=FilterResSupplierLicense)
async def fast_filter_supplier_license(
        id: Optional[str] = None, 
        license: Optional[str] = None, 
        supplier_id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_license: Optional[str] = None, 
        l_supplier_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        s_license: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierLicense:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if license is not None:
        values = license.split(',')
        if len(values) == 1:
            val = values[0]
            items['license'] = val
        else:
            val = values[0]
            if val != '':
                items['license_start'] = val
            
            val = values[1]
            if val != '':
                items['license_end'] = val
        
    if supplier_id is not None:
        values = supplier_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_license is not None:
        search_items['license'] = '%' + s_license + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_license is not None:
        values = l_license.split(',')
        values = [val for val in values]
        set_items['license'] = values
        
    if l_supplier_id is not None:
        values = l_supplier_id.split(',')
        values = [int(val) for val in values]
        set_items['supplier_id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
            
    
    data = d_db.filter_supplier_license(items, search_items, set_items, page, page_size)
    return FilterResSupplierLicense(data=data, total=-1)

    
@router.post(f'/supplier_membership/create', response_model=SSupplierMembership)
async def create_supplier_membership(item: CreateSupplierMembership) -> SSupplierMembership:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_supplier_membership(item)
        
    
@router.post(f'/supplier_membership/update', response_model=str)
async def update_supplier_membership(item: SSupplierMembership) -> str:
    d_db.update_supplier_membership(item)
    return "success"

    
@router.get(f'/supplier_membership/get', response_model=SSupplierMembership)
async def get_supplier_membership(supplier_membership_id: int) -> SSupplierMembership:
    return d_db.get_supplier_membership(supplier_membership_id)


@router.get(f'/supplier_membership/filter', response_model=FilterResSupplierMembership)
async def filter_supplier_membership(
        id: Optional[str] = None, 
        supplier_id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        status: Optional[str] = None, 
        create_time: Optional[str] = None, 
        expired_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_supplier_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_expired_time: Optional[str] = None, 
        s_status: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierMembership:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if supplier_id is not None:
        values = supplier_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = val
        else:
            val = values[0]
            if val != '':
                items['status_start'] = val
            
            val = values[1]
            if val != '':
                items['status_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if expired_time is not None:
        values = expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['expired_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_status is not None:
        search_items['status'] = '%' + s_status + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_supplier_id is not None:
        values = l_supplier_id.split(',')
        values = [int(val) for val in values]
        set_items['supplier_id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [val for val in values]
        set_items['status'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_expired_time is not None:
        values = l_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['expired_time'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_supplier_membership(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_supplier_membership(items, search_items, set_items)
    
    return FilterResSupplierMembership(data=data, total=c)


@router.get(f'/supplier_membership/fast_filter', response_model=FilterResSupplierMembership)
async def fast_filter_supplier_membership(
        id: Optional[str] = None, 
        supplier_id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        status: Optional[str] = None, 
        create_time: Optional[str] = None, 
        expired_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_supplier_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_expired_time: Optional[str] = None, 
        s_status: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierMembership:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if supplier_id is not None:
        values = supplier_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['supplier_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['supplier_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['supplier_id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = val
        else:
            val = values[0]
            if val != '':
                items['status_start'] = val
            
            val = values[1]
            if val != '':
                items['status_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if expired_time is not None:
        values = expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['expired_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['expired_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['expired_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_status is not None:
        search_items['status'] = '%' + s_status + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_supplier_id is not None:
        values = l_supplier_id.split(',')
        values = [int(val) for val in values]
        set_items['supplier_id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [val for val in values]
        set_items['status'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_expired_time is not None:
        values = l_expired_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['expired_time'] = values
            
    
    data = d_db.filter_supplier_membership(items, search_items, set_items, page, page_size)
    return FilterResSupplierMembership(data=data, total=-1)

    
@router.post(f'/supplier_owner/create', response_model=SSupplierOwner)
async def create_supplier_owner(item: CreateSupplierOwner) -> SSupplierOwner:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_supplier_owner(item)
        
    
@router.post(f'/supplier_owner/update', response_model=str)
async def update_supplier_owner(item: SSupplierOwner) -> str:
    d_db.update_supplier_owner(item)
    return "success"

    
@router.get(f'/supplier_owner/get', response_model=SSupplierOwner)
async def get_supplier_owner(supplier_owner_id: int) -> SSupplierOwner:
    return d_db.get_supplier_owner(supplier_owner_id)


@router.get(f'/supplier_owner/filter', response_model=FilterResSupplierOwner)
async def filter_supplier_owner(
        id: Optional[str] = None, 
        name: Optional[str] = None, 
        phone: Optional[str] = None, 
        password: Optional[str] = None, 
        id_card: Optional[str] = None, 
        front_image: Optional[str] = None, 
        back_image: Optional[str] = None, 
        open_id: Optional[str] = None, 
        union_id: Optional[str] = None, 
        level_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_name: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_password: Optional[str] = None, 
        l_id_card: Optional[str] = None, 
        l_front_image: Optional[str] = None, 
        l_back_image: Optional[str] = None, 
        l_open_id: Optional[str] = None, 
        l_union_id: Optional[str] = None, 
        l_level_id: Optional[str] = None, 
        s_name: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_password: Optional[str] = None, 
        s_id_card: Optional[str] = None, 
        s_front_image: Optional[str] = None, 
        s_back_image: Optional[str] = None, 
        s_open_id: Optional[str] = None, 
        s_union_id: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierOwner:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if name is not None:
        values = name.split(',')
        if len(values) == 1:
            val = values[0]
            items['name'] = val
        else:
            val = values[0]
            if val != '':
                items['name_start'] = val
            
            val = values[1]
            if val != '':
                items['name_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if password is not None:
        values = password.split(',')
        if len(values) == 1:
            val = values[0]
            items['password'] = val
        else:
            val = values[0]
            if val != '':
                items['password_start'] = val
            
            val = values[1]
            if val != '':
                items['password_end'] = val
        
    if id_card is not None:
        values = id_card.split(',')
        if len(values) == 1:
            val = values[0]
            items['id_card'] = val
        else:
            val = values[0]
            if val != '':
                items['id_card_start'] = val
            
            val = values[1]
            if val != '':
                items['id_card_end'] = val
        
    if front_image is not None:
        values = front_image.split(',')
        if len(values) == 1:
            val = values[0]
            items['front_image'] = val
        else:
            val = values[0]
            if val != '':
                items['front_image_start'] = val
            
            val = values[1]
            if val != '':
                items['front_image_end'] = val
        
    if back_image is not None:
        values = back_image.split(',')
        if len(values) == 1:
            val = values[0]
            items['back_image'] = val
        else:
            val = values[0]
            if val != '':
                items['back_image_start'] = val
            
            val = values[1]
            if val != '':
                items['back_image_end'] = val
        
    if open_id is not None:
        values = open_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['open_id'] = val
        else:
            val = values[0]
            if val != '':
                items['open_id_start'] = val
            
            val = values[1]
            if val != '':
                items['open_id_end'] = val
        
    if union_id is not None:
        values = union_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['union_id'] = val
        else:
            val = values[0]
            if val != '':
                items['union_id_start'] = val
            
            val = values[1]
            if val != '':
                items['union_id_end'] = val
        
    if level_id is not None:
        values = level_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['level_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['level_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['level_id_end'] = int(val)
        

    if s_name is not None:
        search_items['name'] = '%' + s_name + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_password is not None:
        search_items['password'] = '%' + s_password + '%'
        
    if s_id_card is not None:
        search_items['id_card'] = '%' + s_id_card + '%'
        
    if s_front_image is not None:
        search_items['front_image'] = '%' + s_front_image + '%'
        
    if s_back_image is not None:
        search_items['back_image'] = '%' + s_back_image + '%'
        
    if s_open_id is not None:
        search_items['open_id'] = '%' + s_open_id + '%'
        
    if s_union_id is not None:
        search_items['union_id'] = '%' + s_union_id + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_name is not None:
        values = l_name.split(',')
        values = [val for val in values]
        set_items['name'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_password is not None:
        values = l_password.split(',')
        values = [val for val in values]
        set_items['password'] = values
        
    if l_id_card is not None:
        values = l_id_card.split(',')
        values = [val for val in values]
        set_items['id_card'] = values
        
    if l_front_image is not None:
        values = l_front_image.split(',')
        values = [val for val in values]
        set_items['front_image'] = values
        
    if l_back_image is not None:
        values = l_back_image.split(',')
        values = [val for val in values]
        set_items['back_image'] = values
        
    if l_open_id is not None:
        values = l_open_id.split(',')
        values = [val for val in values]
        set_items['open_id'] = values
        
    if l_union_id is not None:
        values = l_union_id.split(',')
        values = [val for val in values]
        set_items['union_id'] = values
        
    if l_level_id is not None:
        values = l_level_id.split(',')
        values = [int(val) for val in values]
        set_items['level_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_supplier_owner(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_supplier_owner(items, search_items, set_items)
    
    return FilterResSupplierOwner(data=data, total=c)


@router.get(f'/supplier_owner/fast_filter', response_model=FilterResSupplierOwner)
async def fast_filter_supplier_owner(
        id: Optional[str] = None, 
        name: Optional[str] = None, 
        phone: Optional[str] = None, 
        password: Optional[str] = None, 
        id_card: Optional[str] = None, 
        front_image: Optional[str] = None, 
        back_image: Optional[str] = None, 
        open_id: Optional[str] = None, 
        union_id: Optional[str] = None, 
        level_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_name: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_password: Optional[str] = None, 
        l_id_card: Optional[str] = None, 
        l_front_image: Optional[str] = None, 
        l_back_image: Optional[str] = None, 
        l_open_id: Optional[str] = None, 
        l_union_id: Optional[str] = None, 
        l_level_id: Optional[str] = None, 
        s_name: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_password: Optional[str] = None, 
        s_id_card: Optional[str] = None, 
        s_front_image: Optional[str] = None, 
        s_back_image: Optional[str] = None, 
        s_open_id: Optional[str] = None, 
        s_union_id: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierOwner:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if name is not None:
        values = name.split(',')
        if len(values) == 1:
            val = values[0]
            items['name'] = val
        else:
            val = values[0]
            if val != '':
                items['name_start'] = val
            
            val = values[1]
            if val != '':
                items['name_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if password is not None:
        values = password.split(',')
        if len(values) == 1:
            val = values[0]
            items['password'] = val
        else:
            val = values[0]
            if val != '':
                items['password_start'] = val
            
            val = values[1]
            if val != '':
                items['password_end'] = val
        
    if id_card is not None:
        values = id_card.split(',')
        if len(values) == 1:
            val = values[0]
            items['id_card'] = val
        else:
            val = values[0]
            if val != '':
                items['id_card_start'] = val
            
            val = values[1]
            if val != '':
                items['id_card_end'] = val
        
    if front_image is not None:
        values = front_image.split(',')
        if len(values) == 1:
            val = values[0]
            items['front_image'] = val
        else:
            val = values[0]
            if val != '':
                items['front_image_start'] = val
            
            val = values[1]
            if val != '':
                items['front_image_end'] = val
        
    if back_image is not None:
        values = back_image.split(',')
        if len(values) == 1:
            val = values[0]
            items['back_image'] = val
        else:
            val = values[0]
            if val != '':
                items['back_image_start'] = val
            
            val = values[1]
            if val != '':
                items['back_image_end'] = val
        
    if open_id is not None:
        values = open_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['open_id'] = val
        else:
            val = values[0]
            if val != '':
                items['open_id_start'] = val
            
            val = values[1]
            if val != '':
                items['open_id_end'] = val
        
    if union_id is not None:
        values = union_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['union_id'] = val
        else:
            val = values[0]
            if val != '':
                items['union_id_start'] = val
            
            val = values[1]
            if val != '':
                items['union_id_end'] = val
        
    if level_id is not None:
        values = level_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['level_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['level_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['level_id_end'] = int(val)
        

    if s_name is not None:
        search_items['name'] = '%' + s_name + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_password is not None:
        search_items['password'] = '%' + s_password + '%'
        
    if s_id_card is not None:
        search_items['id_card'] = '%' + s_id_card + '%'
        
    if s_front_image is not None:
        search_items['front_image'] = '%' + s_front_image + '%'
        
    if s_back_image is not None:
        search_items['back_image'] = '%' + s_back_image + '%'
        
    if s_open_id is not None:
        search_items['open_id'] = '%' + s_open_id + '%'
        
    if s_union_id is not None:
        search_items['union_id'] = '%' + s_union_id + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_name is not None:
        values = l_name.split(',')
        values = [val for val in values]
        set_items['name'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_password is not None:
        values = l_password.split(',')
        values = [val for val in values]
        set_items['password'] = values
        
    if l_id_card is not None:
        values = l_id_card.split(',')
        values = [val for val in values]
        set_items['id_card'] = values
        
    if l_front_image is not None:
        values = l_front_image.split(',')
        values = [val for val in values]
        set_items['front_image'] = values
        
    if l_back_image is not None:
        values = l_back_image.split(',')
        values = [val for val in values]
        set_items['back_image'] = values
        
    if l_open_id is not None:
        values = l_open_id.split(',')
        values = [val for val in values]
        set_items['open_id'] = values
        
    if l_union_id is not None:
        values = l_union_id.split(',')
        values = [val for val in values]
        set_items['union_id'] = values
        
    if l_level_id is not None:
        values = l_level_id.split(',')
        values = [int(val) for val in values]
        set_items['level_id'] = values
            
    
    data = d_db.filter_supplier_owner(items, search_items, set_items, page, page_size)
    return FilterResSupplierOwner(data=data, total=-1)

    
@router.post(f'/supplier_state/create', response_model=SSupplierState)
async def create_supplier_state(item: CreateSupplierState) -> SSupplierState:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_supplier_state(item)
        
    
@router.post(f'/supplier_state/update', response_model=str)
async def update_supplier_state(item: SSupplierState) -> str:
    d_db.update_supplier_state(item)
    return "success"

    
@router.get(f'/supplier_state/get', response_model=SSupplierState)
async def get_supplier_state(supplier_state_id: int) -> SSupplierState:
    return d_db.get_supplier_state(supplier_state_id)


@router.get(f'/supplier_state/filter', response_model=FilterResSupplierState)
async def filter_supplier_state(
        id: Optional[str] = None, 
        status: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        s_status: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierState:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = val
        else:
            val = values[0]
            if val != '':
                items['status_start'] = val
            
            val = values[1]
            if val != '':
                items['status_end'] = val
        

    if s_status is not None:
        search_items['status'] = '%' + s_status + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [val for val in values]
        set_items['status'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_supplier_state(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_supplier_state(items, search_items, set_items)
    
    return FilterResSupplierState(data=data, total=c)


@router.get(f'/supplier_state/fast_filter', response_model=FilterResSupplierState)
async def fast_filter_supplier_state(
        id: Optional[str] = None, 
        status: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        s_status: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierState:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = val
        else:
            val = values[0]
            if val != '':
                items['status_start'] = val
            
            val = values[1]
            if val != '':
                items['status_end'] = val
        

    if s_status is not None:
        search_items['status'] = '%' + s_status + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [val for val in values]
        set_items['status'] = values
            
    
    data = d_db.filter_supplier_state(items, search_items, set_items, page, page_size)
    return FilterResSupplierState(data=data, total=-1)

    
@router.post(f'/supplier_type/create', response_model=SSupplierType)
async def create_supplier_type(item: CreateSupplierType) -> SSupplierType:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_supplier_type(item)
        
    
@router.post(f'/supplier_type/update', response_model=str)
async def update_supplier_type(item: SSupplierType) -> str:
    d_db.update_supplier_type(item)
    return "success"

    
@router.get(f'/supplier_type/get', response_model=SSupplierType)
async def get_supplier_type(supplier_type_id: int) -> SSupplierType:
    return d_db.get_supplier_type(supplier_type_id)


@router.get(f'/supplier_type/filter', response_model=FilterResSupplierType)
async def filter_supplier_type(
        id: Optional[str] = None, 
        type_: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type_: Optional[str] = None, 
        s_type_: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierType:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type_ is not None:
        values = type_.split(',')
        if len(values) == 1:
            val = values[0]
            items['type_'] = val
        else:
            val = values[0]
            if val != '':
                items['type__start'] = val
            
            val = values[1]
            if val != '':
                items['type__end'] = val
        

    if s_type_ is not None:
        search_items['type_'] = '%' + s_type_ + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type_ is not None:
        values = l_type_.split(',')
        values = [val for val in values]
        set_items['type_'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_supplier_type(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_supplier_type(items, search_items, set_items)
    
    return FilterResSupplierType(data=data, total=c)


@router.get(f'/supplier_type/fast_filter', response_model=FilterResSupplierType)
async def fast_filter_supplier_type(
        id: Optional[str] = None, 
        type_: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_type_: Optional[str] = None, 
        s_type_: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResSupplierType:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if type_ is not None:
        values = type_.split(',')
        if len(values) == 1:
            val = values[0]
            items['type_'] = val
        else:
            val = values[0]
            if val != '':
                items['type__start'] = val
            
            val = values[1]
            if val != '':
                items['type__end'] = val
        

    if s_type_ is not None:
        search_items['type_'] = '%' + s_type_ + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_type_ is not None:
        values = l_type_.split(',')
        values = [val for val in values]
        set_items['type_'] = values
            
    
    data = d_db.filter_supplier_type(items, search_items, set_items, page, page_size)
    return FilterResSupplierType(data=data, total=-1)

    
@router.post(f'/user/create', response_model=SUser)
async def create_user(item: CreateUser) -> SUser:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_user(item)
        
    
@router.post(f'/user/update', response_model=str)
async def update_user(item: SUser) -> str:
    d_db.update_user(item)
    return "success"

    
@router.get(f'/user/get', response_model=SUser)
async def get_user(user_id: int) -> SUser:
    return d_db.get_user(user_id)


@router.get(f'/user/filter', response_model=FilterResUser)
async def filter_user(
        id: Optional[str] = None, 
        username: Optional[str] = None, 
        email: Optional[str] = None, 
        open_id: Optional[str] = None, 
        union_id: Optional[str] = None, 
        password: Optional[str] = None, 
        nickname: Optional[str] = None, 
        phone: Optional[str] = None, 
        id_card: Optional[str] = None, 
        level_id: Optional[str] = None, 
        status: Optional[str] = None, 
        register_time: Optional[str] = None, 
        avatar: Optional[str] = None, 
        invited_user_id: Optional[str] = None, 
        coin: Optional[str] = None, 
        gender: Optional[str] = None, 
        last_active_time: Optional[str] = None, 
        name: Optional[str] = None, 
        is_agree: Optional[str] = None, 
        parent_id: Optional[str] = None, 
        parent_id_history: Optional[str] = None, 
        level_one_time: Optional[str] = None, 
        level_two_time: Optional[str] = None, 
        level_three_time: Optional[str] = None, 
        level_top_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_username: Optional[str] = None, 
        l_email: Optional[str] = None, 
        l_open_id: Optional[str] = None, 
        l_union_id: Optional[str] = None, 
        l_password: Optional[str] = None, 
        l_nickname: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_id_card: Optional[str] = None, 
        l_level_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_register_time: Optional[str] = None, 
        l_avatar: Optional[str] = None, 
        l_invited_user_id: Optional[str] = None, 
        l_coin: Optional[str] = None, 
        l_gender: Optional[str] = None, 
        l_last_active_time: Optional[str] = None, 
        l_name: Optional[str] = None, 
        l_is_agree: Optional[str] = None, 
        l_parent_id: Optional[str] = None, 
        l_parent_id_history: Optional[str] = None, 
        l_level_one_time: Optional[str] = None, 
        l_level_two_time: Optional[str] = None, 
        l_level_three_time: Optional[str] = None, 
        l_level_top_time: Optional[str] = None, 
        s_username: Optional[str] = None, 
        s_email: Optional[str] = None, 
        s_open_id: Optional[str] = None, 
        s_union_id: Optional[str] = None, 
        s_password: Optional[str] = None, 
        s_nickname: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_id_card: Optional[str] = None, 
        s_avatar: Optional[str] = None, 
        s_name: Optional[str] = None, 
        s_parent_id_history: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUser:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if username is not None:
        values = username.split(',')
        if len(values) == 1:
            val = values[0]
            items['username'] = val
        else:
            val = values[0]
            if val != '':
                items['username_start'] = val
            
            val = values[1]
            if val != '':
                items['username_end'] = val
        
    if email is not None:
        values = email.split(',')
        if len(values) == 1:
            val = values[0]
            items['email'] = val
        else:
            val = values[0]
            if val != '':
                items['email_start'] = val
            
            val = values[1]
            if val != '':
                items['email_end'] = val
        
    if open_id is not None:
        values = open_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['open_id'] = val
        else:
            val = values[0]
            if val != '':
                items['open_id_start'] = val
            
            val = values[1]
            if val != '':
                items['open_id_end'] = val
        
    if union_id is not None:
        values = union_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['union_id'] = val
        else:
            val = values[0]
            if val != '':
                items['union_id_start'] = val
            
            val = values[1]
            if val != '':
                items['union_id_end'] = val
        
    if password is not None:
        values = password.split(',')
        if len(values) == 1:
            val = values[0]
            items['password'] = val
        else:
            val = values[0]
            if val != '':
                items['password_start'] = val
            
            val = values[1]
            if val != '':
                items['password_end'] = val
        
    if nickname is not None:
        values = nickname.split(',')
        if len(values) == 1:
            val = values[0]
            items['nickname'] = val
        else:
            val = values[0]
            if val != '':
                items['nickname_start'] = val
            
            val = values[1]
            if val != '':
                items['nickname_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if id_card is not None:
        values = id_card.split(',')
        if len(values) == 1:
            val = values[0]
            items['id_card'] = val
        else:
            val = values[0]
            if val != '':
                items['id_card_start'] = val
            
            val = values[1]
            if val != '':
                items['id_card_end'] = val
        
    if level_id is not None:
        values = level_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['level_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['level_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['level_id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if register_time is not None:
        values = register_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['register_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['register_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['register_time_end'] = datetime.fromtimestamp(int(val))
        
    if avatar is not None:
        values = avatar.split(',')
        if len(values) == 1:
            val = values[0]
            items['avatar'] = val
        else:
            val = values[0]
            if val != '':
                items['avatar_start'] = val
            
            val = values[1]
            if val != '':
                items['avatar_end'] = val
        
    if invited_user_id is not None:
        values = invited_user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['invited_user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['invited_user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['invited_user_id_end'] = int(val)
        
    if coin is not None:
        values = coin.split(',')
        if len(values) == 1:
            val = values[0]
            items['coin'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['coin_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['coin_end'] = int(val)
        
    if gender is not None:
        values = gender.split(',')
        if len(values) == 1:
            val = values[0]
            items['gender'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['gender_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['gender_end'] = int(val)
        
    if last_active_time is not None:
        values = last_active_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['last_active_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['last_active_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['last_active_time_end'] = datetime.fromtimestamp(int(val))
        
    if name is not None:
        values = name.split(',')
        if len(values) == 1:
            val = values[0]
            items['name'] = val
        else:
            val = values[0]
            if val != '':
                items['name_start'] = val
            
            val = values[1]
            if val != '':
                items['name_end'] = val
        
    if is_agree is not None:
        values = is_agree.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_agree'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_agree_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_agree_end'] = int(val)
        
    if parent_id is not None:
        values = parent_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parent_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parent_id_end'] = int(val)
        
    if parent_id_history is not None:
        values = parent_id_history.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_id_history'] = val
        else:
            val = values[0]
            if val != '':
                items['parent_id_history_start'] = val
            
            val = values[1]
            if val != '':
                items['parent_id_history_end'] = val
        
    if level_one_time is not None:
        values = level_one_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['level_one_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['level_one_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['level_one_time_end'] = datetime.fromtimestamp(int(val))
        
    if level_two_time is not None:
        values = level_two_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['level_two_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['level_two_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['level_two_time_end'] = datetime.fromtimestamp(int(val))
        
    if level_three_time is not None:
        values = level_three_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['level_three_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['level_three_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['level_three_time_end'] = datetime.fromtimestamp(int(val))
        
    if level_top_time is not None:
        values = level_top_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['level_top_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['level_top_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['level_top_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_username is not None:
        search_items['username'] = '%' + s_username + '%'
        
    if s_email is not None:
        search_items['email'] = '%' + s_email + '%'
        
    if s_open_id is not None:
        search_items['open_id'] = '%' + s_open_id + '%'
        
    if s_union_id is not None:
        search_items['union_id'] = '%' + s_union_id + '%'
        
    if s_password is not None:
        search_items['password'] = '%' + s_password + '%'
        
    if s_nickname is not None:
        search_items['nickname'] = '%' + s_nickname + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_id_card is not None:
        search_items['id_card'] = '%' + s_id_card + '%'
        
    if s_avatar is not None:
        search_items['avatar'] = '%' + s_avatar + '%'
        
    if s_name is not None:
        search_items['name'] = '%' + s_name + '%'
        
    if s_parent_id_history is not None:
        search_items['parent_id_history'] = '%' + s_parent_id_history + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_username is not None:
        values = l_username.split(',')
        values = [val for val in values]
        set_items['username'] = values
        
    if l_email is not None:
        values = l_email.split(',')
        values = [val for val in values]
        set_items['email'] = values
        
    if l_open_id is not None:
        values = l_open_id.split(',')
        values = [val for val in values]
        set_items['open_id'] = values
        
    if l_union_id is not None:
        values = l_union_id.split(',')
        values = [val for val in values]
        set_items['union_id'] = values
        
    if l_password is not None:
        values = l_password.split(',')
        values = [val for val in values]
        set_items['password'] = values
        
    if l_nickname is not None:
        values = l_nickname.split(',')
        values = [val for val in values]
        set_items['nickname'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_id_card is not None:
        values = l_id_card.split(',')
        values = [val for val in values]
        set_items['id_card'] = values
        
    if l_level_id is not None:
        values = l_level_id.split(',')
        values = [int(val) for val in values]
        set_items['level_id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_register_time is not None:
        values = l_register_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['register_time'] = values
        
    if l_avatar is not None:
        values = l_avatar.split(',')
        values = [val for val in values]
        set_items['avatar'] = values
        
    if l_invited_user_id is not None:
        values = l_invited_user_id.split(',')
        values = [int(val) for val in values]
        set_items['invited_user_id'] = values
        
    if l_coin is not None:
        values = l_coin.split(',')
        values = [int(val) for val in values]
        set_items['coin'] = values
        
    if l_gender is not None:
        values = l_gender.split(',')
        values = [int(val) for val in values]
        set_items['gender'] = values
        
    if l_last_active_time is not None:
        values = l_last_active_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['last_active_time'] = values
        
    if l_name is not None:
        values = l_name.split(',')
        values = [val for val in values]
        set_items['name'] = values
        
    if l_is_agree is not None:
        values = l_is_agree.split(',')
        values = [int(val) for val in values]
        set_items['is_agree'] = values
        
    if l_parent_id is not None:
        values = l_parent_id.split(',')
        values = [int(val) for val in values]
        set_items['parent_id'] = values
        
    if l_parent_id_history is not None:
        values = l_parent_id_history.split(',')
        values = [val for val in values]
        set_items['parent_id_history'] = values
        
    if l_level_one_time is not None:
        values = l_level_one_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['level_one_time'] = values
        
    if l_level_two_time is not None:
        values = l_level_two_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['level_two_time'] = values
        
    if l_level_three_time is not None:
        values = l_level_three_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['level_three_time'] = values
        
    if l_level_top_time is not None:
        values = l_level_top_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['level_top_time'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_user(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_user(items, search_items, set_items)
    
    return FilterResUser(data=data, total=c)


@router.get(f'/user/fast_filter', response_model=FilterResUser)
async def fast_filter_user(
        id: Optional[str] = None, 
        username: Optional[str] = None, 
        email: Optional[str] = None, 
        open_id: Optional[str] = None, 
        union_id: Optional[str] = None, 
        password: Optional[str] = None, 
        nickname: Optional[str] = None, 
        phone: Optional[str] = None, 
        id_card: Optional[str] = None, 
        level_id: Optional[str] = None, 
        status: Optional[str] = None, 
        register_time: Optional[str] = None, 
        avatar: Optional[str] = None, 
        invited_user_id: Optional[str] = None, 
        coin: Optional[str] = None, 
        gender: Optional[str] = None, 
        last_active_time: Optional[str] = None, 
        name: Optional[str] = None, 
        is_agree: Optional[str] = None, 
        parent_id: Optional[str] = None, 
        parent_id_history: Optional[str] = None, 
        level_one_time: Optional[str] = None, 
        level_two_time: Optional[str] = None, 
        level_three_time: Optional[str] = None, 
        level_top_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_username: Optional[str] = None, 
        l_email: Optional[str] = None, 
        l_open_id: Optional[str] = None, 
        l_union_id: Optional[str] = None, 
        l_password: Optional[str] = None, 
        l_nickname: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_id_card: Optional[str] = None, 
        l_level_id: Optional[str] = None, 
        l_status: Optional[str] = None, 
        l_register_time: Optional[str] = None, 
        l_avatar: Optional[str] = None, 
        l_invited_user_id: Optional[str] = None, 
        l_coin: Optional[str] = None, 
        l_gender: Optional[str] = None, 
        l_last_active_time: Optional[str] = None, 
        l_name: Optional[str] = None, 
        l_is_agree: Optional[str] = None, 
        l_parent_id: Optional[str] = None, 
        l_parent_id_history: Optional[str] = None, 
        l_level_one_time: Optional[str] = None, 
        l_level_two_time: Optional[str] = None, 
        l_level_three_time: Optional[str] = None, 
        l_level_top_time: Optional[str] = None, 
        s_username: Optional[str] = None, 
        s_email: Optional[str] = None, 
        s_open_id: Optional[str] = None, 
        s_union_id: Optional[str] = None, 
        s_password: Optional[str] = None, 
        s_nickname: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_id_card: Optional[str] = None, 
        s_avatar: Optional[str] = None, 
        s_name: Optional[str] = None, 
        s_parent_id_history: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUser:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if username is not None:
        values = username.split(',')
        if len(values) == 1:
            val = values[0]
            items['username'] = val
        else:
            val = values[0]
            if val != '':
                items['username_start'] = val
            
            val = values[1]
            if val != '':
                items['username_end'] = val
        
    if email is not None:
        values = email.split(',')
        if len(values) == 1:
            val = values[0]
            items['email'] = val
        else:
            val = values[0]
            if val != '':
                items['email_start'] = val
            
            val = values[1]
            if val != '':
                items['email_end'] = val
        
    if open_id is not None:
        values = open_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['open_id'] = val
        else:
            val = values[0]
            if val != '':
                items['open_id_start'] = val
            
            val = values[1]
            if val != '':
                items['open_id_end'] = val
        
    if union_id is not None:
        values = union_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['union_id'] = val
        else:
            val = values[0]
            if val != '':
                items['union_id_start'] = val
            
            val = values[1]
            if val != '':
                items['union_id_end'] = val
        
    if password is not None:
        values = password.split(',')
        if len(values) == 1:
            val = values[0]
            items['password'] = val
        else:
            val = values[0]
            if val != '':
                items['password_start'] = val
            
            val = values[1]
            if val != '':
                items['password_end'] = val
        
    if nickname is not None:
        values = nickname.split(',')
        if len(values) == 1:
            val = values[0]
            items['nickname'] = val
        else:
            val = values[0]
            if val != '':
                items['nickname_start'] = val
            
            val = values[1]
            if val != '':
                items['nickname_end'] = val
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if id_card is not None:
        values = id_card.split(',')
        if len(values) == 1:
            val = values[0]
            items['id_card'] = val
        else:
            val = values[0]
            if val != '':
                items['id_card_start'] = val
            
            val = values[1]
            if val != '':
                items['id_card_end'] = val
        
    if level_id is not None:
        values = level_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['level_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['level_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['level_id_end'] = int(val)
        
    if status is not None:
        values = status.split(',')
        if len(values) == 1:
            val = values[0]
            items['status'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['status_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['status_end'] = int(val)
        
    if register_time is not None:
        values = register_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['register_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['register_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['register_time_end'] = datetime.fromtimestamp(int(val))
        
    if avatar is not None:
        values = avatar.split(',')
        if len(values) == 1:
            val = values[0]
            items['avatar'] = val
        else:
            val = values[0]
            if val != '':
                items['avatar_start'] = val
            
            val = values[1]
            if val != '':
                items['avatar_end'] = val
        
    if invited_user_id is not None:
        values = invited_user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['invited_user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['invited_user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['invited_user_id_end'] = int(val)
        
    if coin is not None:
        values = coin.split(',')
        if len(values) == 1:
            val = values[0]
            items['coin'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['coin_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['coin_end'] = int(val)
        
    if gender is not None:
        values = gender.split(',')
        if len(values) == 1:
            val = values[0]
            items['gender'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['gender_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['gender_end'] = int(val)
        
    if last_active_time is not None:
        values = last_active_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['last_active_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['last_active_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['last_active_time_end'] = datetime.fromtimestamp(int(val))
        
    if name is not None:
        values = name.split(',')
        if len(values) == 1:
            val = values[0]
            items['name'] = val
        else:
            val = values[0]
            if val != '':
                items['name_start'] = val
            
            val = values[1]
            if val != '':
                items['name_end'] = val
        
    if is_agree is not None:
        values = is_agree.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_agree'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_agree_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_agree_end'] = int(val)
        
    if parent_id is not None:
        values = parent_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['parent_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['parent_id_end'] = int(val)
        
    if parent_id_history is not None:
        values = parent_id_history.split(',')
        if len(values) == 1:
            val = values[0]
            items['parent_id_history'] = val
        else:
            val = values[0]
            if val != '':
                items['parent_id_history_start'] = val
            
            val = values[1]
            if val != '':
                items['parent_id_history_end'] = val
        
    if level_one_time is not None:
        values = level_one_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['level_one_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['level_one_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['level_one_time_end'] = datetime.fromtimestamp(int(val))
        
    if level_two_time is not None:
        values = level_two_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['level_two_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['level_two_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['level_two_time_end'] = datetime.fromtimestamp(int(val))
        
    if level_three_time is not None:
        values = level_three_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['level_three_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['level_three_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['level_three_time_end'] = datetime.fromtimestamp(int(val))
        
    if level_top_time is not None:
        values = level_top_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['level_top_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['level_top_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['level_top_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_username is not None:
        search_items['username'] = '%' + s_username + '%'
        
    if s_email is not None:
        search_items['email'] = '%' + s_email + '%'
        
    if s_open_id is not None:
        search_items['open_id'] = '%' + s_open_id + '%'
        
    if s_union_id is not None:
        search_items['union_id'] = '%' + s_union_id + '%'
        
    if s_password is not None:
        search_items['password'] = '%' + s_password + '%'
        
    if s_nickname is not None:
        search_items['nickname'] = '%' + s_nickname + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_id_card is not None:
        search_items['id_card'] = '%' + s_id_card + '%'
        
    if s_avatar is not None:
        search_items['avatar'] = '%' + s_avatar + '%'
        
    if s_name is not None:
        search_items['name'] = '%' + s_name + '%'
        
    if s_parent_id_history is not None:
        search_items['parent_id_history'] = '%' + s_parent_id_history + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_username is not None:
        values = l_username.split(',')
        values = [val for val in values]
        set_items['username'] = values
        
    if l_email is not None:
        values = l_email.split(',')
        values = [val for val in values]
        set_items['email'] = values
        
    if l_open_id is not None:
        values = l_open_id.split(',')
        values = [val for val in values]
        set_items['open_id'] = values
        
    if l_union_id is not None:
        values = l_union_id.split(',')
        values = [val for val in values]
        set_items['union_id'] = values
        
    if l_password is not None:
        values = l_password.split(',')
        values = [val for val in values]
        set_items['password'] = values
        
    if l_nickname is not None:
        values = l_nickname.split(',')
        values = [val for val in values]
        set_items['nickname'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_id_card is not None:
        values = l_id_card.split(',')
        values = [val for val in values]
        set_items['id_card'] = values
        
    if l_level_id is not None:
        values = l_level_id.split(',')
        values = [int(val) for val in values]
        set_items['level_id'] = values
        
    if l_status is not None:
        values = l_status.split(',')
        values = [int(val) for val in values]
        set_items['status'] = values
        
    if l_register_time is not None:
        values = l_register_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['register_time'] = values
        
    if l_avatar is not None:
        values = l_avatar.split(',')
        values = [val for val in values]
        set_items['avatar'] = values
        
    if l_invited_user_id is not None:
        values = l_invited_user_id.split(',')
        values = [int(val) for val in values]
        set_items['invited_user_id'] = values
        
    if l_coin is not None:
        values = l_coin.split(',')
        values = [int(val) for val in values]
        set_items['coin'] = values
        
    if l_gender is not None:
        values = l_gender.split(',')
        values = [int(val) for val in values]
        set_items['gender'] = values
        
    if l_last_active_time is not None:
        values = l_last_active_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['last_active_time'] = values
        
    if l_name is not None:
        values = l_name.split(',')
        values = [val for val in values]
        set_items['name'] = values
        
    if l_is_agree is not None:
        values = l_is_agree.split(',')
        values = [int(val) for val in values]
        set_items['is_agree'] = values
        
    if l_parent_id is not None:
        values = l_parent_id.split(',')
        values = [int(val) for val in values]
        set_items['parent_id'] = values
        
    if l_parent_id_history is not None:
        values = l_parent_id_history.split(',')
        values = [val for val in values]
        set_items['parent_id_history'] = values
        
    if l_level_one_time is not None:
        values = l_level_one_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['level_one_time'] = values
        
    if l_level_two_time is not None:
        values = l_level_two_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['level_two_time'] = values
        
    if l_level_three_time is not None:
        values = l_level_three_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['level_three_time'] = values
        
    if l_level_top_time is not None:
        values = l_level_top_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['level_top_time'] = values
            
    
    data = d_db.filter_user(items, search_items, set_items, page, page_size)
    return FilterResUser(data=data, total=-1)

    
@router.post(f'/user_account/create', response_model=SUserAccount)
async def create_user_account(item: CreateUserAccount) -> SUserAccount:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_user_account(item)
        
    
@router.post(f'/user_account/update', response_model=str)
async def update_user_account(item: SUserAccount) -> str:
    d_db.update_user_account(item)
    return "success"

    
@router.get(f'/user_account/get', response_model=SUserAccount)
async def get_user_account(user_account_id: int) -> SUserAccount:
    return d_db.get_user_account(user_account_id)


@router.get(f'/user_account/filter', response_model=FilterResUserAccount)
async def filter_user_account(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        balance: Optional[str] = None, 
        lock_balance: Optional[str] = None, 
        coin: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        freeze_balance: Optional[str] = None, 
        update_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_balance: Optional[str] = None, 
        l_lock_balance: Optional[str] = None, 
        l_coin: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_freeze_balance: Optional[str] = None, 
        l_update_time: Optional[str] = None, 
        s_description: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserAccount:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if balance is not None:
        values = balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['balance_end'] = int(val)
        
    if lock_balance is not None:
        values = lock_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['lock_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['lock_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['lock_balance_end'] = int(val)
        
    if coin is not None:
        values = coin.split(',')
        if len(values) == 1:
            val = values[0]
            items['coin'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['coin_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['coin_end'] = int(val)
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if freeze_balance is not None:
        values = freeze_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['freeze_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['freeze_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['freeze_balance_end'] = int(val)
        
    if update_time is not None:
        values = update_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['update_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['update_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['update_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_balance is not None:
        values = l_balance.split(',')
        values = [int(val) for val in values]
        set_items['balance'] = values
        
    if l_lock_balance is not None:
        values = l_lock_balance.split(',')
        values = [int(val) for val in values]
        set_items['lock_balance'] = values
        
    if l_coin is not None:
        values = l_coin.split(',')
        values = [int(val) for val in values]
        set_items['coin'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_freeze_balance is not None:
        values = l_freeze_balance.split(',')
        values = [int(val) for val in values]
        set_items['freeze_balance'] = values
        
    if l_update_time is not None:
        values = l_update_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['update_time'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_user_account(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_user_account(items, search_items, set_items)
    
    return FilterResUserAccount(data=data, total=c)


@router.get(f'/user_account/fast_filter', response_model=FilterResUserAccount)
async def fast_filter_user_account(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        balance: Optional[str] = None, 
        lock_balance: Optional[str] = None, 
        coin: Optional[str] = None, 
        description: Optional[str] = None, 
        create_time: Optional[str] = None, 
        freeze_balance: Optional[str] = None, 
        update_time: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_balance: Optional[str] = None, 
        l_lock_balance: Optional[str] = None, 
        l_coin: Optional[str] = None, 
        l_description: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_freeze_balance: Optional[str] = None, 
        l_update_time: Optional[str] = None, 
        s_description: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserAccount:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if balance is not None:
        values = balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['balance_end'] = int(val)
        
    if lock_balance is not None:
        values = lock_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['lock_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['lock_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['lock_balance_end'] = int(val)
        
    if coin is not None:
        values = coin.split(',')
        if len(values) == 1:
            val = values[0]
            items['coin'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['coin_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['coin_end'] = int(val)
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if freeze_balance is not None:
        values = freeze_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['freeze_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['freeze_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['freeze_balance_end'] = int(val)
        
    if update_time is not None:
        values = update_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['update_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['update_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['update_time_end'] = datetime.fromtimestamp(int(val))
        

    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_balance is not None:
        values = l_balance.split(',')
        values = [int(val) for val in values]
        set_items['balance'] = values
        
    if l_lock_balance is not None:
        values = l_lock_balance.split(',')
        values = [int(val) for val in values]
        set_items['lock_balance'] = values
        
    if l_coin is not None:
        values = l_coin.split(',')
        values = [int(val) for val in values]
        set_items['coin'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_freeze_balance is not None:
        values = l_freeze_balance.split(',')
        values = [int(val) for val in values]
        set_items['freeze_balance'] = values
        
    if l_update_time is not None:
        values = l_update_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['update_time'] = values
            
    
    data = d_db.filter_user_account(items, search_items, set_items, page, page_size)
    return FilterResUserAccount(data=data, total=-1)

    
@router.post(f'/user_bank/create', response_model=SUserBank)
async def create_user_bank(item: CreateUserBank) -> SUserBank:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_user_bank(item)
        
    
@router.post(f'/user_bank/update', response_model=str)
async def update_user_bank(item: SUserBank) -> str:
    d_db.update_user_bank(item)
    return "success"

    
@router.get(f'/user_bank/get', response_model=SUserBank)
async def get_user_bank(user_bank_id: int) -> SUserBank:
    return d_db.get_user_bank(user_bank_id)


@router.get(f'/user_bank/filter', response_model=FilterResUserBank)
async def filter_user_bank(
        id: Optional[str] = None, 
        bank_name: Optional[str] = None, 
        username: Optional[str] = None, 
        id_card: Optional[str] = None, 
        user_id: Optional[str] = None, 
        phone: Optional[str] = None, 
        bank_address: Optional[str] = None, 
        is_default: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_bank_name: Optional[str] = None, 
        l_username: Optional[str] = None, 
        l_id_card: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_bank_address: Optional[str] = None, 
        l_is_default: Optional[str] = None, 
        s_bank_name: Optional[str] = None, 
        s_username: Optional[str] = None, 
        s_id_card: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_bank_address: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserBank:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if bank_name is not None:
        values = bank_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['bank_name'] = val
        else:
            val = values[0]
            if val != '':
                items['bank_name_start'] = val
            
            val = values[1]
            if val != '':
                items['bank_name_end'] = val
        
    if username is not None:
        values = username.split(',')
        if len(values) == 1:
            val = values[0]
            items['username'] = val
        else:
            val = values[0]
            if val != '':
                items['username_start'] = val
            
            val = values[1]
            if val != '':
                items['username_end'] = val
        
    if id_card is not None:
        values = id_card.split(',')
        if len(values) == 1:
            val = values[0]
            items['id_card'] = val
        else:
            val = values[0]
            if val != '':
                items['id_card_start'] = val
            
            val = values[1]
            if val != '':
                items['id_card_end'] = val
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if bank_address is not None:
        values = bank_address.split(',')
        if len(values) == 1:
            val = values[0]
            items['bank_address'] = val
        else:
            val = values[0]
            if val != '':
                items['bank_address_start'] = val
            
            val = values[1]
            if val != '':
                items['bank_address_end'] = val
        
    if is_default is not None:
        values = is_default.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_default'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_default_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_default_end'] = int(val)
        

    if s_bank_name is not None:
        search_items['bank_name'] = '%' + s_bank_name + '%'
        
    if s_username is not None:
        search_items['username'] = '%' + s_username + '%'
        
    if s_id_card is not None:
        search_items['id_card'] = '%' + s_id_card + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_bank_address is not None:
        search_items['bank_address'] = '%' + s_bank_address + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_bank_name is not None:
        values = l_bank_name.split(',')
        values = [val for val in values]
        set_items['bank_name'] = values
        
    if l_username is not None:
        values = l_username.split(',')
        values = [val for val in values]
        set_items['username'] = values
        
    if l_id_card is not None:
        values = l_id_card.split(',')
        values = [val for val in values]
        set_items['id_card'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_bank_address is not None:
        values = l_bank_address.split(',')
        values = [val for val in values]
        set_items['bank_address'] = values
        
    if l_is_default is not None:
        values = l_is_default.split(',')
        values = [int(val) for val in values]
        set_items['is_default'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_user_bank(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_user_bank(items, search_items, set_items)
    
    return FilterResUserBank(data=data, total=c)


@router.get(f'/user_bank/fast_filter', response_model=FilterResUserBank)
async def fast_filter_user_bank(
        id: Optional[str] = None, 
        bank_name: Optional[str] = None, 
        username: Optional[str] = None, 
        id_card: Optional[str] = None, 
        user_id: Optional[str] = None, 
        phone: Optional[str] = None, 
        bank_address: Optional[str] = None, 
        is_default: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_bank_name: Optional[str] = None, 
        l_username: Optional[str] = None, 
        l_id_card: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        l_bank_address: Optional[str] = None, 
        l_is_default: Optional[str] = None, 
        s_bank_name: Optional[str] = None, 
        s_username: Optional[str] = None, 
        s_id_card: Optional[str] = None, 
        s_phone: Optional[str] = None, 
        s_bank_address: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserBank:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if bank_name is not None:
        values = bank_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['bank_name'] = val
        else:
            val = values[0]
            if val != '':
                items['bank_name_start'] = val
            
            val = values[1]
            if val != '':
                items['bank_name_end'] = val
        
    if username is not None:
        values = username.split(',')
        if len(values) == 1:
            val = values[0]
            items['username'] = val
        else:
            val = values[0]
            if val != '':
                items['username_start'] = val
            
            val = values[1]
            if val != '':
                items['username_end'] = val
        
    if id_card is not None:
        values = id_card.split(',')
        if len(values) == 1:
            val = values[0]
            items['id_card'] = val
        else:
            val = values[0]
            if val != '':
                items['id_card_start'] = val
            
            val = values[1]
            if val != '':
                items['id_card_end'] = val
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        
    if bank_address is not None:
        values = bank_address.split(',')
        if len(values) == 1:
            val = values[0]
            items['bank_address'] = val
        else:
            val = values[0]
            if val != '':
                items['bank_address_start'] = val
            
            val = values[1]
            if val != '':
                items['bank_address_end'] = val
        
    if is_default is not None:
        values = is_default.split(',')
        if len(values) == 1:
            val = values[0]
            items['is_default'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['is_default_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['is_default_end'] = int(val)
        

    if s_bank_name is not None:
        search_items['bank_name'] = '%' + s_bank_name + '%'
        
    if s_username is not None:
        search_items['username'] = '%' + s_username + '%'
        
    if s_id_card is not None:
        search_items['id_card'] = '%' + s_id_card + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        
    if s_bank_address is not None:
        search_items['bank_address'] = '%' + s_bank_address + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_bank_name is not None:
        values = l_bank_name.split(',')
        values = [val for val in values]
        set_items['bank_name'] = values
        
    if l_username is not None:
        values = l_username.split(',')
        values = [val for val in values]
        set_items['username'] = values
        
    if l_id_card is not None:
        values = l_id_card.split(',')
        values = [val for val in values]
        set_items['id_card'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
        
    if l_bank_address is not None:
        values = l_bank_address.split(',')
        values = [val for val in values]
        set_items['bank_address'] = values
        
    if l_is_default is not None:
        values = l_is_default.split(',')
        values = [int(val) for val in values]
        set_items['is_default'] = values
            
    
    data = d_db.filter_user_bank(items, search_items, set_items, page, page_size)
    return FilterResUserBank(data=data, total=-1)

    
@router.post(f'/user_fav/create', response_model=SUserFav)
async def create_user_fav(item: CreateUserFav) -> SUserFav:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_user_fav(item)
        
    
@router.post(f'/user_fav/update', response_model=str)
async def update_user_fav(item: SUserFav) -> str:
    d_db.update_user_fav(item)
    return "success"

    
@router.get(f'/user_fav/get', response_model=SUserFav)
async def get_user_fav(user_fav_id: int) -> SUserFav:
    return d_db.get_user_fav(user_fav_id)


@router.get(f'/user_fav/filter', response_model=FilterResUserFav)
async def filter_user_fav(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        spec_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_spec_id: Optional[str] = None, 
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserFav:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if spec_id is not None:
        values = spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['spec_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_spec_id is not None:
        values = l_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['spec_id'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_user_fav(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_user_fav(items, search_items, set_items)
    
    return FilterResUserFav(data=data, total=c)


@router.get(f'/user_fav/fast_filter', response_model=FilterResUserFav)
async def fast_filter_user_fav(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        good_id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        spec_id: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_good_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_spec_id: Optional[str] = None, 
        page: int = 1, 
        page_size: int = 20) -> FilterResUserFav:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if good_id is not None:
        values = good_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['good_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['good_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['good_id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if spec_id is not None:
        values = spec_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['spec_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['spec_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['spec_id_end'] = int(val)
        


    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_good_id is not None:
        values = l_good_id.split(',')
        values = [int(val) for val in values]
        set_items['good_id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_spec_id is not None:
        values = l_spec_id.split(',')
        values = [int(val) for val in values]
        set_items['spec_id'] = values
            
    
    data = d_db.filter_user_fav(items, search_items, set_items, page, page_size)
    return FilterResUserFav(data=data, total=-1)

    
@router.post(f'/user_level/create', response_model=SUserLevel)
async def create_user_level(item: CreateUserLevel) -> SUserLevel:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_user_level(item)
        
    
@router.post(f'/user_level/update', response_model=str)
async def update_user_level(item: SUserLevel) -> str:
    d_db.update_user_level(item)
    return "success"

    
@router.get(f'/user_level/get', response_model=SUserLevel)
async def get_user_level(user_level_id: int) -> SUserLevel:
    return d_db.get_user_level(user_level_id)


@router.get(f'/user_level/filter', response_model=FilterResUserLevel)
async def filter_user_level(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserLevel:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_user_level(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_user_level(items, search_items, set_items)
    
    return FilterResUserLevel(data=data, total=c)


@router.get(f'/user_level/fast_filter', response_model=FilterResUserLevel)
async def fast_filter_user_level(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserLevel:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    data = d_db.filter_user_level(items, search_items, set_items, page, page_size)
    return FilterResUserLevel(data=data, total=-1)

    
@router.post(f'/user_payment_history/create', response_model=SUserPaymentHistory)
async def create_user_payment_history(item: CreateUserPaymentHistory) -> SUserPaymentHistory:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_user_payment_history(item)
        
    
@router.post(f'/user_payment_history/update', response_model=str)
async def update_user_payment_history(item: SUserPaymentHistory) -> str:
    d_db.update_user_payment_history(item)
    return "success"

    
@router.get(f'/user_payment_history/get', response_model=SUserPaymentHistory)
async def get_user_payment_history(user_payment_history_id: int) -> SUserPaymentHistory:
    return d_db.get_user_payment_history(user_payment_history_id)


@router.get(f'/user_payment_history/filter', response_model=FilterResUserPaymentHistory)
async def filter_user_payment_history(
        id: Optional[str] = None, 
        fee: Optional[str] = None, 
        create_time: Optional[str] = None, 
        description: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_fee: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_description: Optional[str] = None, 
        s_description: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserPaymentHistory:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if fee is not None:
        values = fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['fee_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        

    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_fee is not None:
        values = l_fee.split(',')
        values = [int(val) for val in values]
        set_items['fee'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_user_payment_history(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_user_payment_history(items, search_items, set_items)
    
    return FilterResUserPaymentHistory(data=data, total=c)


@router.get(f'/user_payment_history/fast_filter', response_model=FilterResUserPaymentHistory)
async def fast_filter_user_payment_history(
        id: Optional[str] = None, 
        fee: Optional[str] = None, 
        create_time: Optional[str] = None, 
        description: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_fee: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_description: Optional[str] = None, 
        s_description: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserPaymentHistory:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if fee is not None:
        values = fee.split(',')
        if len(values) == 1:
            val = values[0]
            items['fee'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['fee_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['fee_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if description is not None:
        values = description.split(',')
        if len(values) == 1:
            val = values[0]
            items['description'] = val
        else:
            val = values[0]
            if val != '':
                items['description_start'] = val
            
            val = values[1]
            if val != '':
                items['description_end'] = val
        

    if s_description is not None:
        search_items['description'] = '%' + s_description + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_fee is not None:
        values = l_fee.split(',')
        values = [int(val) for val in values]
        set_items['fee'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_description is not None:
        values = l_description.split(',')
        values = [val for val in values]
        set_items['description'] = values
            
    
    data = d_db.filter_user_payment_history(items, search_items, set_items, page, page_size)
    return FilterResUserPaymentHistory(data=data, total=-1)

    
@router.post(f'/user_phone_code/create', response_model=SUserPhoneCode)
async def create_user_phone_code(item: CreateUserPhoneCode) -> SUserPhoneCode:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_user_phone_code(item)
        
    
@router.post(f'/user_phone_code/update', response_model=str)
async def update_user_phone_code(item: SUserPhoneCode) -> str:
    d_db.update_user_phone_code(item)
    return "success"

    
@router.get(f'/user_phone_code/get', response_model=SUserPhoneCode)
async def get_user_phone_code(user_phone_code_id: int) -> SUserPhoneCode:
    return d_db.get_user_phone_code(user_phone_code_id)


@router.get(f'/user_phone_code/filter', response_model=FilterResUserPhoneCode)
async def filter_user_phone_code(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        code: Optional[str] = None, 
        expired_time: Optional[str] = None, 
        send_time: Optional[str] = None, 
        employee_id: Optional[str] = None, 
        store_owner_id: Optional[str] = None, 
        worker_id: Optional[str] = None, 
        phone: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_code: Optional[str] = None, 
        l_expired_time: Optional[str] = None, 
        l_send_time: Optional[str] = None, 
        l_employee_id: Optional[str] = None, 
        l_store_owner_id: Optional[str] = None, 
        l_worker_id: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        s_code: Optional[str] = None, 
        s_phone: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserPhoneCode:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if code is not None:
        values = code.split(',')
        if len(values) == 1:
            val = values[0]
            items['code'] = val
        else:
            val = values[0]
            if val != '':
                items['code_start'] = val
            
            val = values[1]
            if val != '':
                items['code_end'] = val
        
    if expired_time is not None:
        values = expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['expired_time'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['expired_time_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['expired_time_end'] = int(val)
        
    if send_time is not None:
        values = send_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['send_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['send_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['send_time_end'] = datetime.fromtimestamp(int(val))
        
    if employee_id is not None:
        values = employee_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['employee_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['employee_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['employee_id_end'] = int(val)
        
    if store_owner_id is not None:
        values = store_owner_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_owner_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_owner_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_owner_id_end'] = int(val)
        
    if worker_id is not None:
        values = worker_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['worker_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['worker_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['worker_id_end'] = int(val)
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        

    if s_code is not None:
        search_items['code'] = '%' + s_code + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_code is not None:
        values = l_code.split(',')
        values = [val for val in values]
        set_items['code'] = values
        
    if l_expired_time is not None:
        values = l_expired_time.split(',')
        values = [int(val) for val in values]
        set_items['expired_time'] = values
        
    if l_send_time is not None:
        values = l_send_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['send_time'] = values
        
    if l_employee_id is not None:
        values = l_employee_id.split(',')
        values = [int(val) for val in values]
        set_items['employee_id'] = values
        
    if l_store_owner_id is not None:
        values = l_store_owner_id.split(',')
        values = [int(val) for val in values]
        set_items['store_owner_id'] = values
        
    if l_worker_id is not None:
        values = l_worker_id.split(',')
        values = [int(val) for val in values]
        set_items['worker_id'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_user_phone_code(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_user_phone_code(items, search_items, set_items)
    
    return FilterResUserPhoneCode(data=data, total=c)


@router.get(f'/user_phone_code/fast_filter', response_model=FilterResUserPhoneCode)
async def fast_filter_user_phone_code(
        id: Optional[str] = None, 
        user_id: Optional[str] = None, 
        code: Optional[str] = None, 
        expired_time: Optional[str] = None, 
        send_time: Optional[str] = None, 
        employee_id: Optional[str] = None, 
        store_owner_id: Optional[str] = None, 
        worker_id: Optional[str] = None, 
        phone: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_code: Optional[str] = None, 
        l_expired_time: Optional[str] = None, 
        l_send_time: Optional[str] = None, 
        l_employee_id: Optional[str] = None, 
        l_store_owner_id: Optional[str] = None, 
        l_worker_id: Optional[str] = None, 
        l_phone: Optional[str] = None, 
        s_code: Optional[str] = None, 
        s_phone: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserPhoneCode:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if code is not None:
        values = code.split(',')
        if len(values) == 1:
            val = values[0]
            items['code'] = val
        else:
            val = values[0]
            if val != '':
                items['code_start'] = val
            
            val = values[1]
            if val != '':
                items['code_end'] = val
        
    if expired_time is not None:
        values = expired_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['expired_time'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['expired_time_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['expired_time_end'] = int(val)
        
    if send_time is not None:
        values = send_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['send_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['send_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['send_time_end'] = datetime.fromtimestamp(int(val))
        
    if employee_id is not None:
        values = employee_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['employee_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['employee_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['employee_id_end'] = int(val)
        
    if store_owner_id is not None:
        values = store_owner_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['store_owner_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['store_owner_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['store_owner_id_end'] = int(val)
        
    if worker_id is not None:
        values = worker_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['worker_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['worker_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['worker_id_end'] = int(val)
        
    if phone is not None:
        values = phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['phone'] = val
        else:
            val = values[0]
            if val != '':
                items['phone_start'] = val
            
            val = values[1]
            if val != '':
                items['phone_end'] = val
        

    if s_code is not None:
        search_items['code'] = '%' + s_code + '%'
        
    if s_phone is not None:
        search_items['phone'] = '%' + s_phone + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_code is not None:
        values = l_code.split(',')
        values = [val for val in values]
        set_items['code'] = values
        
    if l_expired_time is not None:
        values = l_expired_time.split(',')
        values = [int(val) for val in values]
        set_items['expired_time'] = values
        
    if l_send_time is not None:
        values = l_send_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['send_time'] = values
        
    if l_employee_id is not None:
        values = l_employee_id.split(',')
        values = [int(val) for val in values]
        set_items['employee_id'] = values
        
    if l_store_owner_id is not None:
        values = l_store_owner_id.split(',')
        values = [int(val) for val in values]
        set_items['store_owner_id'] = values
        
    if l_worker_id is not None:
        values = l_worker_id.split(',')
        values = [int(val) for val in values]
        set_items['worker_id'] = values
        
    if l_phone is not None:
        values = l_phone.split(',')
        values = [val for val in values]
        set_items['phone'] = values
            
    
    data = d_db.filter_user_phone_code(items, search_items, set_items, page, page_size)
    return FilterResUserPhoneCode(data=data, total=-1)

    
@router.post(f'/user_withdraw/create', response_model=SUserWithdraw)
async def create_user_withdraw(item: CreateUserWithdraw) -> SUserWithdraw:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_user_withdraw(item)
        
    
@router.post(f'/user_withdraw/update', response_model=str)
async def update_user_withdraw(item: SUserWithdraw) -> str:
    d_db.update_user_withdraw(item)
    return "success"

    
@router.get(f'/user_withdraw/get', response_model=SUserWithdraw)
async def get_user_withdraw(user_withdraw_id: int) -> SUserWithdraw:
    return d_db.get_user_withdraw(user_withdraw_id)


@router.get(f'/user_withdraw/filter', response_model=FilterResUserWithdraw)
async def filter_user_withdraw(
        id: Optional[str] = None, 
        amount: Optional[str] = None, 
        user_withdraw_status_id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        update_time: Optional[str] = None, 
        user_id: Optional[str] = None, 
        type_id: Optional[str] = None, 
        user_bank_id: Optional[str] = None, 
        operator_id: Optional[str] = None, 
        fee_type: Optional[str] = None, 
        fee_pro: Optional[str] = None, 
        out_batch_no: Optional[str] = None, 
        batch_name: Optional[str] = None, 
        batch_remark: Optional[str] = None, 
        out_detail_no: Optional[str] = None, 
        user_name: Optional[str] = None, 
        user_phone: Optional[str] = None, 
        fee_balance: Optional[str] = None, 
        deduct_balance: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_user_withdraw_status_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_update_time: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_type_id: Optional[str] = None, 
        l_user_bank_id: Optional[str] = None, 
        l_operator_id: Optional[str] = None, 
        l_fee_type: Optional[str] = None, 
        l_fee_pro: Optional[str] = None, 
        l_out_batch_no: Optional[str] = None, 
        l_batch_name: Optional[str] = None, 
        l_batch_remark: Optional[str] = None, 
        l_out_detail_no: Optional[str] = None, 
        l_user_name: Optional[str] = None, 
        l_user_phone: Optional[str] = None, 
        l_fee_balance: Optional[str] = None, 
        l_deduct_balance: Optional[str] = None, 
        s_out_batch_no: Optional[str] = None, 
        s_batch_name: Optional[str] = None, 
        s_batch_remark: Optional[str] = None, 
        s_out_detail_no: Optional[str] = None, 
        s_user_name: Optional[str] = None, 
        s_user_phone: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserWithdraw:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if user_withdraw_status_id is not None:
        values = user_withdraw_status_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_withdraw_status_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_withdraw_status_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_withdraw_status_id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if update_time is not None:
        values = update_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['update_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['update_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['update_time_end'] = datetime.fromtimestamp(int(val))
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if type_id is not None:
        values = type_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['type_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['type_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['type_id_end'] = int(val)
        
    if user_bank_id is not None:
        values = user_bank_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_bank_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_bank_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_bank_id_end'] = int(val)
        
    if operator_id is not None:
        values = operator_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['operator_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['operator_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['operator_id_end'] = int(val)
        
    if fee_type is not None:
        values = fee_type.split(',')
        if len(values) == 1:
            val = values[0]
            items['fee_type'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['fee_type_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['fee_type_end'] = int(val)
        
    if fee_pro is not None:
        values = fee_pro.split(',')
        if len(values) == 1:
            val = values[0]
            items['fee_pro'] = float(val)
        else:
            val = values[0]
            if val != '':
                items['fee_pro_start'] = float(val)
            
            val = values[1]
            if val != '':
                items['fee_pro_end'] = float(val)
        
    if out_batch_no is not None:
        values = out_batch_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_batch_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_batch_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_batch_no_end'] = val
        
    if batch_name is not None:
        values = batch_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['batch_name'] = val
        else:
            val = values[0]
            if val != '':
                items['batch_name_start'] = val
            
            val = values[1]
            if val != '':
                items['batch_name_end'] = val
        
    if batch_remark is not None:
        values = batch_remark.split(',')
        if len(values) == 1:
            val = values[0]
            items['batch_remark'] = val
        else:
            val = values[0]
            if val != '':
                items['batch_remark_start'] = val
            
            val = values[1]
            if val != '':
                items['batch_remark_end'] = val
        
    if out_detail_no is not None:
        values = out_detail_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_detail_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_detail_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_detail_no_end'] = val
        
    if user_name is not None:
        values = user_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_name'] = val
        else:
            val = values[0]
            if val != '':
                items['user_name_start'] = val
            
            val = values[1]
            if val != '':
                items['user_name_end'] = val
        
    if user_phone is not None:
        values = user_phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_phone'] = val
        else:
            val = values[0]
            if val != '':
                items['user_phone_start'] = val
            
            val = values[1]
            if val != '':
                items['user_phone_end'] = val
        
    if fee_balance is not None:
        values = fee_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['fee_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['fee_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['fee_balance_end'] = int(val)
        
    if deduct_balance is not None:
        values = deduct_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['deduct_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['deduct_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['deduct_balance_end'] = int(val)
        

    if s_out_batch_no is not None:
        search_items['out_batch_no'] = '%' + s_out_batch_no + '%'
        
    if s_batch_name is not None:
        search_items['batch_name'] = '%' + s_batch_name + '%'
        
    if s_batch_remark is not None:
        search_items['batch_remark'] = '%' + s_batch_remark + '%'
        
    if s_out_detail_no is not None:
        search_items['out_detail_no'] = '%' + s_out_detail_no + '%'
        
    if s_user_name is not None:
        search_items['user_name'] = '%' + s_user_name + '%'
        
    if s_user_phone is not None:
        search_items['user_phone'] = '%' + s_user_phone + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_user_withdraw_status_id is not None:
        values = l_user_withdraw_status_id.split(',')
        values = [int(val) for val in values]
        set_items['user_withdraw_status_id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_update_time is not None:
        values = l_update_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['update_time'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_type_id is not None:
        values = l_type_id.split(',')
        values = [int(val) for val in values]
        set_items['type_id'] = values
        
    if l_user_bank_id is not None:
        values = l_user_bank_id.split(',')
        values = [int(val) for val in values]
        set_items['user_bank_id'] = values
        
    if l_operator_id is not None:
        values = l_operator_id.split(',')
        values = [int(val) for val in values]
        set_items['operator_id'] = values
        
    if l_fee_type is not None:
        values = l_fee_type.split(',')
        values = [int(val) for val in values]
        set_items['fee_type'] = values
        
    if l_fee_pro is not None:
        values = l_fee_pro.split(',')
        values = [float(val) for val in values]
        set_items['fee_pro'] = values
        
    if l_out_batch_no is not None:
        values = l_out_batch_no.split(',')
        values = [val for val in values]
        set_items['out_batch_no'] = values
        
    if l_batch_name is not None:
        values = l_batch_name.split(',')
        values = [val for val in values]
        set_items['batch_name'] = values
        
    if l_batch_remark is not None:
        values = l_batch_remark.split(',')
        values = [val for val in values]
        set_items['batch_remark'] = values
        
    if l_out_detail_no is not None:
        values = l_out_detail_no.split(',')
        values = [val for val in values]
        set_items['out_detail_no'] = values
        
    if l_user_name is not None:
        values = l_user_name.split(',')
        values = [val for val in values]
        set_items['user_name'] = values
        
    if l_user_phone is not None:
        values = l_user_phone.split(',')
        values = [val for val in values]
        set_items['user_phone'] = values
        
    if l_fee_balance is not None:
        values = l_fee_balance.split(',')
        values = [int(val) for val in values]
        set_items['fee_balance'] = values
        
    if l_deduct_balance is not None:
        values = l_deduct_balance.split(',')
        values = [int(val) for val in values]
        set_items['deduct_balance'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_user_withdraw(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_user_withdraw(items, search_items, set_items)
    
    return FilterResUserWithdraw(data=data, total=c)


@router.get(f'/user_withdraw/fast_filter', response_model=FilterResUserWithdraw)
async def fast_filter_user_withdraw(
        id: Optional[str] = None, 
        amount: Optional[str] = None, 
        user_withdraw_status_id: Optional[str] = None, 
        create_time: Optional[str] = None, 
        update_time: Optional[str] = None, 
        user_id: Optional[str] = None, 
        type_id: Optional[str] = None, 
        user_bank_id: Optional[str] = None, 
        operator_id: Optional[str] = None, 
        fee_type: Optional[str] = None, 
        fee_pro: Optional[str] = None, 
        out_batch_no: Optional[str] = None, 
        batch_name: Optional[str] = None, 
        batch_remark: Optional[str] = None, 
        out_detail_no: Optional[str] = None, 
        user_name: Optional[str] = None, 
        user_phone: Optional[str] = None, 
        fee_balance: Optional[str] = None, 
        deduct_balance: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_amount: Optional[str] = None, 
        l_user_withdraw_status_id: Optional[str] = None, 
        l_create_time: Optional[str] = None, 
        l_update_time: Optional[str] = None, 
        l_user_id: Optional[str] = None, 
        l_type_id: Optional[str] = None, 
        l_user_bank_id: Optional[str] = None, 
        l_operator_id: Optional[str] = None, 
        l_fee_type: Optional[str] = None, 
        l_fee_pro: Optional[str] = None, 
        l_out_batch_no: Optional[str] = None, 
        l_batch_name: Optional[str] = None, 
        l_batch_remark: Optional[str] = None, 
        l_out_detail_no: Optional[str] = None, 
        l_user_name: Optional[str] = None, 
        l_user_phone: Optional[str] = None, 
        l_fee_balance: Optional[str] = None, 
        l_deduct_balance: Optional[str] = None, 
        s_out_batch_no: Optional[str] = None, 
        s_batch_name: Optional[str] = None, 
        s_batch_remark: Optional[str] = None, 
        s_out_detail_no: Optional[str] = None, 
        s_user_name: Optional[str] = None, 
        s_user_phone: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserWithdraw:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if amount is not None:
        values = amount.split(',')
        if len(values) == 1:
            val = values[0]
            items['amount'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['amount_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['amount_end'] = int(val)
        
    if user_withdraw_status_id is not None:
        values = user_withdraw_status_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_withdraw_status_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_withdraw_status_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_withdraw_status_id_end'] = int(val)
        
    if create_time is not None:
        values = create_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['create_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['create_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['create_time_end'] = datetime.fromtimestamp(int(val))
        
    if update_time is not None:
        values = update_time.split(',')
        if len(values) == 1:
            val = values[0]
            items['update_time'] = datetime.fromtimestamp(int(val))
        else:
            val = values[0]
            if val != '':
                items['update_time_start'] = datetime.fromtimestamp(int(val))
            
            val = values[1]
            if val != '':
                items['update_time_end'] = datetime.fromtimestamp(int(val))
        
    if user_id is not None:
        values = user_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_id_end'] = int(val)
        
    if type_id is not None:
        values = type_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['type_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['type_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['type_id_end'] = int(val)
        
    if user_bank_id is not None:
        values = user_bank_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_bank_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['user_bank_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['user_bank_id_end'] = int(val)
        
    if operator_id is not None:
        values = operator_id.split(',')
        if len(values) == 1:
            val = values[0]
            items['operator_id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['operator_id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['operator_id_end'] = int(val)
        
    if fee_type is not None:
        values = fee_type.split(',')
        if len(values) == 1:
            val = values[0]
            items['fee_type'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['fee_type_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['fee_type_end'] = int(val)
        
    if fee_pro is not None:
        values = fee_pro.split(',')
        if len(values) == 1:
            val = values[0]
            items['fee_pro'] = float(val)
        else:
            val = values[0]
            if val != '':
                items['fee_pro_start'] = float(val)
            
            val = values[1]
            if val != '':
                items['fee_pro_end'] = float(val)
        
    if out_batch_no is not None:
        values = out_batch_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_batch_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_batch_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_batch_no_end'] = val
        
    if batch_name is not None:
        values = batch_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['batch_name'] = val
        else:
            val = values[0]
            if val != '':
                items['batch_name_start'] = val
            
            val = values[1]
            if val != '':
                items['batch_name_end'] = val
        
    if batch_remark is not None:
        values = batch_remark.split(',')
        if len(values) == 1:
            val = values[0]
            items['batch_remark'] = val
        else:
            val = values[0]
            if val != '':
                items['batch_remark_start'] = val
            
            val = values[1]
            if val != '':
                items['batch_remark_end'] = val
        
    if out_detail_no is not None:
        values = out_detail_no.split(',')
        if len(values) == 1:
            val = values[0]
            items['out_detail_no'] = val
        else:
            val = values[0]
            if val != '':
                items['out_detail_no_start'] = val
            
            val = values[1]
            if val != '':
                items['out_detail_no_end'] = val
        
    if user_name is not None:
        values = user_name.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_name'] = val
        else:
            val = values[0]
            if val != '':
                items['user_name_start'] = val
            
            val = values[1]
            if val != '':
                items['user_name_end'] = val
        
    if user_phone is not None:
        values = user_phone.split(',')
        if len(values) == 1:
            val = values[0]
            items['user_phone'] = val
        else:
            val = values[0]
            if val != '':
                items['user_phone_start'] = val
            
            val = values[1]
            if val != '':
                items['user_phone_end'] = val
        
    if fee_balance is not None:
        values = fee_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['fee_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['fee_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['fee_balance_end'] = int(val)
        
    if deduct_balance is not None:
        values = deduct_balance.split(',')
        if len(values) == 1:
            val = values[0]
            items['deduct_balance'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['deduct_balance_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['deduct_balance_end'] = int(val)
        

    if s_out_batch_no is not None:
        search_items['out_batch_no'] = '%' + s_out_batch_no + '%'
        
    if s_batch_name is not None:
        search_items['batch_name'] = '%' + s_batch_name + '%'
        
    if s_batch_remark is not None:
        search_items['batch_remark'] = '%' + s_batch_remark + '%'
        
    if s_out_detail_no is not None:
        search_items['out_detail_no'] = '%' + s_out_detail_no + '%'
        
    if s_user_name is not None:
        search_items['user_name'] = '%' + s_user_name + '%'
        
    if s_user_phone is not None:
        search_items['user_phone'] = '%' + s_user_phone + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_amount is not None:
        values = l_amount.split(',')
        values = [int(val) for val in values]
        set_items['amount'] = values
        
    if l_user_withdraw_status_id is not None:
        values = l_user_withdraw_status_id.split(',')
        values = [int(val) for val in values]
        set_items['user_withdraw_status_id'] = values
        
    if l_create_time is not None:
        values = l_create_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['create_time'] = values
        
    if l_update_time is not None:
        values = l_update_time.split(',')
        values = [datetime.fromtimestamp(int(val)) for val in values]
        set_items['update_time'] = values
        
    if l_user_id is not None:
        values = l_user_id.split(',')
        values = [int(val) for val in values]
        set_items['user_id'] = values
        
    if l_type_id is not None:
        values = l_type_id.split(',')
        values = [int(val) for val in values]
        set_items['type_id'] = values
        
    if l_user_bank_id is not None:
        values = l_user_bank_id.split(',')
        values = [int(val) for val in values]
        set_items['user_bank_id'] = values
        
    if l_operator_id is not None:
        values = l_operator_id.split(',')
        values = [int(val) for val in values]
        set_items['operator_id'] = values
        
    if l_fee_type is not None:
        values = l_fee_type.split(',')
        values = [int(val) for val in values]
        set_items['fee_type'] = values
        
    if l_fee_pro is not None:
        values = l_fee_pro.split(',')
        values = [float(val) for val in values]
        set_items['fee_pro'] = values
        
    if l_out_batch_no is not None:
        values = l_out_batch_no.split(',')
        values = [val for val in values]
        set_items['out_batch_no'] = values
        
    if l_batch_name is not None:
        values = l_batch_name.split(',')
        values = [val for val in values]
        set_items['batch_name'] = values
        
    if l_batch_remark is not None:
        values = l_batch_remark.split(',')
        values = [val for val in values]
        set_items['batch_remark'] = values
        
    if l_out_detail_no is not None:
        values = l_out_detail_no.split(',')
        values = [val for val in values]
        set_items['out_detail_no'] = values
        
    if l_user_name is not None:
        values = l_user_name.split(',')
        values = [val for val in values]
        set_items['user_name'] = values
        
    if l_user_phone is not None:
        values = l_user_phone.split(',')
        values = [val for val in values]
        set_items['user_phone'] = values
        
    if l_fee_balance is not None:
        values = l_fee_balance.split(',')
        values = [int(val) for val in values]
        set_items['fee_balance'] = values
        
    if l_deduct_balance is not None:
        values = l_deduct_balance.split(',')
        values = [int(val) for val in values]
        set_items['deduct_balance'] = values
            
    
    data = d_db.filter_user_withdraw(items, search_items, set_items, page, page_size)
    return FilterResUserWithdraw(data=data, total=-1)

    
@router.post(f'/user_withdraw_status/create', response_model=SUserWithdrawStatus)
async def create_user_withdraw_status(item: CreateUserWithdrawStatus) -> SUserWithdrawStatus:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_user_withdraw_status(item)
        
    
@router.post(f'/user_withdraw_status/update', response_model=str)
async def update_user_withdraw_status(item: SUserWithdrawStatus) -> str:
    d_db.update_user_withdraw_status(item)
    return "success"

    
@router.get(f'/user_withdraw_status/get', response_model=SUserWithdrawStatus)
async def get_user_withdraw_status(user_withdraw_status_id: int) -> SUserWithdrawStatus:
    return d_db.get_user_withdraw_status(user_withdraw_status_id)


@router.get(f'/user_withdraw_status/filter', response_model=FilterResUserWithdrawStatus)
async def filter_user_withdraw_status(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserWithdrawStatus:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_user_withdraw_status(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_user_withdraw_status(items, search_items, set_items)
    
    return FilterResUserWithdrawStatus(data=data, total=c)


@router.get(f'/user_withdraw_status/fast_filter', response_model=FilterResUserWithdrawStatus)
async def fast_filter_user_withdraw_status(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserWithdrawStatus:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    data = d_db.filter_user_withdraw_status(items, search_items, set_items, page, page_size)
    return FilterResUserWithdrawStatus(data=data, total=-1)

    
@router.post(f'/user_withdraw_type/create', response_model=SUserWithdrawType)
async def create_user_withdraw_type(item: CreateUserWithdrawType) -> SUserWithdrawType:
    dict_item = dict(item)
    for k,v in dict_item.items():
        if v is not None:
            v = str(v)
            v = v.replace(" ", "")
            get_search = re.search(r"'", v, flags=0)
            get_search2 = re.search(r'%27', v, flags=0)
            get_search3 = re.search(r'unionselect', v, flags=0)
            if get_search or get_search2 or get_search3:
               raise HTTPException(status_code=404, detail='bad way~~~~~~')

    return d_db.insert_user_withdraw_type(item)
        
    
@router.post(f'/user_withdraw_type/update', response_model=str)
async def update_user_withdraw_type(item: SUserWithdrawType) -> str:
    d_db.update_user_withdraw_type(item)
    return "success"

    
@router.get(f'/user_withdraw_type/get', response_model=SUserWithdrawType)
async def get_user_withdraw_type(user_withdraw_type_id: int) -> SUserWithdrawType:
    return d_db.get_user_withdraw_type(user_withdraw_type_id)


@router.get(f'/user_withdraw_type/filter', response_model=FilterResUserWithdrawType)
async def filter_user_withdraw_type(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        order_by: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserWithdrawType:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    
    order_items = dict()
    if order_by is not None:
        orders = order_by.split(',')
        for order in orders:
            if order.startswith('-'):
                order_items[order[1:]] = 'desc'
            else:
                order_items[order] = 'asc'
    data = d_db.filter_user_withdraw_type(items, search_items, set_items, order_items, page, page_size)
    c = d_db.filter_count_user_withdraw_type(items, search_items, set_items)
    
    return FilterResUserWithdrawType(data=data, total=c)


@router.get(f'/user_withdraw_type/fast_filter', response_model=FilterResUserWithdrawType)
async def fast_filter_user_withdraw_type(
        id: Optional[str] = None, 
        title: Optional[str] = None, 
        l_id: Optional[str] = None, 
        l_title: Optional[str] = None, 
        s_title: Optional[str] = None,
        page: int = 1, 
        page_size: int = 20) -> FilterResUserWithdrawType:

    """
    1. 按照字段查询`?field1=value1&field2=value2`
    2. 按照范围查询，大于某个值`?field=value,`, 表示filed大于value
    3. 按照范围查询，小于某个值`?field=,value`， 表示field小于value
    4. 按照范围查询，范围值`?field=value1,value2`，表示搜索field大于等于value1，小于等于value2
    5. page是页数，第一页为1
    6. page_size为每一页大小， 默认20
    7. 如果是日期，请使用时间戳，十位的时间戳，单位：秒
    8. 所有字符串字段均可搜索，需要在字段前加个前缀`s_`,例如搜索`username`包含`zhang`， 则可以这样`s_username=zhang`写,这里只是一个假设
    9. 字段的多选择（in关系），需要在字段前加前缀`l_`,并且以逗号`,`隔开,例如要找出`id=2`或者`id=3`的样本，可以这样写`?l_id=2,3`
    """
    

    items = dict()
    search_items = dict()
    set_items = dict()

    if id is not None:
        values = id.split(',')
        if len(values) == 1:
            val = values[0]
            items['id'] = int(val)
        else:
            val = values[0]
            if val != '':
                items['id_start'] = int(val)
            
            val = values[1]
            if val != '':
                items['id_end'] = int(val)
        
    if title is not None:
        values = title.split(',')
        if len(values) == 1:
            val = values[0]
            items['title'] = val
        else:
            val = values[0]
            if val != '':
                items['title_start'] = val
            
            val = values[1]
            if val != '':
                items['title_end'] = val
        

    if s_title is not None:
        search_items['title'] = '%' + s_title + '%'
        

    if l_id is not None:
        values = l_id.split(',')
        values = [int(val) for val in values]
        set_items['id'] = values
        
    if l_title is not None:
        values = l_title.split(',')
        values = [val for val in values]
        set_items['title'] = values
            
    
    data = d_db.filter_user_withdraw_type(items, search_items, set_items, page, page_size)
    return FilterResUserWithdrawType(data=data, total=-1)
